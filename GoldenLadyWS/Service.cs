using System;
using System.Collections;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters.Binary;
using System.Text;
using System.Text.RegularExpressions;
using System.Web;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Windows.Forms;
using System.Xml;
using GoldenLady.Extension;
using GoldenLady.Global;
using GoldenLady.Standard;
using GoldenLady.Utility;
using GoldenLadyWS.Customer;

namespace GoldenLadyWS
{
    public class Service
    {

        PMS_Service.Service PMS_Service = new PMS_Service.Service();
        public static string ConnString = "";
        public static SqlConnection Conn;
        public  string _columns_all = "CardNO, CustomerNO, OrderNO, FPH, IntroducerCardNO, CustomerName1, CustomerName2,MobilePhone1,MobilePhone2, MarryDate, SuiteName, SuitePrice,Discount,ReducesPresently,OrderSuitePrice, OrderMemory, ImageCount, OrderDepartment, OrderEmployee, OrderDate, PreClothesDate, PreDressDate, PreShootDateN, PreShootDateW, PreChooseDate, PreLookDate, PreGetGoodsDate, ClothesAddress, ClothesEmployee, ClothesDate, ClothesMemory, DressAddress, DressEmployee, ModelEmployee, DressDate, DressMemory, ShootAddressN, ShootEmployeeN, DressEmployeeN, ShootDateN, ShootMemoryN, ShootAddressW, ShootEmployeeW, DressEmployeeW, ShootDateW, ShootMemoryW, ChooseAddress, ChooseEmployee, ChooseDate, ChooseMeMory, LookAddress, LookEmployee, LookDate, LookMemory, GetGoodsAddress, GetGoodsEmployee, GetGoodsDate, GetGoodsMemory, ImagePath, ImageXSPath, ImageSJPath, BackupPath, OrdersIsDelete, Process, Pregnant "; //OrderMemory, 
        /// <summary>
        /// 订单显示列-所有
        /// </summary>
        public string _Columns_All
        {
            set { _columns_all = value; }
            get { return _columns_all; }
        }

        private string _Msg;
        /// <summary>
        /// 数据事物消息
        /// </summary>
        public string Msg
        {
            set
            {
                _Msg = value;
            }
            get
            {

                //使用用后清空
                try
                {
                    return _Msg;
                }
                finally
                {
                    _Msg = "";
                }
            }
        }

        public Service()
        {
            //如果使用设计的组件，请取消注释以下行 ////
            //InitializeComponent(); DBBA
            FetchConnString();
        }
        public void FetchConnString()
        {
            ConnString = ConfigurationSettings.AppSettings["DSN"];
            string cKey = ConfigurationSettings.AppSettings["cKey"];
            ConnString = DESTool.Decrypt(ConnString, cKey); //解密
        }
        /// <summary>
        /// 返回错误信息
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public string GetErroMsg()
        {
            return Msg;
        }


        #region 数据集序列化

        //// <summary>
        /// Serialize the Data of dataSet to binary format
        /// </summary>
        /// <param name="dsOriginal"></param>
        /// <returns></returns>
        public byte[] GetBinaryFormatData(DataSet dsOriginal)
        {
            byte[] binaryDataResult = null;
            MemoryStream memStream = new MemoryStream();
            IFormatter brFormatter = new BinaryFormatter();
            dsOriginal.RemotingFormat = SerializationFormat.Binary;

            brFormatter.Serialize(memStream, dsOriginal);
            binaryDataResult = memStream.ToArray();
            memStream.Close();
            memStream.Dispose();
            return binaryDataResult;
        }

        /// <summary>
        /// 返回DataSet的XML
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public XmlDocument GetXmlByDataset(string sql)
        {
            string sSql = "select distinct top 400 CardNO, CustomerNO, OrderNO, FPH, IntroducerCardNO, CustomerName1, CustomerName2,MobilePhone1,MobilePhone2, MarryDate, SuiteName, SuitePrice,Discount,ReducesPresently,OrderSuitePrice, ImageCount, OrderDepartment, OrderEmployee, OrderDate, PreClothesDate, PreDressDate, PreShootDateN, PreShootDateW, PreChooseDate, PreLookDate, PreGetGoodsDate, ClothesAddress, ClothesEmployee, ClothesDate, ClothesMemory, DressAddress, DressEmployee, ModelEmployee, DressDate, DressMemory, ShootAddressN, ShootEmployeeN, DressEmployeeN, ShootDateN, ShootMemoryN, ShootAddressW, ShootEmployeeW, DressEmployeeW, ShootDateW, ShootMemoryW, ChooseAddress, ChooseEmployee, ChooseDate, ChooseMeMory, LookAddress, LookEmployee, LookDate, LookMemory, GetGoodsAddress, GetGoodsEmployee, GetGoodsDate, GetGoodsMemory, OrderMemory, ImagePath, ImageXSPath, ImageSJPath, BackupPath, OrdersIsDelete, ProcessCode, Process, OrderLogoEmployee from dbo.VIEW_Orders where 1=1 " + sql + " order by OrderDate desc ";
            XmlDocument doc = new XmlDocument();
            doc = new XmlDataDocument(ExecuteDataSet(sSql, "Tmp"));
            return doc;
        }
        #endregion


        #region 数据库操作

        /// <summary>
        /// 测试连接是否成功
        /// </summary>
        /// <param name="ConnectionString"></param>
        /// <returns></returns>
        public bool TestConnection(ref string msg)
        {
            bool result = true;
            try
            {
                SqlConnection m_myConnection = new SqlConnection(ConnString + ";Connection Timeout=2;");
                m_myConnection.Open();
                //数据库操作......
                m_myConnection.Close();
            }
            catch (Exception ex)
            {
                msg = ex.Message.ToString();
                result = false;
            }
            return result;
        }

        /// <summary>
        /// 打开数据库
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public bool OpenConn()
        {
            try
            {
                Conn = new SqlConnection(ConnString);
                if (Conn.State == ConnectionState.Closed)
                {
                    Conn.Open();
                }
                return true;
            }
            catch (Exception ex)
            {
                return false;
            }
        }
        /// <summary>
        /// 关闭数据库
        /// </summary>
        [WebMethod]
        public void CloseConn()
        {
            try
            {
                if (Conn.State == ConnectionState.Open)
                {
                    Conn.Close();
                }
            }
            catch
            {
            }
        }
        #endregion

        #region 事物处理
        /// <summary>
        /// 事务处理SQL
        /// </summary>
        /// <param name="sSql"></param>
        [WebMethod]
        public bool ExecuteSql(string sSql)
        {
            //OpenConn();
            SqlConnection myConn = new SqlConnection(ConnString);
            myConn.Open();
            SqlTransaction myTrans = myConn.BeginTransaction();
            try
            {
                SqlCommand sqlCommand = null;
                sqlCommand = new SqlCommand(sSql, myConn, myTrans);
                sqlCommand.ExecuteNonQuery();
                myTrans.Commit();
                // CloseConn();
                myConn.Close();
                this.Msg = "";
                return true;
            }
            catch (Exception ex)
            {
                this.Msg = ex.Message;
                myTrans.Rollback();
                // CloseConn();
                myConn.Close();
                return false;
            }
        }

        /// <summary>
        /// 返回第一行第一列的值
        /// </summary>
        /// <param name="sSql"></param>
        [WebMethod]
        public string ExecuteSqlToString(string sSql)
        {
            //try
            //{
            //    OpenConn();
            //    SqlCommand myCom = new SqlCommand(sSql, Conn);
            //    this.Msg = "";
            //    return myCom.ExecuteScalar().ToString();
            //}
            //catch (Exception ex)
            //{
            //    this.Msg = ex.Message;
            //    return "";
            //}
            //finally { CloseConn(); }
            #region//////////////////////////////////////////////////////////////////////////
            //Caijinsong:2012-12-08
            string strValue = String.Empty;
            try
            {
                using (SqlConnection sqlConn = new SqlConnection(ConnString))
                {
                    using (SqlCommand command = sqlConn.CreateCommand())
                    {
                        command.CommandText = sSql;
                        command.CommandType = CommandType.Text;
                        DataSet ds = new DataSet();
                        SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
                        sqlAdapter.Fill(ds);
                        strValue = ds.Tables[0].Rows[0][0] == DBNull.Value ? String.Empty : ds.Tables[0].Rows[0][0].ToString();
                        this.Msg = String.Empty;
                    }
                }
            }
            catch (System.Exception ex)
            {
                this.Msg = ex.Message;
            }
            return strValue;
            //////////////////////////////////////////////////////////////////////////
            #endregion
        }

        /// <summary>
        /// 数据集查询zzzzzzzxzzzzzzzzzzzzzzz`
        /// </summary>
        /// <param name="sSql"></param>
        /// <returns></returns>
        public DataSet ExecuteDataSet(string sSql, string sTableName)
        {
            //DataSet myds = new DataSet();
            //try
            //{
            //    OpenConn();
            //    SqlDataAdapter myda = new SqlDataAdapter(sSql, Conn);
            //    myda.Fill(myds, sTableName);
            //    CloseConn();
            //    this.Msg = "";
            //    return myds;
            //}
            //catch (Exception ex)
            //{
            //    this.Msg = ex.Message;
            //    return myds;
            //}
            #region //////////////////////////////////////////////////////////////////////////
            //Caijinsong:2012-12-08
            DataSet myds = new DataSet();
            try
            {
                using (SqlConnection sqlConn = new SqlConnection(ConnString))
                {
                    using (SqlCommand command = sqlConn.CreateCommand())
                    {
                        command.CommandText = sSql;
                        command.CommandType = CommandType.Text;
                        command.CommandTimeout = 180;
                        SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
                        sqlAdapter.Fill(myds, sTableName);
                        this.Msg = String.Empty;
                    }
                }
            }
            catch (System.Exception ex)
            {
                this.Msg = ex.Message;
            }
            return myds;
            //////////////////////////////////////////////////////////////////////////
            #endregion
        }

        #endregion

        #region 其它

        /// <summary>
        /// 测试连接串
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public string HelloWorld()
        {
            return ConnString;
        }

        /// <summary>
        /// 修改登录密码
        /// </summary>
        /// <param name="sEmployeeNO"></param>
        /// <param name="sNewPassword"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateEmployee(string sEmployeeNO, string sEmployeeName, string sEmployeeSex, string sEmployeeBirthday, string sNewPassword)
        {
            string sSql = "Update Employee set EmployeeName='" + sEmployeeName + "',EmployeeSex='" + sEmployeeSex + "',EmployeeBirthday='" + sEmployeeBirthday + "',EmployeePassword='" + sNewPassword + "' where EmployeeNO='" + sEmployeeNO + "' ";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 修改登录密码
        /// </summary>
        /// <param name="sEmployeeNO"></param>
        /// <param name="sNewPassword"></param>
        [WebMethod]
        public bool UpdateEmployeePassword(string sEmployeeNO, string sNewPassword)
        {
            string sSql = "Update Employee set EmployeePassword='" + sNewPassword + "',IsChange=1 where EmployeeNO='" + sEmployeeNO + "' ";
            return ExecuteSql(sSql);
        }

        #endregion

        #region 收银操作

        /// <summary>
        /// 得到客户号
        /// </summary>
        /// <param name="OrderNO"></param>
        /// <returns></returns>
        [WebMethod]
        public string GetCustomerNO(string CustomerNO)
        {
            string Sql = "select top 1 right(CustomerNO,4) from Customers where CustomerNO like '" + CustomerNO + "%' order BY CustomerNO desc";
            OpenConn();
            SqlCommand myCom = new SqlCommand(Sql, Conn);
            string sRCustomerNO = "0000";
            object obj = myCom.ExecuteScalar();
            if (obj != null)
            {
                sRCustomerNO = obj.ToString();
            }
            int TopCustomerNO = Int32.Parse(sRCustomerNO) + 1;
            CloseConn();
            string NewCustomerNO = CustomerNO + string.Format("{0:d4}", TopCustomerNO);
            return NewCustomerNO;
        }

        /// <summary>
        /// 得到订单号
        /// </summary>
        /// <param name="OrderNO"></param>
        /// <returns></returns>
        [WebMethod]
        public string GetOrderNO(string OrderNO)
        {
            string Sql = "select top 1 right(OrderNO,3) from Orders where OrderNO like '" + OrderNO + "%' order BY OrderNO desc";
            OpenConn();
            SqlCommand myCom = new SqlCommand(Sql, Conn);
            string sROrderNO = "000";
            if (myCom.ExecuteScalar() != null)
            {
                sROrderNO = myCom.ExecuteScalar().ToString();
            }
            int TopOrderNo = Int32.Parse(sROrderNO) + 1;
            CloseConn();
            string NewOrderNo = OrderNO + string.Format("{0:d3}", TopOrderNo); ;
            return NewOrderNo;
        }

        /// <summary>
        /// 得到收银编号
        /// </summary>
        /// <param name="OrderNO"></param>
        /// <returns></returns>
        [WebMethod]
        public string GetCashNO(string CashNO)
        {
            string Sql = "select top 1 right(CashNO,3) from CashSub where CashNO like '" + CashNO + "%' and orderno='" + CashNO + "'order BY CashNO desc";
            OpenConn();
            SqlCommand myCom = new SqlCommand(Sql, Conn);
            string sRCashNO = "000";
            if (myCom.ExecuteScalar() != null)
            {
                sRCashNO = myCom.ExecuteScalar().ToString();
            }
            int TopCashNO = Int32.Parse(sRCashNO) + 1;
            CloseConn();
            string NewCashNO = CashNO + string.Format("{0:d3}", TopCashNO); ;
            return NewCashNO;
        }

        /// <summary>
        /// 获取收银的看样预付发票或第一次收银发票
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <returns></returns>
        [WebMethod]
        public string GetFPH(string sOrderNO)
        {
            string sSql = "declare @FPH varchar(50) if exists(select OrderNO,CashNO,CashPretext from VIEW_Cash where OrderNO='" + sOrderNO + "' and CashPretext='看样预付') select @FPH=FPH from VIEW_Cash where OrderNO='" + sOrderNO + "' and CashPretext='看样预付' else if exists(select OrderNO,CashNO,CashPretext from VIEW_Cash where OrderNO='" + sOrderNO + "' and CashPretext='加选') select @FPH=FPH from VIEW_Cash where OrderNO='" + sOrderNO + "' and CashPretext='加选' else select @FPH=FPH from VIEW_Cash where OrderNO='" + sOrderNO + "' and RIGHT(CashNO,3)='001' select @FPH ";
            return ExecuteSqlToString(sSql);
        }

        /// <summary>
        /// 欠款订单查询
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchCashCustomer(string sql)
        {
            string sSql = "select CustomerNO, CardNO, IntroducerType, IntroducerCardNO, CustomerName1, CustomerName2, MobilePhone1, MobilePhone2, OrderNO, SuiteTypeName, SuiteName, OrderSuitePrice, OrderDepartment, OrderEmployee, OrderDate, Suite=isnull((PayableSuite - ActualSuite),0), Shoot=isnull((PayableShoot - ActualShoot),0), Clothes=isnull((PayableClothes - ActualClothes),0), Choose=isnull((PayableChoose - ActualChoose),0), GetGoods=isnull((PayableGetGoods - ActuaGetGoods),0), Other=isnull((PayableOther - ActuaOther),0), Total=isnull((PayableSuite - ActualSuite + PayableShoot - ActualShoot + PayableClothes - ActualClothes + PayableChoose - ActualChoose + PayableGetGoods - ActuaGetGoods + PayableOther - ActuaOther),0) from VIEW_Cash_Customers where 1=1 " + sql + " Order by OrderDate desc";
            return ExecuteDataSet(sSql, "SearchCashCustomer");
        }

        /// <summary>
        /// 保存收银
        /// Caijinsong 2012-11-13
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public int SaveCash(string sOrderType, string sOrderNO, string sCashNO, string sUseName, string sCustomerName, string sCustomerPhone, string sIntroType, string sIntroCardNO, string sIntroCustomerName, string sIntegral, string sSuiteTypeName, string sSuitePrice, string sFPH, string sBusinessDepartment, string sBusinessEmployeeNO, string sBusinessPoint, string sCashMemory, string sCashEmployeeNO, string sCashDate, string sCreate, string sCreateDate, string[] sCashIndex, string[] sCashPretext, string[] sSize, string[] sNumber, string[] sUnit, string[] sCashWay, string[] sCashNumber, string[] sThirdNO, string sIsPrint, string sCashState, string sOpType, string sCompanyBM, string fphm)
        {
            //返回0表示成功,1表示保存收银错误,2表示保存收银明细错误
            try
            {
                string sSql = "";
                if (sOpType == "编辑")
                {
                    //编辑订单收银信息"EDIT"
                    sSql += "Update Cash set OrderType='" + sOrderType + "',CustomerName='" + sCustomerName + "', CustomerPhone='" + sCustomerPhone + "', IntroType='" + sIntroType + "', IntroCardNO='" + sIntroCardNO + "', IntroCustomerName='" + sIntroCustomerName + "',Integral='" + sIntegral + "', SuiteTypeName='" + sSuiteTypeName + "', SuitePrice='" + sSuitePrice + "', UseName='" + sUseName + "' where OrderNO='" + sOrderNO + "'";
                    sSql += "Delete CashSub where CashNO='" + sCashNO + "' ";
                }
                else
                {
                    //新建订单收银信息"NEW1"/"NEW2"

                    //以下注释的代码作用为:在新订单收银的同时在客户表和订单表中新建一条空记录
                    //string sCustomerNO = sOrderNo.Substring(0, sOrderNo.Length - 3);
                    //sSql += "if not Exists(select CustomerNO from Customers where CustomerNO = '" + sCustomerNO + "') Insert into Customers (CustomerNO) Values ('" + sCustomerNO + "')  ";
                    //sSql += "if not Exists(select CustomerNO from Letters where CustomerNO = '" + sCustomerNO + "') Insert into Letters (CustomerNO) Values ('" + sCustomerNO + "')  ";
                    //sSql += "if not Exists(select CustomerNO from Orders where CustomerNO = '" + sCustomerNO + "' and OrderNO='" + sOrderNo + "') Insert into Orders (CustomerNO,OrderNO) Values ('" + sCustomerNO + "','" + sOrderNo + "') ";
                    sSql += "if not Exists(select OrderNO from Cash where OrderNO='" + sOrderNO + "') Insert into Cash (OrderType, OrderNO, CustomerName, CustomerPhone, IntroType, IntroCardNO, IntroCustomerName, Integral, SuiteTypeName, SuitePrice,CompanyBM,UseName) Values ('" + sOrderType + "','" + sOrderNO + "','" + sCustomerName + "','" + sCustomerPhone + "','" + sIntroType + "','" + sIntroCardNO + "','" + sIntroCustomerName + "','" + sIntegral + "','" + sSuiteTypeName + "','" + sSuitePrice + "','" + sCompanyBM + "','" + sUseName + "') else Update Cash set OrderType='" + sOrderType + "',CustomerName='" + sCustomerName + "', CustomerPhone='" + sCustomerPhone + "', IntroType='" + sIntroType + "', IntroCardNO='" + sIntroCardNO + "', IntroCustomerName='" + sIntroCustomerName + "',Integral='" + sIntegral + "', SuiteTypeName='" + sSuiteTypeName + "', SuitePrice='" + sSuitePrice + "', UseName='" + sUseName + "' where OrderNO='" + sOrderNO + "' ";
                }
                bool bIsChoose = false;
                //不管是新建还是编辑,都将创建新订单收银
                sSql += "Insert into CashSub (OrderNO, CashNO, FPH, BusinessDepartment, BusinessEmployeeNO, BusinessPoint, CashMemory, CashEmployeeNO, CashDate, [Create], CreateDate, IsPrint, CashState,fphm) Values ('" + sOrderNO + "','" + sCashNO + "','" + sFPH + "','" + sBusinessDepartment + "','" + sBusinessEmployeeNO + "','" + sBusinessPoint + "','" + sCashMemory + "','" + sCashEmployeeNO + "','" + sCashDate + "','" + sCreate + "','" + sCreateDate + "','" + sIsPrint + "','" + sCashState + "','" + fphm + "') ";
                for (int i = 0; i < sCashIndex.Length; i++)
                {
                    sSql += "Insert into CashDetail (CashNO, CashIndex, CashPretext, [Size], Number, Unit, CashWay, CashNumber,ThirdNO) Values ('" + sCashNO + "','" + sCashIndex[i] + "','" + sCashPretext[i] + "','" + sSize[i] + "','" + sNumber[i] + "','" + sUnit[i] + "','" + sCashWay[i] + "','" + sCashNumber[i] + "','" + sThirdNO[i] + "') ";
                    //是否找到看样预付的发票号
                    if (!bIsChoose)
                        if (sCashPretext[i] == "SKSY_3JF" || sCashPretext[i] == "SKSY_4KYYF" || sCashPretext[i] == "SKSY_a8SCD")
                            bIsChoose = true;
                }
                //属于第笔订单收银或看样付款，都将将发票号传回给订单
                if (sOpType != "编辑" && Int32.Parse(sCashNO.Substring(sCashNO.Length - 3, 3)) == 1 || bIsChoose)
                {
                    sSql += "Update Orders set FPH='" + sFPH + "' where OrderNO='" + sOrderNO + "' ";
                }
                if (ExecuteSql(sSql))
                    return 0;
                else
                    return 1;
            }
            catch
            {
                return 1;
            }
        }

        /// <summary>
        /// 订单欠款表
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sPayable"></param>
        /// <param name="sPayableMoney"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateOrdersPayState(string sOrderNO, string sPayable, string sPayableMoney)
        {
            string sSql = "Update OrdersPayState set ";
            switch (sPayable)
            {
                case "套系":
                    sSql += "ActualSuite=ActualSuite+" + sPayableMoney + " ";
                    break;
                case "摄影":
                    sSql += "ActualShoot=ActualShoot+" + sPayableMoney + " ";
                    break;
                case "礼服":
                    sSql += "ActualClothes=ActualClothes+" + sPayableMoney + " ";
                    break;
                case "选片":
                    sSql += "ActualChoose=ActualChoose+" + sPayableMoney + " ";
                    break;
                case "取件":
                    sSql += "ActuaGetGoods=ActuaGetGoods+" + sPayableMoney + " ";
                    break;
                case "其它":
                    sSql += "ActuaOther=ActuaOther+" + sPayableMoney + " ";
                    break;
            }
            sSql += "where OrderNO='" + sOrderNO + "' ";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 更改订单时间
        /// </summary>
        /// <param name="strOrderNO"></param>
        /// <param name="strCashDate"></param>
        /// <returns></returns>
        public bool UpdateOrderDate(string strOrderNO, string strCashDate)
        {
            string strSql = "update Orders set OrderDate='" + strCashDate + "' where OrderNO='" + strOrderNO + "'";
            return ExecuteSql(strSql);
        }

        /// <summary>
        /// 是否存在婚纱jjjmnn收银
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <returns></returns>
        [WebMethod]
        public bool CheckCashHS(string sOrderNO)
        {
            string sSql = "select count(OrderNO) from dbo.VIEW_Cash where CashPretext like '%婚纱%' and OrderNO='" + sOrderNO + "' ";
            return Int32.Parse(ExecuteSqlToString(sSql)) > 0;
        }

        /// <summary>
        /// 收银发票
        /// </summary>
        /// <param name="sCashNO"></param>
        /// <param name="sFPH"></param>
        [WebMethod]
        public bool UpdateCashFPH(string sCashNO, string sFPH, string typeName)
        {
            string sSql = "Update CashSub set " + typeName + "='" + sFPH + "' where CashNO='" + sCashNO + "' ";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 打印发票
        /// </summary>
        /// <param name="sCashNO"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet PrintInvoice(string sCashNO)
        {
            string sSql = "SELECT [OrderType],[OrderNO],[CashNO],[UseName],[CustomerName],[CustomerPhone],[Intro],[SuitePrice],[CashMemory],dbo.Fn_GetEmployeeName(BusinessEmployee) 'BusinessEmployee',[CashEmployee],[CashDate],[CashPretext],[Size],[Number],[Unit],[CashMoney],[SuiteTypeName],[CashWay] FROM [VIEW_PrintInvoice] WHERE [CashNO]='" + sCashNO + "' ";
            return ExecuteDataSet(sSql, "PrintInvoice");
        }
        //        /// <summary>
        //        /// 打印发票
        //        /// </summary>
        //        /// <param name="sCashNO"></param>
        //        /// <returns></returns>
        //        [WebMethod]
        //        public DataSet PrintInvoices(string sCashNO)
        //        {
        //            string sSql = "SELECT [OrderType],[OrderNO],[CashNO],[CustomerName],[CustomerPhone],[Intro],[SuitePrice],[CashMemory],[BusinessEmployee],[CashEmployee],[CashDate],[CashPretext],[Size],[Number],[Unit],[CashMoney],[SuiteTypeName],[CashWay] 
        //FROM (SELECT DISTINCT SUBSTRING(dbo.Cash.OrderNO, 0, LEN(dbo.Cash.OrderNO) - 2) AS CustomerNO, dbo.OrderType.OrderTypeValue AS OrderType, dbo.Cash.OrderNO,  dbo.CashSub.CashNO, dbo.Cash.CustomerName, dbo.Cash.CustomerPhone, dbo.Cash.IntroCardNO + '/' + dbo.Cash.IntroCustomerName AS Intro, dbo.Cash.SuitePrice,  dbo.CashSub.CashMemory, dbo.CashSub.BusinessEmployeeNO AS BusinessEmployee, Employee_1.EmployeeName AS CashEmployee, dbo.CashSub.CashDate, 
        //                      CashPretext_1.CashPretextName AS CashPretext, dbo.CashDetail.Size, dbo.CashDetail.Number, dbo.CashDetail.Unit, SUM(CONVERT(int, dbo.CashDetail.CashNumber)) 
        //                      AS CashMoney, dbo.Cash.SuiteTypeName, dbo.CashDetail.CashWay
        //FROM        dbo.CashPretext  AS CashPretext_1
        //                    INNER JOIN   dbo.Cash 
        //                    INNER JOIN  dbo.CashSub ON dbo.Cash.OrderNO = dbo.CashSub.OrderNO 
        //                    INNER JOIN  dbo.CashDetail ON dbo.CashSub.CashNO = dbo.CashDetail.CashNO 
        //                    INNER JOIN  dbo.Employee AS Employee_1 ON dbo.CashSub.CashEmployeeNO = Employee_1.EmployeeNO ON CashPretext_1.CashPretextNO = dbo.CashDetail.CashPretext 
        //                    INNER JOIN   dbo.OrderType ON dbo.Cash.OrderType = dbo.OrderType.OrderType GROUP BY dbo.Cash.OrderNO, dbo.Cash.CustomerName, dbo.Cash.CustomerPhone, dbo.Cash.SuitePrice, dbo.CashSub.CashMemory, dbo.Cash.IntroCardNO, dbo.Cash.IntroCustomerName, dbo.CashSub.BusinessEmployeeNO, Employee_1.EmployeeName, dbo.CashSub.CashDate, CashPretext_1.CashPretextName,  dbo.CashDetail.Size, dbo.CashDetail.Unit, dbo.CashDetail.Number, dbo.OrderType.OrderTypeValue, dbo.CashSub.CashNO, dbo.Cash.SuiteTypeName,  dbo.CashDetail.CashWay) AS A
        //                      WHERE [CashNO]='LZDB250029005' ";
        //            return ExecuteDataSet(sSql, "PrintInvoice");
        //        }

        /// <summary>
        /// 删除收银
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public bool DeleteCash(string[] sCashNO)
        {
            string sSql = "";
            for (int i = 0; i < sCashNO.Length; i++)
            {
                sSql += "Update CashSub set CashState='删除' where CashNO='" + sCashNO[i] + "' ";
            }
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 订单收银退款->发票作废
        /// zjj2012-02-20修改
        /// </summary>
        /// <param name="sCashNO"></param>
        /// <returns></returns>
        [WebMethod]
        public bool Cash_Refundingmoney(string sCashNO, string sCashNumber, string sEmployee, string sDate, string sql)
        {
            string sSql = "";
            sSql += sql;
            sSql += "Update CashSub set CashMemory='作废:'+'" + sCashNumber + "'+'[" + sEmployee + "/" + sDate + "]'+CashMemory,CashState='作废' where CashNO='" + sCashNO + "' ";
            sSql += "Update CashDetail set CashNumber='0' where CashNO='" + sCashNO + "' ";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 收银查询
        /// </summary>
        /// <param name="sSql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchCash(string sql)
        {
            string sSql = "select * from Cash where " + sql + "";
            return ExecuteDataSet(sSql, "SearchCash");
        }

        /// <summary>
        /// 收银查询
        /// </summary>
        /// <param name="sSql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchCashSub(string sql)
        {
            string sSql = "select * from CashSub where " + sql + "";
            return ExecuteDataSet(sSql, "SearchCashSub");
        }

        /// <summary>
        /// 收银明细查询
        /// </summary>
        /// <param name="sSql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchCashDetail(string sql)
        {
            string sSql = "select CashDetail.[ID],CashDetail.CashNO, CashDetail.CashIndex, CashPretextNO=CashDetail.CashPretext,CashPretext=Config.ConfigValue, CashDetail.[Size], CashDetail.Number, CashDetail.Unit, CashDetail.CashWay, CashDetail.CashNumber from CashDetail inner join Config on CashDetail.CashPretext=Config.ConfigNO where " + sql + "";
            return ExecuteDataSet(sSql, "SearchCashDetail");
        }

        /// <summary>
        /// 根据订单号查询收银顾客的基本资料
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchCashInformation(string sOrderNO)
        {
            string sSql = "select OrderType,OrderNO, CustomerName, CustomerPhone, IntroType, IntroCardNO, IntroCustomerName, SuitePrice,Integral from Cash where OrderNO='" + sOrderNO + "' ";
            return ExecuteDataSet(sSql, "SearchCashInformation");
        }

        /// <summary>
        /// 根据客户号得到订单号
        /// </summary>
        /// <param name="sSql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet GetAllOrderNOByCustomerNO(string sCustomerNO)
        {
            DataSet myds = new DataSet();
            try
            {
                OpenConn();
                string Sql = "select distinct OrderNO from OrderCash where OrderNO like '" + sCustomerNO + "%' order by OrderNO desc";
                SqlDataAdapter myda = new SqlDataAdapter(Sql, Conn);
                myda.Fill(myds, "OrderCashDetail");
                CloseConn();
                return myds;
            }
            catch
            {
                return myds;
            }
        }

        /// <summary>
        /// 根据订单号得到收银编号
        /// </summary>
        /// <param name="sSql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet GetAllCashNOByOrderNO(string sOrderNO)
        {
            DataSet myds = new DataSet();
            try
            {
                OpenConn();
                string Sql = "select distinct CashNO from OrderCash where OrderNO like '" + sOrderNO + "%' order by CashNO desc";
                SqlDataAdapter myda = new SqlDataAdapter(Sql, Conn);
                myda.Fill(myds, "OrderCash");
                CloseConn();
                return myds;
            }
            catch
            {
                return myds;
            }
        }

        /// <summary>
        /// 查询收银部门
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchCashDepartment()
        {
            string sSql = "select distinct CashDepartmentNO,CashDepartmentName from dbo.VIEW_Cash";
            return ExecuteDataSet(sSql, "CashDepartment");
        }
        /// <summary>

        /// <summary>
        /// 收银查帐
        /// updater njr
        /// updatetime 2012-03-16
        /// </summary>
        /// <param name="sSql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchCashAndDetailTwo(string sql)
        {
            string sSql = @"select distinct 
	                            OrderType as 订单类别,OrderNO as 订单编号,CustomerName as 顾客编号,
	                            CustomerPhone as 顾客电话, IntroCustomerName as 介绍人, SuiteTypeName 套系类别, 
	                            SuitePrice as 套系价格, CashNO as 收银编号,  FPH as 发票号,  BusinessDepartment as 收款部门,
	                            CashMemory as 收银备注 ,Size as 规格, Number as 数量, Unit as 单位, CashPretext as 收款事由, 
	                            sum(CashNumber) as 收款金额,CashEmployeeName as 收款人员,CashDate as 收款日期, 
	                            CreateEmployeeName 创建人员, CreateDate as 创建日期,CashState  as 收银状态
                            from dbo.VIEW_Cash 
                            where CashState<>'删除'"
                + sql +
                         @" Group by
                                OrderType,OrderNO, CustomerName, CustomerPhone, IntroCardNO, 
                                IntroCustomerName, SuiteTypeName, SuitePrice, CashNO, FPH, 
                                BusinessDepartment, BusinessEmployeeName, BusinessPoint,
                                CashMemory, Size, Number, Unit, CashPretext, CashEmployeeName, 
                                CashDate, CreateEmployeeName, CreateDate, IsPrint, CashState
                                Order by CreateDate";
            return ExecuteDataSet(sSql, "SearchCash");
        }

        /// <summary>
        /// 收银查帐
        /// </summary>
        /// <param name="sSql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchCashAndDetail(string sql)
        {
            string sSql = "select distinct OrderType,OrderNO, CustomerName, UseName, CustomerPhone, IntroCardNO, IntroCustomerName, SuiteTypeName, SuitePrice, CashNO, FPH, dbo.Fn_GetDepartmentName(BusinessDepartment) 'BusinessDepartment', dbo.Fn_GetEmployeeName(BusinessEmployeeName) 'BusinessEmployeeName', BusinessPoint, CashMemory, Size, Number, Unit, CashPretextName, CashWay, CashNumber=sum(CashNumber), CashEmployeeName, CashDepartmentNO, CashDate, CreateEmployeeName, CreateDate, IsPrint, CashState,CashPretextNO,fpdm,fphm,ThirdNO,dxfphm,CashPretextTypeName,IsInvoice  from dbo.VIEW_Cash where CashState<>'删除' " + sql + " Group by OrderType,OrderNO, CustomerName, UseName, CustomerPhone, IntroCardNO, IntroCustomerName, SuiteTypeName, SuitePrice, CashNO, FPH, BusinessDepartment, BusinessEmployeeName, BusinessPoint, CashMemory, Size, Number, Unit, CashPretextName, CashWay, CashEmployeeName, CashDepartmentNO, CashDate, CreateEmployeeName, CreateDate, IsPrint, CashState,CashPretextNO,fpdm,fphm,ThirdNO,dxfphm,CashPretextTypeName,IsInvoice  Order by CreateDate";
            return ExecuteDataSet(sSql, "SearchCash");
        }

        public DataSet SearchCashAndDetail_1(string sql)
        {

            string sqlString = @"select distinct OrderType,OrderNO, CustomerName, UseName, CustomerPhone, IntroCardNO, IntroCustomerName, SuiteTypeName, SuitePrice, 
CashNO, FPH, dbo.Fn_GetDepartmentName(BusinessDepartment) 'BusinessDepartment', dbo.Fn_GetEmployeeName(BusinessEmployeeName) 'BusinessEmployeeName', 
BusinessPoint, CashMemory, Size, Number, Unit, CashPretextName, CashWay, CashNumber=sum(CashNumber), CashEmployeeName, CashDepartmentNO, CashDate, 
CreateEmployeeName, CreateDate, IsPrint, CashState,CashPretextNO,fpdm,fphm,ThirdNO,dxfphm,CashPretextTypeName,IsInvoice,
/*内景摄影师*/
(select top 1 e.EmployeeName from OrderShoot s left join Employee e on s.ShootEmployeeNO=e.EmployeeNO where s.OrderNO=v.OrderNO and s.ShootType='内景' and s.IsDelete=0
and not exists (select 1 from OrderShoot s1 where s1.OrderNO=s.OrderNO and s1.ShootType=s.ShootType and s1.PreShootDate>s.PreShootDate)) ShootEmployeeN,
/*外景摄影师*/
(select top 1 e.EmployeeName from OrderShoot s left join Employee e on s.ShootEmployeeNO=e.EmployeeNO where s.OrderNO=v.OrderNO and s.ShootType='外景' and s.IsDelete=0
and not exists (select 1 from OrderShoot s1 where s1.OrderNO=s.OrderNO and s1.ShootType=s.ShootType and s1.PreShootDate>s.PreShootDate)) ShootEmployeeW, 
/*内景化妆师*/
(select top 1 e.EmployeeName from OrderShoot s left join Employee e on s.DressEmployeeNO=e.EmployeeNO where s.OrderNO=v.OrderNO and s.ShootType='内景' and s.IsDelete=0
and not exists (select 1 from OrderShoot s1 where s1.OrderNO=s.OrderNO and s1.ShootType=s.ShootType and s1.PreShootDate>s.PreShootDate)) DressEmployeeN,
/*外景化妆师*/
(select top 1 e.EmployeeName from OrderShoot s left join Employee e on s.DressEmployeeNO=e.EmployeeNO where s.OrderNO=v.OrderNO and s.ShootType='外景' and s.IsDelete=0
and not exists (select 1 from OrderShoot s1 where s1.OrderNO=s.OrderNO and s1.ShootType=s.ShootType and s1.PreShootDate>s.PreShootDate)) DressEmployeeW,
/*看样师*/
(select e.EmployeeName from Orders o left join Employee e on o.ChooseEmployeeNO=e.EmployeeNO where OrderNO=v.OrderNO) ChooseEmployee,
isnull((select sum(CashNumber) from CashSub cs join CashDetail cd on cs.CashNO=cd.CashNO where cs.OrderNO=v.OrderNO and datediff(dd,CashDate,'2016-5-1')>0  and CashPretext in ('001','002','003')),0) [PreMayFirst],
isnull((select sum(CashNumber) from CashSub cs join CashDetail cd on cs.CashNO=cd.CashNO where cs.OrderNO=v.OrderNO and datediff(dd,CashDate,'2016-5-1')<=0 and CashPretext in ('001','002','003')),0) [AfterMayFirst]
from dbo.VIEW_Cash v
where CashState<>'删除' " + sql + @" 
Group by OrderType,OrderNO, CustomerName, UseName, CustomerPhone, IntroCardNO, IntroCustomerName, SuiteTypeName, SuitePrice, CashNO, FPH, BusinessDepartment, 
BusinessEmployeeName, BusinessPoint, CashMemory, Size, Number, Unit, CashPretextName, CashWay, CashEmployeeName, CashDepartmentNO, CashDate, CreateEmployeeName, 
CreateDate, IsPrint, CashState,CashPretextNO,fpdm,fphm,ThirdNO,dxfphm,CashPretextTypeName,IsInvoice  
Order by CreateDate";
            return ExecuteDataSet(sqlString, "SearchCash");
        }
        /// <summary>
        /// add by Caijinsong 2016-5-4
        /// 标记开票
        /// </summary>
        /// <param name="cashNo"></param>
        /// <returns></returns>
        public bool UpdateCashSubInvoice(string cashNo, string taxFPH)
        {
            string sqlString = "update CashSub set IsInvoice=1,fphm='" + taxFPH + "' where CashNO='" + cashNo + "'";
            return ExecuteSql(sqlString);
        }
        /// <summary>
        /// Add by Caijinsong 2015-6-13
        /// </summary>
        /// <param name="orderNO"></param>
        /// <returns></returns>
        public DataSet OrdersPayState(string orderNO)
        {
            string sqlString = "select PayableSuite,ActualSuite from OrdersPayState where OrderNO='" + orderNO + "'";
            return ExecuteDataSet(sqlString, "OrdersPayState");

        }
        ///// <summary>
        ///// 收银查帐
        ///// </summary>
        ///// <param name="sSql"></param>
        ///// <returns></returns>
        //[WebMethod]
        //public DataSet SearchCashAndDetailes(string sql)
        //{
        //    string sSql = "select distinct OrderType,OrderNO, CustomerName, CustomerPhone, IntroCardNO, IntroCustomerName, SuiteTypeName, SuitePrice, CashNO, FPH, BusinessDepartment, BusinessEmployeeName, BusinessPoint, CashMemory, Size, Number, Unit, CashPretextName, CashNumber=sum(CashNumber), CashEmployeeName, CashDate, CreateEmployeeName, CreateDate, IsPrint, CashState,CashPretextNO from dbo.VIEW_Cashes where CashState<>'删除' " + sql + " Group by OrderType,OrderNO, CustomerName, CustomerPhone, IntroCardNO, IntroCustomerName, SuiteTypeName, SuitePrice, CashNO, FPH, BusinessDepartment, BusinessEmployeeName, BusinessPoint, CashMemory, Size, Number, Unit, CashPretextName, CashEmployeeName, CashDate, CreateEmployeeName, CreateDate, IsPrint, CashState,CashPretextNO Order by CreateDate";
        //    return ExecuteDataSet(sSql, "SearchCash");
        //}
        /// <summary>
        /// 根据收银信息匹配订单号
        /// </summary>
        /// <param name="sql"></param>
        [WebMethod]
        public DataSet SearchCashAndOrderNO(string sql)
        {
            string sSql = "select distinct OrderNO, CustomerName, CustomerPhone,FPH,CashNumber=sum(CashNumber),CashDate from dbo.VIEW_Cash where CashState<>'删除'" + sql + " Group by OrderNO, CustomerName, CustomerPhone,FPH, CashDate,CashState";
            return ExecuteDataSet(sSql, "SearchCash");

        }
        ///// <summary>
        ///// 根据收银信息匹配订单号
        ///// </summary>
        ///// <param name="sql"></param>
        //[WebMethod]
        //public DataSet SearchCashAndOrderNOes(string sql)
        //{
        //    string sSql = "select distinct OrderNO, CustomerName, CustomerPhone,FPH,CashNumber=sum(CashNumber),CashDate from dbo.VIEW_Cashes where CashState<>'删除'" + sql + " Group by OrderNO, CustomerName, CustomerPhone,FPH, CashDate,CashState";
        //    return ExecuteDataSet(sSql, "SearchCash");

        //}
        /// <summary>
        /// 收款事由分类统计
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet CashCount_Pretext(string sql)
        {
            string sSql = "select distinct CashPretextName, CashNumber=sum(CashNumber) from dbo.VIEW_Cash where CashState<>'删除' " + sql + " Group by CashPretextName Order by CashPretextName";
            return ExecuteDataSet(sSql, "CashCount_Pretext");
        }
        ///// <summary>
        ///// 收款事由分类统计
        ///// </summary>
        ///// <param name="sql"></param>
        ///// <returns></returns>
        //[WebMethod]
        //public DataSet CashCount_Pretextes(string sql)
        //{
        //    string sSql = "select distinct CashPretextName, CashNumber=sum(CashNumber) from dbo.VIEW_Cashes where CashState<>'删除' " + sql + " Group by CashPretextName Order by CashPretextName";
        //    return ExecuteDataSet(sSql, "CashCount_Pretext");
        //}

        /// <summary>
        /// 银行卡刷卡统计
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet CashCount_BankCard(string sql)
        {
            string sSql = "select distinct dbo.Fn_GetEmployeeName(BusinessEmployeeName) as 'BusinessEmployeeName', BusinessEmployeeCashNumber=sum(CashNumber) from dbo.VIEW_Cash where CashState<>'删除' and CashWay='刷卡' " + sql + " Group by BusinessEmployeeName Order by BusinessEmployeeName";
            return ExecuteDataSet(sSql, "CashCount_BankCard");
        }

        /// <summary>
        /// 业绩人员统计
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet CashCount_BusinessEmployee(string sql)
        {
            string sSql = "select distinct dbo.Fn_GetEmployeeName(BusinessEmployeeName) as 'BusinessEmployeeName1', BusinessEmployeeCashNumber1=sum(CashNumber) from dbo.VIEW_Cash where CashState<>'删除' " + sql + " Group by BusinessEmployeeName Order by BusinessEmployeeName1";
            return ExecuteDataSet(sSql, "CashCount_BusinessEmployee");
        }

        ///// <summary>
        ///// 收银报表
        ///// </summary>
        ///// <param name="sSql"></param>
        ///// <returns></returns>
        //[WebMethod]
        //public DataSet CashOutput(string sql)
        //{
        //    string sSql = "SELECT DISTINCT dbo.OrderCash.OrderNO, dbo.OrderCash.CashNO, dbo.OrderCash.CustomerName, dbo.OrderCash.FPH, dbo.Config.ConfigValue AS CashPretext, dbo.Department.DepartmentName AS BusinessDepartment, dbo.Employee.EmployeeName AS BusinessEmployee, dbo.OrderCash.BusinessPoint, dbo.OrderCash.CashMemory, Employee_1.EmployeeName AS CashEmployee, dbo.OrderCash.CashDate, dbo.OrderCashDetail.CashWay,sum(dbo.OrderCashDetail.CashNumber) as CashNumber FROM dbo.OrderCash INNER JOIN dbo.OrderCashDetail ON  dbo.OrderCash.CashNO = dbo.OrderCashDetail.CashNO LEFT OUTER JOIN dbo.Department ON  dbo.OrderCash.BusinessDepartmentNO = dbo.Department.DepartmentNO LEFT OUTER JOIN dbo.Employee ON  dbo.OrderCash.BusinessEmployeeNO = dbo.Employee.EmployeeNO INNER JOIN dbo.Employee Employee_1 ON  dbo.OrderCash.CashEmployeeNO = Employee_1.EmployeeNO INNER JOIN dbo.Config ON dbo.OrderCash.CashPretext = dbo.Config.ConfigNO WHERE 1=1 " + sql + " GROUP BY dbo.OrderCash.OrderNO, dbo.OrderCash.CashNO,  dbo.OrderCash.CustomerName, dbo.OrderCash.FPH, dbo.Config.ConfigValue,  dbo.Department.DepartmentName, dbo.Employee.EmployeeName,  dbo.OrderCash.BusinessPoint, dbo.OrderCash.CashMemory,  Employee_1.EmployeeName, dbo.OrderCash.CashDate, dbo.OrderCashDetail.CashWay ";
        //    return ExecuteDataSet(sSql, "CashOutput");
        //}
        /// <summary>
        /// 收银报表
        /// </summary>
        /// <param name="sSql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet CashOutputes(string sql)
        {
            string sSql = "SELECT DISTINCT dbo.OrderCash.OrderNO, dbo.OrderCash.CashNO, dbo.OrderCash.CustomerName, dbo.OrderCash.FPH, dbo.Config.ConfigValue AS CashPretext, dbo.Department.DepartmentName AS BusinessDepartment, dbo.Employee.EmployeeName AS BusinessEmployee, dbo.OrderCash.BusinessPoint, dbo.OrderCash.CashMemory, Employee_1.EmployeeName AS CashEmployee, dbo.OrderCash.CashDate, dbo.OrderCashDetail.CashWay,sum(dbo.OrderCashDetail.CashNumber) as CashNumber FROM dbo.OrderCash INNER JOIN dbo.OrderCashDetail ON  dbo.OrderCash.CashNO = dbo.OrderCashDetail.CashNO LEFT OUTER JOIN dbo.Department ON  dbo.OrderCash.BusinessDepartmentNO = dbo.Department.DepartmentNO LEFT OUTER JOIN dbo.Employee ON  dbo.OrderCash.BusinessEmployeeNO = dbo.Employee.EmployeeNO INNER JOIN dbo.Employee Employee_1 ON  dbo.OrderCash.CashEmployeeNO = Employee_1.EmployeeNO INNER JOIN dbo.Config ON dbo.OrderCash.CashPretext = dbo.Config.ConfigNO WHERE 1=1 " + sql + " GROUP BY dbo.OrderCash.OrderNO, dbo.OrderCash.CashNO,  dbo.OrderCash.CustomerName, dbo.OrderCash.FPH, dbo.Config.ConfigValue,  dbo.Department.DepartmentName, dbo.Employee.EmployeeName,  dbo.OrderCash.BusinessPoint, dbo.OrderCash.CashMemory,  Employee_1.EmployeeName, dbo.OrderCash.CashDate, dbo.OrderCashDetail.CashWay ";
            return ExecuteDataSet(sSql, "CashOutput");
        }

        /// <summary>
        /// 返回收银总金额
        /// </summary>
        /// <param name="sql">统计条件</param>
        /// <returns></returns>
        [WebMethod]
        public decimal GetCashNumberSum1(string sql)
        {
            try
            {
                string sSql = "select Sum(CashNumber) CashNumber from View_Cash where 1=1 " + sql;
                return Convert.ToDecimal(ExecuteSqlToString(sSql));
            }
            catch
            {
                return 0.00M;
            }
        }

        /// <summary>
        /// 发票设置
        /// </summary>
        /// <param name="sInvoiceTitle"></param>
        /// <param name="sInvoice"></param>
        /// <param name="sCreater"></param>
        /// <param name="sCreateDate"></param>
        /// <returns></returns>
        [WebMethod]
        public bool SaveInvoice(string sInvoiceTitle, string sInvoice, string sCreater, string sCreateDate)
        {
            string sSql = "Insert into Invoice (InvoiceTitle, Invoice, IsUse, Creater, CreateDate) values ('" + sInvoiceTitle + "','" + sInvoice + "',0,'" + sCreater + "','" + sCreateDate + "')";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 地税发票设置
        /// </summary>
        /// <param name="sInvoiceTitle"></param>
        /// <param name="sInvoice"></param>
        /// <param name="sCreater"></param>
        /// <param name="sCreateDate"></param>
        /// <returns></returns>
        [WebMethod]
        public bool SaveInvoiceTax(string sInvoiceTitle, string sInvoice, string sCreater, string sCreateDate)
        {
            string sSql = "Insert into InvoiceTax (InvoiceTitle, Invoice, IsUse, Creater, CreateDate) values ('" + sInvoiceTitle + "','" + sInvoice + "',0,'" + sCreater + "','" + sCreateDate + "')";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 删除发票
        /// </summary>
        /// <param name="sInvoiceTitle"></param>
        /// <returns></returns>
        [WebMethod]
        public bool DeleteInvoice(string sInvoiceTitle)
        {
            string sSql = "Delete Invoice where InvoiceTitle='" + sInvoiceTitle + "'";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 删除地税发票
        /// </summary>
        /// <param name="sInvoiceTitle"></param>
        /// <returns></returns>
        [WebMethod]
        public bool DeleteInvoiceTax(string sInvoiceTitle)
        {
            string sSql = "Delete InvoiceTax where InvoiceTitle='" + sInvoiceTitle + "'";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 查询发票
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchInvoice(string sql)
        {
            string sSql = "Select distinct InvoiceTitle,InvoiceNumber=Count(*),CreateEmployeeName, CreateDate from dbo.VIEW_Invoice where 1=1 " + sql + " Group by InvoiceTitle,CreateEmployeeName, CreateDate";
            return ExecuteDataSet(sSql, "SearchInvoice");
        }

        /// <summary>
        /// 查询地税发票
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchInvoiceTax(string sql)
        {
            string sSql = "Select distinct InvoiceTitle,InvoiceNumber=Count(*),CreateEmployeeName, CreateDate from dbo.VIEW_InvoiceTax where 1=1 " + sql + " Group by InvoiceTitle,CreateEmployeeName, CreateDate";
            return ExecuteDataSet(sSql, "SearchInvoiceTax");
        }

        /// <summary>
        /// 使用发票
        /// </summary>
        /// <param name="sInvoice"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UseInvoice(string sInvoice)
        {
            string sSql = "Update Invoice set IsUse=1 where Invoice='" + sInvoice + "' ";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 使用地税发票
        /// </summary>
        /// <param name="sInvoice"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UseInvoiceTax(string sInvoice)
        {
            string sSql = "Update InvoiceTax set IsUse=1 where Invoice='" + sInvoice + "' ";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 得到未使用的第一个发票号
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public string GetFirstInvoice(string sql)
        {
            string sSql = "select top 1 Invoice From dbo.VIEW_Invoice where IsUse=0 " + sql + " order by Invoice";
            return ExecuteSqlToString(sSql);
        }

        /// <summary>
        /// 得到未使用的第一个地税发票号
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public string GetFirstInvoiceTax(string sql)
        {
            string sSql = "select top 1 Invoice From dbo.VIEW_InvoiceTax where IsUse=0 " + sql + " order by Invoice";
            return ExecuteSqlToString(sSql);
        }

        /// <summary>
        /// 保存订单收银备注
        /// </summary>
        /// <param name="sOrderCashMemory"></param>
        /// <returns></returns>
        [WebMethod]
        public bool SaveOrderCashMemory(string sOrderCashMemory)
        {
            string sSql = "Insert into OrderCashMemory (OrderCashMemory) values ('" + sOrderCashMemory + "')";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 编辑订单收银备注
        /// </summary>
        /// <param name="sID"></param>
        /// <param name="sOrderCashMemory"></param>
        /// <returns></returns>
        [WebMethod]
        public bool EditOrderCashMemory(string sID, string sOrderCashMemory)
        {
            string sSql = "Update OrderCashMemory set OrderCashMemory='" + sOrderCashMemory + "' where ID='" + sID + "'";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 删除订单收银备注
        /// </summary>
        /// <param name="sID"></param>
        /// <returns></returns>
        [WebMethod]
        public bool DeleteOrderCashMemory(string sID)
        {
            string sSql = "Delete OrderCashMemory where ID='" + sID + "'";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 查询订单收银备注
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchOrderCashMemory()
        {
            string sSql = "Select ID,OrderCashMemory from OrderCashMemory";
            return ExecuteDataSet(sSql, "OrderCashMemory");
        }

        /// <summary>
        /// 增加订单类别
        /// </summary>
        /// <param name="sOrderType"></param>
        /// <param name="sOrderTypeValue"></param>
        /// <returns></returns>
        [WebMethod]
        public bool SaveOrderType(string sOrderType, string sOrderTypeValue)
        {
            string sSql = "Insert into OrderType (OrderType,OrderTypeValue) Values ('" + sOrderType + "','" + sOrderTypeValue + "')";
            return ExecuteSql(sSql);
        }
        /// <summary>
        /// 更新订单类别
        /// </summary>
        /// <param name="sOrderType"></param>
        /// <param name="sOrderTypeValue"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateOrderType(string sOrderType, string sOrderTypeValue)
        {
            string sSql = "Update OrderType set OrderTypeValue='" + sOrderTypeValue + "' where OrderType='" + sOrderType + "'";
            return ExecuteSql(sSql);
        }
        /// <summary>
        /// 删除订单类别
        /// </summary>
        /// <param name="sOrderType"></param>
        /// <returns></returns>
        [WebMethod]
        public bool DeleteOrderType(string[] sOrderType)
        {
            string sSql = "";
            for (int i = 0; i < sOrderType.Length; i++)
            {
                sSql += "Delete OrderType where OrderType='" + sOrderType[i] + "' ";
            }
            return ExecuteSql(sSql);
        }
        /// <summary>
        /// 订单类别
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchOrderType()
        {
            string sSql = "select OrderType, OrderTypeValue FROM OrderType";
            return ExecuteDataSet(sSql, "SearchOrderType");
        }

        /// <summary>
        /// 收银轧账
        /// </summary>
        /// <param name="sCashCloseDepartment"></param>
        /// <param name="sCashCloseEmployee"></param>
        /// <returns></returns>
        [WebMethod]
        public bool CashClose(string sCashCloseDepartment, string sCashCloseEmployee)
        {
            string sSql = "Insert into dbo.CashClose (CashCloseDepartment,CashCloseEmployee,CashCloseDateTime) Values ('" + sCashCloseDepartment + "','" + sCashCloseEmployee + "',GetDate())";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 收银轧账查询
        /// </summary>
        /// <param name="sCashCloseDepartment"></param>
        /// <param name="sCashCloseDateTime"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchCashClose(string sCashCloseDepartment, string sCashCloseDateTime)
        {
            string sSql = "Select * from CashClose where CashCloseDepartment='" + sCashCloseDepartment + "' and datediff(dd,CashCloseDateTime,'" + sCashCloseDateTime + "')=0 ";
            return ExecuteDataSet(sSql, "CashClose");
        }



        /// <summary>
        /// 重新定义收款事由,包括已使用过的
        /// </summary>
        /// <param name="sConfigNO">原收款事由编号</param>
        /// <param name="sNewConfigNO">新收款事由编号</param>
        /// <param name="sConfigType">新收款事由类别</param>
        /// <param name="sConfigValue">新收款事由名称</param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateCashPretext(string sConfigNO, string sNewConfigNO, string sConfigType, string sConfigValue)
        {
            string sSql = "Update Config set ConfigType='" + sConfigType + "',ConfigNO='" + sNewConfigNO + "',ConfigValue='" + sConfigValue + "' where ConfigNO='" + sConfigNO + "' ";
            sSql += "Update CashDetail set CashPretext='" + sNewConfigNO + "' where CashPretext='" + sConfigNO + "' ";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 获取要冲红的收银信息
        /// </summary>
        /// <param name="strCashNO">收银编号</param>
        /// <returns></returns>
        public DataSet SearchCashForCH(string strCashNO)
        {
            string strSql = @"SELECT     dbo.CashSub.OrderNO, dbo.CashSub.CashNO, dbo.CashSub.FPH, dbo.CashSub.BusinessDepartment, dbo.CashSub.BusinessEmployeeNO, 
                      dbo.CashSub.CashMemory, dbo.CashDetail.CashIndex, dbo.CashDetail.CashPretext, dbo.CashDetail.Size, dbo.CashDetail.Number, 
                      dbo.CashDetail.Unit, dbo.CashDetail.CashWay, dbo.CashDetail.CashNumber,dbo.CashDetail.ThirdNO
FROM         dbo.CashSub INNER JOIN
                      dbo.CashDetail ON dbo.CashSub.CashNO = dbo.CashDetail.CashNO
            where dbo.CashSub.CashNO='" + strCashNO + "'";
            return ExecuteDataSet(strSql, "CashDetailCH");
        }

        /// <summary>
        /// 本地冲红收银保存
        /// </summary>
        /// <param name="strOrderNO"></param>
        /// <param name="strNewCashNO"></param>
        /// <param name="strNewFPH"></param>
        /// <param name="strBusinessDepartment"></param>
        /// <param name="strBusinessEmployee"></param>
        /// <param name="p"></param>
        /// <param name="strCashMemory"></param>
        /// <param name="p_8"></param>
        /// <param name="strDateTime"></param>
        /// <param name="p_10"></param>
        /// <param name="strDateTime_11"></param>
        /// <param name="sCashIndex"></param>
        /// <param name="sCashPretextNO"></param>
        /// <param name="sSize"></param>
        /// <param name="sNumber"></param>
        /// <param name="sUnit"></param>
        /// <param name="sCashWay"></param>
        /// <param name="sCashNumber"></param>
        /// <param name="strIsPrint"></param>
        /// <param name="strCashState"></param>
        /// <returns></returns>
        public bool SaveCashCH(string strOrderNO, string strOldCashNO, string strCashNO, string strFPH, string strBusinessDepartment, string strBusinessEmployeeNO, string strBusinessPoint, string strCashMemory, string strCashEmployeeNO, string strCashDate, string strCreate, string strCreateDate, string[] sCashIndex, string[] sCashPretextNO, string[] sSize, string[] sNumber, string[] sUnit, string[] sCashWay, string[] sCashNumber, string[] sThirdNO, string strIsPrint, string strCashState, string dsfph)
        {
            string strSql = @"Update CashSub set CashState='" + strCashState + "' where CashNO='" + strOldCashNO + "' and OrderNO='" + strOrderNO + "'\r\n";
            strSql += @"Insert into CashSub (OrderNO, CashNO, FPH, BusinessDepartment, BusinessEmployeeNO, BusinessPoint, CashMemory, CashEmployeeNO, CashDate, [Create], CreateDate, IsPrint, CashState,fphm) Values ('" + strOrderNO + "','" + strCashNO + "','" + strFPH + "','" + strBusinessDepartment + "','" + strBusinessEmployeeNO + "','" + strBusinessPoint + "','" + strCashMemory + "','" + strCashEmployeeNO + "','" + strCashDate + "','" + strCreate + "','" + strCreateDate + "','" + strIsPrint + "','" + strCashState + "','" + dsfph + "') \r\n";
            for (int i = 0; i < sCashIndex.Length; i++)
            {
                strSql += "Insert into CashDetail (CashNO, CashIndex, CashPretext, [Size], Number, Unit, CashWay, CashNumber,ThirdNO) Values ('" + strCashNO + "','" + sCashIndex[i] + "','" + sCashPretextNO[i] + "','" + sSize[i] + "','" + sNumber[i] + "','" + sUnit[i] + "','" + sCashWay[i] + "','" + sCashNumber[i] + "','" + sThirdNO[i] + "') \r\n";
            }

            return ExecuteSql(strSql);
        }

        ///// <summary>
        ///// 保存税务登记内容
        ///// </summary>
        ///// <param name="ServerIP">服务器地址</param>
        ///// <param name="ServerPort">服务器端口</param>
        ///// <param name="swjgmc">主管税务机关名称</param>
        ///// <param name="swjgdm">主管税务机关代码</param>
        ///// <param name="nsrmc">纳税人名称</param>
        ///// <param name="nsrsbh">纳税人识别号</param>
        ///// <param name="sdhbz">双订户标志</param>
        ///// <param name="fpdm">发票代码</param>
        ///// <param name="fpzlbm">发票种类编码</param>
        ///// <param name="nsrbm">纳税人编码</param>
        ///// <param name="hymc">行业名称</param>
        ///// <param name="hybm">行业编码</param>
        ///// <param name="pmmc">品目名称</param>
        ///// <param name="pmbm">品目编码</param>
        ///// <param name="zmdm">子目代码</param>
        ///// <returns></returns>
        //[WebMethod]
        //public bool SaveTaxRegistrationContent(string ServerIP, string ServerPort, string swjgmc, string swjgdm, string nsrsbh, string nsrmc, string sdhbz, string fpdm, string fpzlbm, string nsrbm, string hymc, string hybm, string[] pmmc, string[] pmbm, string[] zmdm)
        //{
        //    //先删除
        //    string sSql = "delete TaxRegistrationContentSub where nsrbm='" + nsrbm + "' ";
        //    sSql += "delete TaxServer ";
        //    sSql += "delete TaxRegistrationContent where nsrbm='" + nsrbm + "' ";
        //    //插入信息
        //    sSql += "insert into TaxServer (ServerIP, ServerPort) values ('" + ServerIP + "','" + ServerPort + "') ";
        //    sSql += "insert into TaxRegistrationContent (swjgmc, swjgdm, nsrsbh, nsrmc, sdhbz, fpdm, fpzlbm, nsrbm, hymc, hybm) values ('" + swjgmc + "', '" + swjgdm + "', '" + nsrsbh + "', '" + nsrmc + "', '" + sdhbz + "' ,'" + fpdm + "', '" + fpzlbm + "', '" + nsrbm + "', '" + hymc + "', '" + hybm + "') ";
        //    for (int i = 0; i < pmmc.Length; i++)
        //    {
        //        sSql += "insert into TaxRegistrationContentSub (nsrbm, pmmc, pmbm, zmdm) values ('" + nsrbm + "', '" + pmmc[i] + "', '" + pmbm[i] + "', '" + zmdm[i] + "') ";
        //    }
        //    return ExecuteSql(sSql);
        //}

        /// <summary>
        /// 保存纳税人编码+地税服务器信息
        /// </summary>
        /// <param name="nsrbm">纳税人编码</param>
        /// <param name="ServerIP">服务器地址</param>
        /// <param name="ServerPort">服务器端口</param>
        /// <returns></returns>
        public bool SaveTaxServer(string nsrbm, string ServerIP, string ServerPort)
        {
            string sSql = "if not exists (select 1 from TaxServer where ServerIP='" + ServerIP + "') \r\n";
            sSql += "begin \r\n";
            sSql += "insert into TaxServer (nsrbm, ServerIP, ServerPort) values ('" + nsrbm + "','" + ServerIP + "','" + ServerPort + "') \r\n";
            sSql += "end \r\n";
            sSql += "else \r\n";
            sSql += "begin \r\n";
            sSql += "update TaxServer set ServerIP='" + ServerIP + "',ServerPort='" + ServerPort + "',nsrbm='" + nsrbm + "' where ServerIP='" + ServerIP + "' \r\n";
            sSql += "end";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 查询纳税人编码+地税服务器信息
        /// </summary>
        /// <returns></returns>
        public DataSet SearchTaxServer()
        {
            string sSql = "select * from TaxServer";
            return ExecuteDataSet(sSql, "TaxServer");
        }

        /// <summary>
        /// 查询纳税人编码+地税服务器信息
        /// </summary>
        /// <param name="strIP">IP</param>
        /// <param name="strPort">Port</param>
        /// <returns></returns>
        public DataSet SearchTaxServer(string strIP, string strPort)
        {
            string sSql = "select * from TaxServer where ServerIP='" + strIP + "' and ServerPort='" + strPort + "'";
            return ExecuteDataSet(sSql, "TaxServer");
        }

        /// <summary>
        /// 保存地税收银信息
        /// </summary>
        /// <param name="CashNO">收银编号</param>
        /// <param name="nsrbm">纳税人编码</param>
        /// <param name="swjgmc">主管税务机关名称</param>
        /// <param name="swjgdm">主管税务机关代码</param>
        /// <param name="nsrsbh">纳税人识别号</param>
        /// <param name="nsrmc">纳税人名称</param>
        /// <param name="fpzlbm">发票种类编码</param>
        /// <param name="fpdm">发票编码</param>
        /// <param name="fphm">发票号码</param>
        /// <param name="hymc">行业名称</param>
        /// <param name="hybm">行业编码</param>
        /// <param name="pmmc">品目名称</param>
        /// <param name="pmbm">品目编码</param>
        /// <param name="zmdm">子目代码</param>
        /// <param name="kprq">开票日期</param>
        /// <param name="kpr">开票人</param>
        /// <param name="fpzt">发票状态[默认:正常]</param>
        /// <returns></returns>
        public bool SaveTaxCash_ID_2001(string CashNO, string nsrbm, string swjgmc, string swjgdm, string nsrsbh, string nsrmc, string fpzlbm, string fpdm, string fphm, string hymc, string hybm, string[] dj, string[] sl, string[] je, string[] pmmc, string[] pmbm, string[] zmdm, string kprq, string kpr, string fpzt)
        {
            //开票
            //string sSql = "insert into TaxCashSub (CashNO, nsrbm, swjgmc, swjgdm, nsrsbh, nsrmc, fpzlbm, fpdm, fphm, hymc, hybm, pmmc, pmbm, zmdm, kprq, kpr, fpzt) values ('" + CashNO + "', '" + nsrbm + "', '" + swjgmc + "', '" + swjgdm + "', '" + nsrsbh + "', '" + nsrmc + "', '" + fpzlbm + "', '" + fpdm + "', '" + fphm + "', '" + hymc + "', '" + hybm + "', '" + pmmc + "', '" + pmbm + "', '" + zmdm + "', '" + kprq + "', '" + kpr + "','" + fpzt + "') \r\n";
            string sSql = "insert into TaxCashSub (CashNO, nsrbm, swjgmc, swjgdm, nsrsbh, nsrmc, fpzlbm, fpdm, fphm, hymc, hybm, kprq, kpr, fpzt) values ('" + CashNO + "', '" + nsrbm + "', '" + swjgmc + "', '" + swjgdm + "', '" + nsrsbh + "', '" + nsrmc + "', '" + fpzlbm + "', '" + fpdm + "', '" + fphm + "', '" + hymc + "', '" + hybm + "', '" + kprq + "', '" + kpr + "','" + fpzt + "') \r\n";
            for (int i = 0; i < je.Length; ++i)
            {
                sSql += "insert into TaxCashDetail (CashNO,AutoIndex,dj,sl,je,pmmc,pmbm,zmdm) values ('" + CashNO + "','" + i.ToString() + "','" + dj[i] + "','" + sl[i] + "','" + je[i] + "','" + pmmc[i] + "','" + pmbm[i] + "','" + zmdm[i] + "')\r\n";
            }
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 发票作废
        /// </summary>
        /// <param name="CashNO">收银编号</param>
        /// <param name="fphm">发票号码</param>
        /// <param name="zfrq">作废日期</param>
        /// <param name="zfr">作废人</param>
        /// <param name="fpzt">发票状态[普通作废/空白作废]</param>
        /// <returns></returns>
        public bool SaveTaxCash_ID_3001(string CashNO, string fphm, string zfrq, string zfr, string fpzt)
        {
            //作废
            string sSql = "Update TaxCashSub set kprq1='" + zfrq + "', kpr1='" + zfr + "', fpzt='" + fpzt + "' where CashNO='" + CashNO + "' and fphm='" + fphm + "' ";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 发票冲红
        /// </summary>
        /// <param name="strOldCashNO">旧收银编号</param>
        /// <param name="Oldfphm">旧地税发票号码</param>
        /// <param name="strCashNO">收银编号</param>
        /// <param name="nsrbm"></param>
        /// <param name="swjgmc"></param>
        /// <param name="swjgdm"></param>
        /// <param name="nsrsbh"></param>
        /// <param name="nsrmc"></param>
        /// <param name="fpzlbm"></param>
        /// <param name="fpdm"></param>
        /// <param name="fphm"></param>
        /// <param name="hymc"></param>
        /// <param name="hybm"></param>
        /// <param name="dj"></param>
        /// <param name="sl"></param>
        /// <param name="je"></param>
        /// <param name="pmmc"></param>
        /// <param name="pmbm"></param>
        /// <param name="zmdm"></param>
        /// <param name="kprq"></param>
        /// <param name="kpr"></param>
        /// <param name="fpzt"></param>
        /// <returns></returns>
        public bool SaveTaxCash_ID_5001(string strOldCashNO, string Oldfphm, string strCashNO, string nsrbm, string swjgmc, string swjgdm, string nsrsbh, string nsrmc, string fpzlbm, string fpdm, string fphm, string hymc, string hybm, string kprq, string kpr, string fpzt)
        {
            string sSql = "UPDATE TaxCashSub set chfphm='" + fphm + "', kprq1='" + kprq + "',kpr1='" + kpr + "',fpzt='" + fpzt + "' where CashNO='" + strOldCashNO + "' and fphm='" + Oldfphm + "' \r\n";
            sSql += "insert into TaxCashSub (CashNO, nsrbm, swjgmc, swjgdm, nsrsbh, nsrmc, fpzlbm, fpdm, fphm, hymc, hybm, kprq, kpr, fpzt) values ('" + strCashNO + "', '" + nsrbm + "', '" + swjgmc + "', '" + swjgdm + "', '" + nsrsbh + "', '" + nsrmc + "', '" + fpzlbm + "', '" + fpdm + "', '" + fphm + "', '" + hymc + "', '" + hybm + "', '" + kprq + "', '" + kpr + "','" + fpzt + "') \r\n";
            sSql += @"insert into TaxCashDetail 
	select '" + strCashNO + "',AutoIndex,'-'+dj,sl,'-'+je,pmmc,pmbm,zmdm from TaxCashDetail where CashNO='" + strOldCashNO + "'";
            return ExecuteSql(sSql);

            //string sSql = "UPDATE TaxCashSub set chfphm='" + chfphm + "',kprq1='" + kprq + "',kpr1='" + kpr + "',fpzt='" + fpzt + "' where CashNO='" + CashNO + "' and fphm='" + fphm + "' ";
            ////冲红
            //return ExecuteSql(sSql);
        }

        /// <summary>
        /// 获取地税发票信息
        /// </summary>
        /// <param name="strCashNO"></param>
        /// <param name="_fpzt"></param>
        /// <returns></returns>
        public DataSet GetTaxCashInfo(string strCashNO, string _fpzt)
        {
            string strSql = @"SELECT     dbo.TaxCashSub.CashNO, dbo.TaxCashSub.nsrbm, dbo.TaxCashSub.swjgmc, dbo.TaxCashSub.swjgdm, dbo.TaxCashSub.nsrsbh, 
                      dbo.TaxCashSub.nsrmc, dbo.TaxCashSub.fpzlbm, dbo.TaxCashSub.fpdm, dbo.TaxCashSub.fphm, dbo.TaxCashSub.hymc, 
                      dbo.TaxCashSub.hybm, dbo.TaxCashSub.kprq, dbo.TaxCashSub.kpr, dbo.TaxCashSub.chfphm, dbo.TaxCashSub.kprq1,
                      dbo.TaxCashSub.kpr1, dbo.TaxCashSub.fpzt, dbo.TaxCashDetail.zmdm, dbo.TaxCashDetail.pmbm, 
                      dbo.TaxCashDetail.pmmc, dbo.TaxCashDetail.je, dbo.TaxCashDetail.sl, dbo.TaxCashDetail.dj, dbo.TaxCashDetail.AutoIndex
FROM         dbo.TaxCashDetail INNER JOIN
                      dbo.TaxCashSub ON dbo.TaxCashDetail.CashNO = dbo.TaxCashSub.CashNO where TaxCashSub.CashNO='" + strCashNO + "' ";
            if (!String.IsNullOrEmpty(_fpzt))
            {
                strSql += " and fpzt='" + _fpzt + "'";
            }
            return ExecuteDataSet(strSql, "TaxCashSub");
        }

        ///// <summary>
        ///// 查询税务登记内容
        ///// </summary>
        ///// <param name="sql"></param>
        ///// <returns></returns>
        //public DataSet SearchTaxRegistrationContent(string sql)
        //{
        //    string sSql = "select swjgmc, swjgdm, nsrsbh, nsrmc, sdhbz, fpdm, fpzlbm, TaxRegistrationContent.nsrbm, hymc, hybm, pmmc, pmbm, zmdm from TaxRegistrationContent inner join TaxRegistrationContentSub on TaxRegistrationContent.nsrbm=TaxRegistrationContentSub.nsrbm where 1=1 " + sql;
        //    return ExecuteDataSet(sSql, "TaxRegistrationContent");
        //}
        #endregion

        #region 淘宝打票



        #endregion

        #region 下载配置信息
        /// <summary>
        /// 下载收银配置
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public string DownloadConfig()
        {
            string str = "";
            string queryString = "select ConfigNO,ConfigType,ConfigValue from Config";
            OpenConn();
            try
            {
                DataSet myds = new DataSet();
                SqlDataAdapter myda = new SqlDataAdapter(queryString, Conn);
                myda.Fill(myds, "Config");
                if (myds.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; myds.Tables[0].Rows.Count > i; i++)
                    {
                        DataRow row = myds.Tables[0].Rows[i];
                        if (row["ConfigType"].ToString() != null)
                        {
                            string str4 = str;
                            str = str4 + "<" + row["ConfigType"].ToString() + ">";
                            str = str + "<ConfigNO>" + row["ConfigNO"].ToString() + "</ConfigNO>";
                            str = str + "<ConfigValue>" + row["ConfigValue"].ToString() + "</ConfigValue>";
                            str = str + "<ConfigType>" + row["ConfigType"].ToString() + "</ConfigType>";
                            str4 = str;
                            str = str4 + "</" + row["ConfigType"].ToString() + ">";
                        }
                    }
                }
                CloseConn();
                return ("<ConfigType>" + str + "</ConfigType>");
            }
            catch (Exception)
            {
                CloseConn();
                return ("<ConfigType>" + str + "</ConfigType>");
            }
        }

        /// <summary>
        /// 下载部门
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public string DownloadDepartment()
        {
            string str = "";
            //string queryString = "select DepartmentNO,ParDepartmentNO,DepartmentName,DepartmentManager,DepartmentDescribe,DepartmentPhone,DepartmentAddress from Department";
            string queryString = "select DepartmentNO,ParDepartmentNO,DepartmentName,DepartmentManager,DepartmentDescribe,DepartmentPhone,CompanyBM,DepartmentAddress from Department";
            OpenConn();
            try
            {
                DataSet myds = new DataSet();
                SqlDataAdapter myda = new SqlDataAdapter(queryString, Conn);
                myda.Fill(myds, "Department");
                if (myds.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; myds.Tables[0].Rows.Count > i; i++)
                    {
                        DataRow row = myds.Tables[0].Rows[i];
                        if (row["ParDepartmentNO"].ToString() != null)
                        {
                            string str4 = str;
                            str = str4 + "<" + row["ParDepartmentNO"].ToString() + ">";
                            str = str + "<DepartmentNO>" + row["DepartmentNO"].ToString() + "</DepartmentNO>";
                            str = str + "<DepartmentName>" + row["DepartmentName"].ToString() + "</DepartmentName>";
                            str = str + "<DepartmentManager>" + row["DepartmentManager"].ToString() + "</DepartmentManager>";
                            str = str + "<DepartmentPhone>" + row["DepartmentPhone"].ToString() + "</DepartmentPhone>";
                            str = str + "<DepartmentDescribe>" + row["DepartmentDescribe"].ToString() + "</DepartmentDescribe>";
                            str = str + "<DepartmentAddress>" + row["DepartmentAddress"].ToString() + "</DepartmentAddress>";
                            str = str + "<CompanyBM>" + row["CompanyBM"].ToString() + "</CompanyBM>";
                            //str = str + "<Create>" + row["Create"].ToString() + "</Create>";
                            //str = str + "<CreateDate>" + row["CreateDate"].ToString() + "</CreateDate>";
                            str4 = str;
                            str = str4 + "</" + row["ParDepartmentNO"].ToString() + ">";
                        }
                    }
                }
                CloseConn();
                return ("<ParDepartmentNO>" + str + "</ParDepartmentNO>");
            }
            catch (Exception)
            {
                CloseConn();
                return ("<ParDepartmentNO>" + str + "</ParDepartmentNO>");
            }
        }

        /// <summary>
        /// 下载员工信息
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public XmlDocument DownloadEmployee(XmlDocument xmlDoc, DateTime oldTime)
        {
            //string str = "";
            string queryString = "select DepartmentNO,EmployeeNO,EmployeeName,EmployeeSex,EmployeeBirthday,EmployeeLevel,EmployeeDuty,EmployeeDescribe,EmployeePhoto,IsDelete from Employee";
            #region Add by Caijinsong 2013-3-3
            if (xmlDoc == null)
            {
                xmlDoc = new XmlDocument();
                XmlElement depElement = xmlDoc.CreateElement("DepartmentNO");
                xmlDoc.AppendChild(depElement);
            }
            if (DateTime.Compare(oldTime, DateTime.Parse("1989-1-1")) > 0)
            {
                queryString += " where DATEDIFF(DD,LastUpdatetime,'" + oldTime + "')<0";
            }
            #endregion

            OpenConn();
            try
            {
                DataSet myds = new DataSet();
                SqlDataAdapter myda = new SqlDataAdapter(queryString, Conn);
                myda.Fill(myds, "Employee");
                XmlNode mainNode = xmlDoc.SelectSingleNode("//DepartmentNO");//Add by Caijinsong 2013-3-4
                if (myds.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; myds.Tables[0].Rows.Count > i; i++)
                    {
                        DataRow row = myds.Tables[0].Rows[i];
                        if (row["DepartmentNO"].ToString() != null)
                        {
                            string str = String.Empty;
                            //str = str4 + "<Employee>";
                            //str = str4 + "<" + row["DepartmentNO"].ToString() + ">";
                            str = "<DepartmentNO>" + row["DepartmentNO"].ToString() + "</DepartmentNO>";
                            str += "<EmployeeNO>" + row["EmployeeNO"].ToString() + "</EmployeeNO>";
                            str += "<EmployeeName>" + row["EmployeeName"].ToString() + "</EmployeeName>";
                            str += "<EmployeeSex>" + row["EmployeeSex"].ToString() + "</EmployeeSex>";
                            str += "<EmployeeBirthday>" + row["EmployeeBirthday"].ToString() + "</EmployeeBirthday>";
                            str += "<EmployeeLevel>" + row["EmployeeLevel"].ToString() + "</EmployeeLevel>";
                            str += "<EmployeeDuty>" + row["EmployeeDuty"].ToString() + "</EmployeeDuty>";
                            str += "<EmployeeDescribe>" + row["EmployeeDescribe"].ToString() + "</EmployeeDescribe>";
                            //str += "<EmployeePhoto>" + row["EmployeePhoto"].ToString() + "</EmployeePhoto>";
                            str += "<IsDelete>" + row["IsDelete"].ToString() + "</IsDelete>";
                            //str4 = str;
                            //str = str4 + "</" + row["DepartmentNO"].ToString() + ">";
                            //str = str4 + "</Employee>";
                            #region Add by Caijinsong 2013-3-3
                            XmlNode empNode = mainNode.SelectSingleNode("//Employee[EmployeeNO='" + row["DepartmentNO"].ToString() + "']");
                            if (empNode == null)
                            {
                                XmlElement empElement = xmlDoc.CreateElement("Employee");
                                empElement.InnerXml = str;
                                mainNode.AppendChild(empElement);
                            }
                            else
                            {
                                empNode.InnerXml = str;
                            }
                            #endregion
                        }
                    }
                }
                CloseConn();
                XmlElement updateElement = xmlDoc.CreateElement("Update");
                XmlElement timeElement = xmlDoc.CreateElement("Time");
                timeElement.InnerText = DateTime.Now.ToString();//添加更新时间
                updateElement.AppendChild(timeElement);
                mainNode.AppendChild(updateElement);
                return xmlDoc;
            }
            catch (Exception)
            {
                CloseConn();
                xmlDoc = new XmlDocument();
                XmlElement depElement = xmlDoc.CreateElement("DepartmentNO");
                xmlDoc.AppendChild(depElement);
                return xmlDoc;
            }
        }

        /// <summary>
        /// 下载产品类别
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public string DownloadProductType()
        {
            string str = "";
            string queryString = "select ProductTypeNO, ProductTypeName, [Create], CreateDate from ProductType";
            OpenConn();
            try
            {
                DataSet myds = new DataSet();
                SqlDataAdapter myda = new SqlDataAdapter(queryString, Conn);
                myda.Fill(myds, "ProductType");
                if (myds.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; myds.Tables[0].Rows.Count > i; i++)
                    {
                        DataRow row = myds.Tables[0].Rows[i];
                        if (row["ProductTypeNO"].ToString() != null)
                        {
                            string str4 = str;
                            str = str4 + "<ProductType>";
                            str = str + "<ProductTypeNO>" + row["ProductTypeNO"].ToString() + "</ProductTypeNO>";
                            str = str + "<ProductTypeName>" + row["ProductTypeName"].ToString() + "</ProductTypeName>";
                            str = str + "<Create>" + row["Create"].ToString() + "</Create>";
                            str = str + "<CreateDate>" + row["CreateDate"].ToString() + "</CreateDate>";
                            str4 = str;
                            str = str4 + "</ProductType>";
                        }
                    }
                }
                CloseConn();
                return ("<ProductTypeAll>" + str + "</ProductTypeAll>");
            }
            catch (Exception)
            {
                CloseConn();
                return ("<ProductTypeAll>" + str + "</ProductTypeAll>");
            }
        }

        /// <summary>
        /// 下载产品
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public XmlDocument DownloadProducts(XmlDocument xmlDoc, DateTime oldTime)
        {
            //string str = "";
            string queryString = "select ProductTypeNO, ProductNO, ProductName, ProductSizeA, ProductSizeB, ProductSellingPrice, ProductDescribe,IsCountNumber,ProductNumber, NoticeNumber, ProductImage, [Create], CreateDate, IsDelete from Products";
            #region Add by Caijinsong 2013-3-4
            if (xmlDoc == null)
            {
                xmlDoc = new XmlDocument();
                XmlElement element = xmlDoc.CreateElement("ProductsAll");
                xmlDoc.AppendChild(element);
            }
            if (DateTime.Compare(oldTime, DateTime.Parse("1989-1-1")) > 0)
            {
                queryString += " where DATEDIFF(DD,LastUpdatetime,'" + oldTime + "')<0";
            }
            #endregion
            OpenConn();
            try
            {
                DataSet myds = new DataSet();
                SqlDataAdapter myda = new SqlDataAdapter(queryString, Conn);
                myda.Fill(myds, "Products");
                XmlNode mainNode = xmlDoc.SelectSingleNode("//ProductsAll");//Add by Caijinsong 2013-3-4
                if (myds.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; myds.Tables[0].Rows.Count > i; i++)
                    {
                        DataRow row = myds.Tables[0].Rows[i];
                        if (row["ProductNO"].ToString() != null)
                        {
                            string str = String.Empty;
                            //str = "<Products>";
                            str = "<ProductTypeNO>" + row["ProductTypeNO"].ToString() + "</ProductTypeNO>";
                            str += "<ProductNO>" + row["ProductNO"].ToString() + "</ProductNO>";
                            str += "<ProductName>" + row["ProductName"].ToString() + "</ProductName>";
                            str += "<ProductSizeA>" + row["ProductSizeA"].ToString() + "</ProductSizeA>";
                            str += "<ProductSizeB>" + row["ProductSizeB"].ToString() + "</ProductSizeB>";
                            str += "<ProductSellingPrice>" + row["ProductSellingPrice"].ToString() + "</ProductSellingPrice>";
                            str += "<ProductDescribe>" + row["ProductDescribe"].ToString() + "</ProductDescribe>";
                            str += "<IsCountNumber>" + row["IsCountNumber"].ToString() + "</IsCountNumber>";
                            str += "<ProductNumber>" + row["ProductNumber"].ToString() + "</ProductNumber>";
                            str += "<NoticeNumber>" + row["NoticeNumber"].ToString() + "</NoticeNumber>";
                            str += "<ProductImage>" + row["ProductImage"].ToString() + "</ProductImage>";
                            str += "<Create>" + row["Create"].ToString() + "</Create>";
                            str += "<CreateDate>" + row["CreateDate"].ToString() + "</CreateDate>";
                            str += "<IsDelete>" + row["IsDelete"].ToString() + "</IsDelete>";
                            //str += "</Products>";
                            XmlNode productNode = mainNode.SelectSingleNode("//Products[ProductNO='" + row["ProductNO"].ToString() + "']");
                            if (productNode == null)
                            {
                                XmlElement xeProduct = xmlDoc.CreateElement("Products");
                                xeProduct.InnerXml = str;
                                mainNode.AppendChild(xeProduct);
                            }
                            else
                            {
                                productNode.InnerXml = str;
                            }
                        }
                    }
                }
                CloseConn();
                //return ("<ProductsAll>" + str + "</ProductsAll>");
                XmlElement exUpdate = xmlDoc.CreateElement("Update");
                XmlElement exTime = xmlDoc.CreateElement("Time");
                exTime.InnerText = DateTime.Now.ToString();
                exUpdate.AppendChild(exTime);
                mainNode.AppendChild(exUpdate);
                return xmlDoc;
            }
            catch (Exception)
            {
                CloseConn();
                //return ("<ProductsAll>" + str + "</ProductsAll>");
                xmlDoc = new XmlDocument();
                XmlElement depElement = xmlDoc.CreateElement("ProductsAll");
                xmlDoc.AppendChild(depElement);
                return xmlDoc;
            }
        }

        /// <summary>
        /// 下载产品库
        /// </summary>
        /// <param name="sSql"></param>
        /// <returns></returns>
        [WebMethod]
        //public string DownloadProducts_N()
        public XmlDocument DownloadProducts_N(XmlDocument xmlDoc, DateTime oldTime)//Edit by Caijinsong 2013-3-4
        {
            try
            {
                string sSql = "select ProductType.ProductTypeNO,ProductType.ProductTypeName, BackProductTypeNO, BackProductNO, Products.ProductNO, Products.ProductName, ProductSize=(Products.ProductSizeA + '*' + Products.ProductSizeB), Fram, Box, Unit, Page, Paper, film, InsidePage, Biao, Ban, Diao, ProductCostPrice, Products.ProductSellingPrice, Products.ProductDescribe,Products.IsCountNumber, Products.ProductNumber, Products.NoticeNumber, Products.[Create], Products.CreateDate, Products.IsDelete from Products inner join ProductType on Products.ProductTypeNO=ProductType.ProductTypeNO where IsDelete='False' ";//, Products.ProductImage
                #region Add by Caijinsong 2013-3-4
                if (xmlDoc == null)
                {
                    xmlDoc = new XmlDocument();
                    XmlElement element = xmlDoc.CreateElement("ProductsAll");
                    xmlDoc.AppendChild(element);
                }
                if (DateTime.Compare(oldTime, DateTime.Parse("1989-1-1")) > 0)
                {
                    sSql += " and (DATEDIFF(DD,Products.LastUpdatetime,'" + oldTime + "')<0 or DATEDIFF(DD,ProductType.LastUpdatetime,'" + oldTime + "')<0)";
                }
                XmlNode mainNode = xmlDoc.SelectSingleNode("//ProductsAll");//Add by Caijinsong 2013-3-4
                #endregion
                DataSet myds = ExecuteDataSet(sSql, "Products");
                //string str = "";
                if (myds.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; myds.Tables[0].Rows.Count > i; i++)
                    {
                        DataRow row = myds.Tables[0].Rows[i];
                        if (row["ProductNO"].ToString() != null)
                        {
                            string str = "";
                            //string str4 = str;
                            //str = + "<Products>";
                            str = "<ProductTypeNO>" + row["ProductTypeNO"].ToString() + "</ProductTypeNO>";
                            str = str + "<ProductTypeName>" + row["ProductTypeName"].ToString() + "</ProductTypeName>";
                            str = str + "<ProductNO>" + row["ProductNO"].ToString() + "</ProductNO>";
                            str = str + "<ProductName>" + row["ProductName"].ToString() + "</ProductName>";
                            str = str + "<ProductSize>" + row["ProductSize"].ToString() + "</ProductSize>";
                            str = str + "<Fram>" + row["Fram"].ToString() + "</Fram>";
                            str = str + "<Box>" + row["Box"].ToString() + "</Box>";
                            str = str + "<Unit>" + row["Unit"].ToString() + "</Unit>";
                            str = str + "<Page>" + row["Page"].ToString() + "</Page>";
                            str = str + "<Paper>" + row["Paper"].ToString() + "</Paper>";
                            str = str + "<film>" + row["film"].ToString() + "</film>";
                            str = str + "<InsidePage>" + row["InsidePage"].ToString() + "</InsidePage>";
                            str = str + "<Biao>" + row["Biao"].ToString() + "</Biao>";
                            str = str + "<Ban>" + row["Ban"].ToString() + "</Ban>";
                            str = str + "<Diao>" + row["Diao"].ToString() + "</Diao>";
                            str = str + "<ProductCostPrice>" + row["ProductCostPrice"].ToString() + "</ProductCostPrice>";
                            str = str + "<ProductSellingPrice>" + row["ProductSellingPrice"].ToString() + "</ProductSellingPrice>";
                            str = str + "<ProductDescribe>" + row["ProductDescribe"].ToString() + "</ProductDescribe>";
                            str = str + "<IsCountNumber>" + row["IsCountNumber"].ToString() + "</IsCountNumber>";
                            str = str + "<ProductNumber>" + row["ProductNumber"].ToString() + "</ProductNumber>";
                            str = str + "<NoticeNumber>" + row["NoticeNumber"].ToString() + "</NoticeNumber>";
                            //str = str + "<ProductImage>" + row["ProductImage"].ToString() + "</ProductImage>";
                            str = str + "<Create>" + row["Create"].ToString() + "</Create>";
                            str = str + "<CreateDate>" + row["CreateDate"].ToString() + "</CreateDate>";
                            str = str + "<IsDelete>" + row["IsDelete"].ToString() + "</IsDelete>";
                            //str4 = str;
                            //str = str4 + "</Products>";
                            XmlNode productNode = mainNode.SelectSingleNode("//Products[ProductNO='" + row["ProductNO"].ToString() + "']");
                            if (productNode == null)
                            {
                                XmlElement xeProduct = xmlDoc.CreateElement("Products");
                                xeProduct.InnerXml = str;
                                mainNode.AppendChild(xeProduct);
                            }
                            else
                            {
                                productNode.InnerXml = str;
                            }
                        }
                    }
                }
                //return ("<ProductsAll>" + str + "</ProductsAll>");
                XmlElement exUpdate = xmlDoc.CreateElement("Update");
                XmlElement exTime = xmlDoc.CreateElement("Time");
                exTime.InnerText = DateTime.Now.ToString();
                exUpdate.AppendChild(exTime);
                mainNode.AppendChild(exUpdate);
                return xmlDoc;
            }
            catch
            {
                //return ("<ProductsAll></ProductsAll>");
                xmlDoc = new XmlDocument();
                XmlElement depElement = xmlDoc.CreateElement("ProductsAll");
                xmlDoc.AppendChild(depElement);
                return xmlDoc;
            }
        }

        /// <summary>
        /// 下载套系类别
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public string DownloadSuiteType()
        {
            string str = "";
            string queryString = "select SuiteTypeNO, SuiteTypeName, [Create], CreateDate from SuiteType";
            OpenConn();
            try
            {
                DataSet myds = new DataSet();
                SqlDataAdapter myda = new SqlDataAdapter(queryString, Conn);
                myda.Fill(myds, "SuiteType");
                if (myds.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; myds.Tables[0].Rows.Count > i; i++)
                    {
                        DataRow row = myds.Tables[0].Rows[i];
                        if (row["SuiteTypeNO"].ToString() != null)
                        {
                            string str4 = str;
                            str = str4 + "<SuiteType>";
                            str = str + "<SuiteTypeNO>" + row["SuiteTypeNO"].ToString() + "</SuiteTypeNO>";
                            str = str + "<SuiteTypeName>" + row["SuiteTypeName"].ToString() + "</SuiteTypeName>";
                            str = str + "<Create>" + row["Create"].ToString() + "</Create>";
                            str = str + "<CreateDate>" + row["CreateDate"].ToString() + "</CreateDate>";
                            str4 = str;
                            str = str4 + "</SuiteType>";
                        }
                    }
                }
                CloseConn();
                return ("<SuiteTypeAll>" + str + "</SuiteTypeAll>");
            }
            catch (Exception)
            {
                CloseConn();
                return ("<SuiteTypeAll>" + str + "</SuiteTypeAll>");
            }
        }

        /// <summary>
        /// 下载套系
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public string DownloadSuite()
        {
            string str = "";
            string queryString = "select SuiteTypeNO, SuiteNO, SuiteName, SuitePrice, SuiteDescribe, [Create], CreateDate, IsDelete from Suite";
            OpenConn();
            try
            {
                DataSet myds = new DataSet();
                SqlDataAdapter myda = new SqlDataAdapter(queryString, Conn);
                myda.Fill(myds, "Suite");
                if (myds.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; myds.Tables[0].Rows.Count > i; i++)
                    {
                        DataRow row = myds.Tables[0].Rows[i];
                        if (row["SuiteNO"].ToString() != null)
                        {
                            string str4 = str;
                            str = str4 + "<Suite>";
                            str = str + "<SuiteTypeNO>" + row["SuiteTypeNO"].ToString() + "</SuiteTypeNO>";
                            str = str + "<SuiteNO>" + row["SuiteNO"].ToString() + "</SuiteNO>";
                            str = str + "<SuiteName>" + row["SuiteName"].ToString() + "</SuiteName>";
                            str = str + "<SuitePrice>" + row["SuitePrice"].ToString() + "</SuitePrice>";
                            str = str + "<SuiteDescribe>" + row["SuiteDescribe"].ToString() + "</SuiteDescribe>";
                            str = str + "<Create>" + row["Create"].ToString() + "</Create>";
                            str = str + "<CreateDate>" + row["CreateDate"].ToString() + "</CreateDate>";
                            str = str + "<IsDelete>" + row["IsDelete"].ToString() + "</IsDelete>";
                            str4 = str;
                            str = str4 + "</Suite>";
                        }
                    }
                }
                CloseConn();
                return ("<SuiteAll>" + str + "</SuiteAll>");
            }
            catch (Exception)
            {
                CloseConn();
                return ("<SuiteAll>" + str + "</SuiteAll>");
            }
        }

        /// <summary>
        /// 下载套系产品
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public string DownloadSuiteProduct()
        {
            string str = "";
            string queryString = "select SuiteNO, ProductTypeName, ProductNO, ProductName, ProductSizeA, ProductSizeB, PageQuantity, NegativeQuantity, ProductQuantity, ProductSellingPrice, [Create], CreateDate from dbo.V_SearchSuiteProduct";
            OpenConn();
            try
            {
                DataSet myds = new DataSet();
                SqlDataAdapter myda = new SqlDataAdapter(queryString, Conn);
                myda.Fill(myds, "SuiteProduct");
                if (myds.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; myds.Tables[0].Rows.Count > i; i++)
                    {
                        DataRow row = myds.Tables[0].Rows[i];
                        if (row["SuiteNO"].ToString() != null)
                        {
                            string str4 = str;
                            str = str4 + "<" + row["SuiteNO"].ToString() + ">";
                            str = str + "<SuiteNO>" + row["SuiteNO"].ToString() + "</SuiteNO>";
                            str = str + "<ProductTypeName>" + row["ProductTypeName"].ToString() + "</ProductTypeName>";
                            str = str + "<ProductNO>" + row["ProductNO"].ToString() + "</ProductNO>";
                            str = str + "<ProductName>" + row["ProductName"].ToString() + "</ProductName>";
                            str = str + "<ProductSizeA>" + row["ProductSizeA"].ToString() + "</ProductSizeA>";
                            str = str + "<ProductSizeB>" + row["ProductSizeB"].ToString() + "</ProductSizeB>";
                            str = str + "<PageQuantity>" + row["PageQuantity"].ToString() + "</PageQuantity>";
                            str = str + "<NegativeQuantity>" + row["NegativeQuantity"].ToString() + "</NegativeQuantity>";
                            str = str + "<ProductQuantity>" + row["ProductQuantity"].ToString() + "</ProductQuantity>";
                            str = str + "<ProductSellingPrice>" + row["ProductSellingPrice"].ToString() + "</ProductSellingPrice>";
                            str = str + "<Create>" + row["Create"].ToString() + "</Create>";
                            str = str + "<CreateDate>" + row["CreateDate"].ToString() + "</CreateDate>";
                            str4 = str;
                            str = str4 + "</" + row["SuiteNO"].ToString() + ">";
                        }
                    }
                }
                CloseConn();
                return ("<SuiteProduct>" + str + "</SuiteProduct>");
            }
            catch (Exception)
            {
                CloseConn();
                return ("<SuiteProduct>" + str + "</SuiteProduct>");
            }
        }

        /// <summary>
        /// 下载短信类别
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public string DownloadSmsSendType()
        {
            string str = "";
            string queryString = "select [ID], SendType, SendContent from SmsSendType";
            OpenConn();
            try
            {
                DataSet myds = new DataSet();
                SqlDataAdapter myda = new SqlDataAdapter(queryString, Conn);
                myda.Fill(myds, "SmsSendType");
                if (myds.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; myds.Tables[0].Rows.Count > i; i++)
                    {
                        DataRow row = myds.Tables[0].Rows[i];
                        if (row["SendType"].ToString() != null)
                        {
                            string str4 = str;
                            str = str4 + "<SmsSendType>";
                            str = str + "<AID>" + row["ID"].ToString() + "</AID>";
                            str = str + "<SendType>" + row["SendType"].ToString() + "</SendType>";
                            str = str + "<SendContent>" + row["SendContent"].ToString() + "</SendContent>";
                            str4 = str;
                            str = str4 + "</SmsSendType>";
                        }
                    }
                }
                CloseConn();
                return ("<SmsSendTypeAll>" + str + "</SmsSendTypeAll>");
            }
            catch (Exception)
            {
                CloseConn();
                return ("<SmsSendTypeAll>" + str + "</SmsSendTypeAll>");
            }
        }

        /// <summary>
        /// 下载活动类别
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public string DownloadItemType()
        {
            string str = "";
            string queryString = "select ItemTypeNO, ItemTypeName, [Create], CreateDate from ItemType";
            OpenConn();
            try
            {
                DataSet myds = new DataSet();
                SqlDataAdapter myda = new SqlDataAdapter(queryString, Conn);
                myda.Fill(myds, "ItemType");
                if (myds.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; myds.Tables[0].Rows.Count > i; i++)
                    {
                        DataRow row = myds.Tables[0].Rows[i];
                        if (row["ItemTypeNO"].ToString() != null)
                        {
                            string str4 = str;
                            str = str4 + "<ItemType>";
                            str = str + "<ItemTypeNO>" + row["ItemTypeNO"].ToString() + "</ItemTypeNO>";
                            str = str + "<ItemTypeName>" + row["ItemTypeName"].ToString() + "</ItemTypeName>";
                            str = str + "<Create>" + row["Create"].ToString() + "</Create>";
                            str = str + "<CreateDate>" + row["CreateDate"].ToString() + "</CreateDate>";
                            str4 = str;
                            str = str4 + "</ItemType>";
                        }
                    }
                }
                CloseConn();
                return ("<ItemTypeAll>" + str + "</ItemTypeAll>");
            }
            catch (Exception)
            {
                CloseConn();
                return ("<ItemTypeAll>" + str + "</ItemTypeAll>");
            }
        }

        /// <summary>
        /// 下载流程要素
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public string DownloadElement()
        {
            string str = "";
            string queryString = "select ID,ElementType, ElementNO, ElementName, [Create], CreateDate from Element";
            OpenConn();
            try
            {
                DataSet myds = new DataSet();
                SqlDataAdapter myda = new SqlDataAdapter(queryString, Conn);
                myda.Fill(myds, "Element");
                if (myds.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; myds.Tables[0].Rows.Count > i; i++)
                    {
                        DataRow row = myds.Tables[0].Rows[i];
                        if (row["ElementType"].ToString() != null)
                        {
                            string str4 = str;
                            str = str4 + "<Element>";
                            str = str + "<ID>" + row["ID"].ToString() + "</ID>";
                            str = str + "<ElementType>" + row["ElementType"].ToString() + "</ElementType>";
                            str = str + "<ElementNO>" + row["ElementNO"].ToString() + "</ElementNO>";
                            str = str + "<ElementName>" + row["ElementName"].ToString() + "</ElementName>";
                            str = str + "<Create>" + row["Create"].ToString() + "</Create>";
                            str = str + "<CreateDate>" + row["CreateDate"].ToString() + "</CreateDate>";
                            str4 = str;
                            str = str4 + "</Element>";
                        }
                    }
                }
                CloseConn();
                return ("<ElementAll>" + str + "</ElementAll>");
            }
            catch (Exception)
            {
                CloseConn();
                return ("<ElementAll>" + str + "</ElementAll>");
            }
        }

        /// <summary>
        /// 下载流程日期要素
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public string DownloadElementSubDate()
        {
            string str = "";
            string queryString = "select ID, ElementID, SubDate_Title, SubDate_Date1, SubDate_Date2, [Create], CreateDate from Element_SubDate";
            OpenConn();
            try
            {
                DataSet myds = new DataSet();
                SqlDataAdapter myda = new SqlDataAdapter(queryString, Conn);
                myda.Fill(myds, "ElementSubDate");
                if (myds.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; myds.Tables[0].Rows.Count > i; i++)
                    {
                        DataRow row = myds.Tables[0].Rows[i];
                        if (row["ID"].ToString() != null)
                        {
                            string str4 = str;
                            str = str4 + "<ElementSubDate>";
                            str = str + "<ID>" + row["ID"].ToString() + "</ID>";
                            str = str + "<ElementID>" + row["ElementID"].ToString() + "</ElementID>";
                            str = str + "<SubDate_Title>" + row["SubDate_Title"].ToString() + "</SubDate_Title>";
                            str = str + "<SubDate_Date1>" + row["SubDate_Date1"].ToString() + "</SubDate_Date1>";
                            str = str + "<SubDate_Date2>" + row["SubDate_Date2"].ToString() + "</SubDate_Date2>";
                            str = str + "<Create>" + row["Create"].ToString() + "</Create>";
                            str = str + "<CreateDate>" + row["CreateDate"].ToString() + "</CreateDate>";
                            str4 = str;
                            str = str4 + "</ElementSubDate>";
                        }
                    }
                }
                CloseConn();
                return ("<ElementSubDateAll>" + str + "</ElementSubDateAll>");
            }
            catch (Exception)
            {
                CloseConn();
                return ("<ElementSubDateAll>" + str + "</ElementSubDateAll>");
            }
        }

        /// <summary>
        /// 下载流程时间要素
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public string DownloadElementSubTime()
        {
            string str = "";
            string queryString = "select ID, SubDateID, SubTime_Time, SubTime_Number, SubTime_Location, [Create], CreateDate from Element_SubTime";
            OpenConn();
            try
            {
                DataSet myds = new DataSet();
                SqlDataAdapter myda = new SqlDataAdapter(queryString, Conn);
                myda.Fill(myds, "ElementSubTime");
                if (myds.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; myds.Tables[0].Rows.Count > i; i++)
                    {
                        DataRow row = myds.Tables[0].Rows[i];
                        if (row["ID"].ToString() != null)
                        {
                            string str4 = str;
                            str = str4 + "<ElementSubTime>";
                            str = str + "<ID>" + row["ID"].ToString() + "</ID>";
                            str = str + "<SubDateID>" + row["SubDateID"].ToString() + "</SubDateID>";
                            str = str + "<SubTime_Time>" + row["SubTime_Time"].ToString() + "</SubTime_Time>";
                            str = str + "<SubTime_Number>" + row["SubTime_Number"].ToString() + "</SubTime_Number>";
                            str = str + "<SubTime_Location>" + row["SubTime_Location"].ToString() + "</SubTime_Location>";
                            str = str + "<Create>" + row["Create"].ToString() + "</Create>";
                            str = str + "<CreateDate>" + row["CreateDate"].ToString() + "</CreateDate>";
                            str4 = str;
                            str = str4 + "</ElementSubTime>";
                        }
                    }
                }
                CloseConn();
                return ("<ElementSubTimeAll>" + str + "</ElementSubTimeAll>");
            }
            catch (Exception)
            {
                CloseConn();
                return ("<ElementSubTimeAll>" + str + "</ElementSubTimeAll>");
            }
        }

        /// <summary>
        /// 下载版本要素
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public string DownloadEditionManager()
        {
            string str = "";
            string queryString = "select EditionNO, EditionName, [Default],CustomerName1,CustomerName2 from EditionManager";
            OpenConn();
            try
            {
                DataSet myds = new DataSet();
                SqlDataAdapter myda = new SqlDataAdapter(queryString, Conn);
                myda.Fill(myds, "EditionManager");
                if (myds.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; myds.Tables[0].Rows.Count > i; i++)
                    {
                        DataRow row = myds.Tables[0].Rows[i];
                        if (row["EditionNO"].ToString() != null)
                        {
                            string str4 = str;
                            str = str4 + "<EditionManager>";
                            str = str + "<EditionNO>" + row["EditionNO"].ToString() + "</EditionNO>";
                            str = str + "<EditionName>" + row["EditionName"].ToString() + "</EditionName>";
                            str = str + "<Default>" + row["Default"].ToString() + "</Default>";
                            str = str + "<CustomerName1>" + row["CustomerName1"].ToString() + "</CustomerName1>";
                            str = str + "<CustomerName2>" + row["CustomerName2"].ToString() + "</CustomerName2>";
                            str4 = str;
                            str = str4 + "</EditionManager>";
                        }
                    }
                }
                CloseConn();
                return ("<EditionManagerAll>" + str + "</EditionManagerAll>");
            }
            catch (Exception)
            {
                CloseConn();
                return ("<EditionManagerAll>" + str + "</EditionManagerAll>");
            }
        }
        #endregion

        #region 系统权限管理
        /// <summary>
        /// 系统权限查询
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchSystemPower()
        {
            string sSql = "select ID,Name from  Powers Order By ID";
            return ExecuteDataSet(sSql, "Powers");
        }
        #endregion

        /// <summary>
        /// web系统权限查询 根据员工编号来查
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchSystemWebPower(string EmployeeNO)
        {
            string sSql = @"SELECT     dbo.SystemPower.PowerName, dbo.UserPower.EmployeeNO
FROM         dbo.UserPower INNER JOIN
                      dbo.SystemPower ON dbo.UserPower.PowerID = dbo.SystemPower.ID
                      where EmployeeNO='" + EmployeeNO + "'";
            return ExecuteDataSet(sSql, "SearchSystemWebPower");
        }
        #region 公司管理

        /// <summary>
        /// 读取公司信息
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public string[] SearchCompanyRegisterInformation()
        {
            string sSql = "select CompanyBM, CompanyEnglish, CompanyChinese, CompanyRegister, ValidDate, SystemPath, SharePath,BackupPath from CompanyRegisterInformation";
            DataRow[] dr = ExecuteDataSet(sSql, "CompanyRegisterInformation").Tables[0].Select();
            string[] str = null;
            if (dr.Length > 0)
            {
                str = new string[5];
                str[0] = dr[0]["CompanyBM"].ToString();
                str[1] = dr[0]["CompanyEnglish"].ToString();
                str[2] = dr[0]["CompanyChinese"].ToString();
                str[3] = dr[0]["CompanyRegister"].ToString();
                str[4] = dr[0]["CompanyRegister"].ToString();
            }
            return str;
        }
        /// <summary>
        /// 店编码
        /// </summary>
        /// <returns></returns>
        public string GetCompanyBM()
        {
            string sSql = "select CompanyBM from CompanyRegisterInformation";
            DataSet ds = ExecuteDataSet(sSql, "CompanyRegisterInformation");
            return ds.Tables[0].Rows[0]["CompanyBM"].ToString();
        }
        /// <summary>
        /// 部门保存
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public bool SaveDepartment(string sDepartmentNO, string sParDepartmentNO, string sDepartmentName, string sDepartmentManager, string sDepartmentDescribe, string sDepartmentPhone, string sDepartmentAddress, string sCreate, string sCreateDate, string CompanyBM, string sIsDelete)
        {
            //if (!DeleteDepartment(sDepartmentNO))
            //    return false;
            string sSql = @"if exists (select DepartmentNO from Department where DepartmentNO='" + sDepartmentNO + "')";
            sSql += @"Update Department set DepartmentName='" + sDepartmentName + "',CompanyBM='" + CompanyBM + "',IsDelete='" + sIsDelete + "' where DepartmentNO='" + sDepartmentNO + "'";
            sSql += "else ";
            sSql += "Insert into Department (DepartmentNO, ParDepartmentNO, DepartmentName, DepartmentManager, DepartmentDescribe, DepartmentPhone, DepartmentAddress, [Create], CreateDate, CompanyBM ,IsDelete) values ('" + sDepartmentNO + "', '" + sParDepartmentNO + "', '" + sDepartmentName + "', '" + sDepartmentManager + "', '" + sDepartmentDescribe + "', '" + sDepartmentPhone + "', '" + sDepartmentAddress + "', '" + sCreate + "', '" + sCreateDate + "','" + CompanyBM + "','" + sIsDelete + "')";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 删除部门
        /// </summary>
        /// <param name="sDepartmentNO"></param>
        /// <returns></returns>
        [WebMethod]
        public bool DeleteDepartment(string sDepartmentNO)
        {
            string sSql = "Delete Department where DepartmentNO='" + sDepartmentNO + "' ";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 部门查询
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchDepartment(string sql)
        {
            string sSql = "select DepartmentNO,ParDepartmentNO,DepartmentName,DepartmentManager,DepartmentDescribe,DepartmentPhone,DepartmentAddress,CompanyBM from Department where IsDelete = 0 " + sql;
            return ExecuteDataSet(sSql, "SearchDepartment");
        }

        /// <summary>
        /// 部门编号找部门名称
        /// </summary>
        /// <param name="DepartmentNO"></param>
        /// <returns></returns>
        [WebMethod]
        public string GetTheDepartmentNameByDepartmentNO(string DepartmentNO)
        {
            string sSql = "select DepartmentName from Department where DepartmentNO= '" + DepartmentNO + "'";
            return ExecuteSqlToString(sSql);
        }

        /// <summary>
        /// 通过部门名称查找部门编号
        /// </summary>
        /// <param name="DepartmentName"></param>
        /// <returns></returns>
        [WebMethod]
        public string GetTheDepartmentNOByDepartmentName(string DepartmentName)
        {
            string sSql = "select DepartmentNO from Department where DepartmentName= '" + DepartmentName + "'";
            return ExecuteSqlToString(sSql);
        }
        /// <summary>
        /// 根据员工姓名查找员工编号
        /// </summary>
        /// <param name="EmployeeName"></param>
        /// <returns></returns>
        [WebMethod]
        public string GetTheEmployeeNOByEmployeeName(string EmployeeName)
        {
            string sSql = "select EmployeeNO from Employee where EmployeeName= '" + EmployeeName + "'";
            return ExecuteSqlToString(sSql);
        }

        /// <summary>
        /// 根据员工编号查找员工姓名
        /// </summary>
        /// <param name="EmployeeNO"></param>
        /// <returns></returns>
        [WebMethod]
        public string GetTheEmployeeNameByEmployeeNO(string EmployeeNO)
        {
            string sSql = "select EmployeeName from Employee where EmployeeNO= '" + EmployeeNO + "'";
            return ExecuteSqlToString(sSql);
        }
        public string GetConfigNOByConfigValue(string configValue)
        {
            string strSql = "select ElementNO from Element where ElementName='" + configValue + "'";
            return ExecuteSqlToString(strSql);
        }
        /// <summary>
        /// 保存员工
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public bool SaveEmployee(string sDepartmentNO, string sEmployeeNO, string sEmployeeNO2, string sEmployeePassword, string sEmployeeName, string sCardNO, string sEmployeeSex, string sEmployeeBirthday, string sEmployeeLevel, string sEmployeeDuty, string sEmployeeDescribe, string sCreate, string sCreateDate, string sIsDelete, string[] UserPower, bool isChange, string sEmployeePhone)
        {
            if (!DeleteEmployee(sEmployeeNO))
            {
                return false;
            }
            string sSql = "Insert into Employee (DepartmentNO, EmployeeNO, EmployeeNO2, EmployeePassword, EmployeeName, CardNO, EmployeeSex, EmployeeBirthday, EmployeeLevel, EmployeeDuty, EmployeeDescribe, [Create], CreateDate, IsDelete,IsChange,EmployeePhone) values ('" + sDepartmentNO + "', '" + sEmployeeNO + "', '" + sEmployeeNO2 + "','" + sEmployeePassword + "', '" + sEmployeeName + "','" + sCardNO + "', '" + sEmployeeSex + "', '" + sEmployeeBirthday + "', '" + sEmployeeLevel + "', '" + sEmployeeDuty + "', '" + sEmployeeDescribe + "', '" + sCreate + "', '" + sCreateDate + "', '" + sIsDelete + "','" + isChange + "','" + sEmployeePhone + "') ";
            sSql += "Delete EmployeePowers where EmployeeNO='" + sEmployeeNO + "' ";
            for (int i = 0; i < UserPower.Length; i++)
            {
                sSql += "insert into EmployeePowers (EmployeeNO,PowerID) Values ('" + sEmployeeNO + "','" + UserPower[i] + "') ";
            }
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 更新员工照片
        /// </summary>
        /// <param name="sEmployeeNO"></param>
        /// <param name="bEmployeePhoto"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateEmployeePhoto(string sEmployeeNO, byte[] bEmployeePhoto)
        {
            try
            {
                OpenConn();
                string strSql = "Update Employee set EmployeePhoto=@EmployeePhoto where EmployeeNO='" + sEmployeeNO + "' ";
                SqlCommand cmd = new SqlCommand(strSql, Conn);
                cmd.Parameters.Add("@EmployeePhoto", SqlDbType.Image);
                cmd.Parameters["@EmployeePhoto"].Value = bEmployeePhoto;

                int ireturn = cmd.ExecuteNonQuery();
                CloseConn();
                if (ireturn > 0)
                    return true;
                else
                    return false;
            }
            catch { return false; }
        }

        /// <summary>
        /// 删除员工
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        private bool DeleteEmployee(string sEmployeeNO)
        {
            string sSql = "delete Employee where EmployeeNO='" + sEmployeeNO + "'";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 回收员工
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public bool EmployeeIsDelete(string sEmployeeNO, string sIsDelete)
        {
            string sSql = "Update Employee set IsDelete='" + sIsDelete + "' where EmployeeNO='" + sEmployeeNO + "'";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 查询员工
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchEmployee(string sql)
        {
            string sSql = "select DepartmentNO,DepartmentName, EmployeeNO, EmployeeNO2, EmployeePassword, EmployeeName, CardNO, EmployeeSex, EmployeeBirthday, EmployeeLevel, EmployeeDuty, EmployeeDescribe, EmployeePhoto, [Create], CreateDate, IsDelete,EmployeePhone from dbo.v_SearchEmployee where IsDelete = 0  " + sql + " order by EmployeeName";
            return ExecuteDataSet(sSql, "SearchEmployee");
        }

        /// <summary>
        /// 员工编号找部门名称
        /// </summary>
        /// <param name="DepartmentNO"></param>
        /// <returns></returns>
        [WebMethod]
        public string GetTheDepartmentNameByEmployeeNO(string EmployeeNO)
        {
            string sSql = "select DepartmentName from dbo.v_SearchEmployee where EmployeeNO= '" + EmployeeNO + "'";
            return ExecuteSqlToString(sSql);
        }

        /// <summary>
        /// 根据员工编号查询员工
        /// Caijinsong:2012-11-13
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchEmployeeByEmployeeNO(string sEmployeeNO)
        {
            //string sSql = "select DepartmentNO, EmployeeNO,EmployeeNO2, EmployeePassword, EmployeeName, CardNO, EmployeeSex, EmployeeBirthday, EmployeeLevel, EmployeeDuty, EmployeeDescribe, EmployeePhoto, [Create], CreateDate, IsChange, IsDelete from Employee where EmployeeNO2 = '" + sEmployeeNO + "'";
            string sSql = "select DepartmentNO, EmployeeNO,EmployeeNO2, EmployeePassword, EmployeeName, CardNO, EmployeeSex, EmployeeBirthday, EmployeeLevel, EmployeeDuty, EmployeeDescribe, EmployeePhoto, [Create], CreateDate, IsChange, IsDelete,[DepartmentName],[DepartmentManager],[CompanyBM] from [dbo].[V_Employee] where EmployeeNO2 = '" + sEmployeeNO + "'";
            return ExecuteDataSet(sSql, "Employee");
        }
        /// <summary>
        /// 根据员工编号查询员工
        /// zjj2012-05-22
        /// Caijinsong:2012-11-13
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchEmployeeByEmployeeNOTwo(string sEmployeeNO)
        {
            //string sSql = "select DepartmentNO, EmployeeNO,EmployeeNO2, EmployeePassword, EmployeeName, CardNO, EmployeeSex, EmployeeBirthday, EmployeeLevel, EmployeeDuty, EmployeeDescribe, EmployeePhoto, [Create], CreateDate, IsChange, IsDelete from Employee where EmployeeNO = '" + sEmployeeNO + "'";
            string sSql = "select DepartmentNO, EmployeeNO,EmployeeNO2, EmployeePassword, EmployeeName, CardNO, EmployeeSex, EmployeeBirthday, EmployeeLevel, EmployeeDuty, EmployeeDescribe, EmployeePhoto, [Create], CreateDate, IsChange, IsDelete,[DepartmentName],[DepartmentManager],[CompanyBM] from [dbo].[V_Employee] where EmployeeNO = '" + sEmployeeNO + "'";
            return ExecuteDataSet(sSql, "Employee");
        }
        /// <summary>
        /// 根据员工编号查询员工-lao
        /// Caijinsong:2012-11-13
        /// </summary>
        /// <param name="sEmployeeNO"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchEmployeeByEmployeeNO_old(string sEmployeeNO)
        {
            //string sSql = "select DepartmentNO, EmployeeNO,EmployeeNO2, EmployeePassword, EmployeeName, CardNO, EmployeeSex, EmployeeBirthday, EmployeeLevel, EmployeeDuty, EmployeeDescribe, EmployeePhoto, [Create], CreateDate, IsChange, IsDelete from Employee where EmployeeNO = '" + sEmployeeNO + "'";
            string sSql = "select DepartmentNO, EmployeeNO,EmployeeNO2, EmployeePassword, EmployeeName, CardNO, EmployeeSex, EmployeeBirthday, EmployeeLevel, EmployeeDuty, EmployeeDescribe, EmployeePhoto, [Create], CreateDate, IsChange, IsDelete,[DepartmentName],[DepartmentManager],[CompanyBM],EmployeePhone from [dbo].[V_Employee] where EmployeeNO = '" + sEmployeeNO + "'";
            return ExecuteDataSet(sSql, "Employee");
        }
        /// <summary>
        /// 根据员工编号查询员工的职务
        /// creater  njro
        /// create datetime 2012-04-23
        /// </summary>
        /// <param name="sEmployeeNO"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchEmployeeByEmployeePoer(string sEmployeeNO)
        {
            string sSql = @"SELECT     dbo.Config.ConfigValue, dbo.Config.ConfigNO, dbo.Employee.EmployeeNO2
FROM       dbo.Config INNER JOIN
           dbo.Employee ON dbo.Config.ConfigNO = dbo.Employee.EmployeeDuty                      
where EmployeeNO2 = '" + sEmployeeNO + "'";
            return ExecuteDataSet(sSql, "Employee");
        }
        /// <summary>
        /// 查询员工权限
        /// </summary>
        /// <param name="sEmployeeNO"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchUserPower(string sEmployeeNO)
        {
            string sSql = "select * from EmployeePowers where EmployeeNO='" + sEmployeeNO + "' ";
            return ExecuteDataSet(sSql, "EmployeePowers");
        }
        /// <summary>
        /// add by Caijinsong 2015-12-25
        /// </summary>
        /// <param name="EmployeeNO"></param>
        /// <param name="PowerId"></param>
        /// <returns></returns>
        public bool CheckUserPower(string EmployeeNO, int PowerId)
        {
            string sqlString = @"select 1 from UserPower where EmployeeNO='" + EmployeeNO + "' and PowerID=" + PowerId;
            if (!string.IsNullOrEmpty(this.ExecuteSqlToString(sqlString)))
            {
                return true;
            }
            return false;
        }
        /// <summary>
        /// 将2.0的权限升级成2.1的权限
        /// </summary>
        /// <param name="sEmployeeNO"></param>
        /// <param name="sPowerID"></param>
        /// <returns></returns>
        [WebMethod]
        public bool ChangeUserPower(string sEmployeeNO, string sPowerID)
        {
            string sSql = "insert into UserPower (EmployeeNO,PowerID,[Create],CreateDate) Values ('" + sEmployeeNO + "','" + sPowerID + "','admin',getdate()) ";
            return ExecuteSql(sSql);
        }
        #endregion

        #region 客户管理

        /// <summary>
        /// 取当日客户顺序号码
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public string GetCNumber()
        {
            string sSql = "select top 1 CNumber from InCustomers where datediff(dd,SalesDate,getdate())=0 order by CNumber desc ";
            string str = ExecuteSqlToString(sSql);
            int integer = str == "" ? 0 : Int32.Parse(str);
            return string.Format("{0:d4}", integer + 1);
        }

        /// <summary>
        /// 创建客户编号
        /// </summary>
        /// <param name="CustomerNO"></param>
        /// <returns></returns>
        [WebMethod]
        public string CreateNewCustomerNO(string CustomerNO)
        {
            string Sql = "select top 1 right(CustomerNO,4) from InCustomers where CustomerNO like '" + CustomerNO + "%' order BY CustomerNO desc";
            OpenConn();
            SqlCommand myCom = new SqlCommand(Sql, Conn);
            string sRCustomerNO = "0000";
            object obj = myCom.ExecuteScalar();
            if (obj != null)
            {
                sRCustomerNO = obj.ToString();
            }
            int TopCustomerNO = Int32.Parse(sRCustomerNO) + 1;
            CloseConn();
            string NewCustomerNO = CustomerNO + string.Format("{0:d4}", TopCustomerNO);
            return NewCustomerNO;
        }


        /// <summary>
        /// 创建客户编号//////
        /// </summary>
        /// <param name="CustomerNO"></param>
        /// <returns></returns>
        [WebMethod]
        public string CreateNewCustomerNOs(string CustomerNO)
        {
            string Sql = "select top 1 right(CustomerNO,4) from Customers where CustomerNO like '" + CustomerNO + "%' order BY CustomerNO desc";
            OpenConn();
            SqlCommand myCom = new SqlCommand(Sql, Conn);
            string sRCustomerNO = "0000";
            object obj = myCom.ExecuteScalar();
            if (obj != null)
            {
                sRCustomerNO = obj.ToString();
            }
            int TopCustomerNO = Int32.Parse(sRCustomerNO) + 1;
            CloseConn();
            string NewCustomerNO = CustomerNO + string.Format("{0:d4}", TopCustomerNO);
            return NewCustomerNO;
        }

        /// <summary>
        /// 入客管理
        /// </summary>
        /// <param name="CNumber"></param>
        /// <param name="CustomerNO"></param>
        /// <param name="SalesMemory"></param>
        /// <param name="SalesEmployee"></param>
        /// <param name="SalesDate"></param>
        /// <param name="Creater"></param>
        /// <param name="Completed"></param>
        /// <returns></returns>
        [WebMethod]
        public bool SaveInCustomers(string CNumber, string CustomerNO, string SalesMemory, string SalesEmployee, string SalesDate, string Creater, string Completed)
        {
            string sSql = "Insert into InCustomers (CNumber, CustomerNO, SalesMemory, SalesEmployee, SalesDate, Creater, Completed) values ('" + CNumber + "', '" + CustomerNO + "', '" + SalesMemory + "', '" + SalesEmployee + "', '" + SalesDate + "', '" + Creater + "', '" + Completed + "')";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 取当前分配给自己客户编号
        /// </summary>
        /// <param name="Employee"></param>
        /// <returns></returns>
        [WebMethod]
        public string SearchCurrentCustomerNO(string Employee)
        {
            string sSql = "select top 1 CustomerNO from InCustomers where Completed=0 and SalesEmployee='" + Employee + "' order by SalesDate desc";
            return ExecuteSqlToString(sSql);
        }

        /// <summary>
        /// 改变入客表状态
        /// </summary>
        /// <param name="CustomerNO"></param>
        /// <param name="Completed"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateInCustomerCompleted(string CustomerNO, string Completed)
        {
            string sSql = "update InCustomers set Completed='" + Completed + "' where CustomerNO='" + CustomerNO + "' ";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 增加客户
        /// Caijinsong:2012-11-14
        /// </summary>
        /// <param name="sEmployeeNO"></param>
        /// <returns></returns>
        [WebMethod]
        public bool SaveCustomer(string sCustomerNO, string sCardType, string sCardNO, string sIntroducerType, string sIntroducerCardNO, string sCustomerName1, string sBirthdayYear1, string sBirthdayDay1, string sBirthdayMonth1, string sTheGregorianCalendar1, string sMobilePhone1, string sMobilePhoneIsLose1, string sTelephone1, string sTelephoneIsLose1, string sQQ_MSN1, string sEmail1, string sJob1, string sJobName1, string sAddress1, string sZipCode1, string sCustomerName2, string sBirthdayYear2, string sBirthdayDay2, string sBirthdayMonth2, string sTheGregorianCalendar2, string sMobilePhone2, string sMobilePhoneIsLose2, string sTelephone2, string sTelephoneIsLose2, string sQQ_MSN2, string sEmail2, string sJob2, string sJobName2, string sAddress2, string sZipCode2, string sIsLetterAddress, string sMarryDate, string sMarryDate2, string sCustomerSource, string sCustomerSourceName, string sImformationSource, string sImformationSourceName, string sWishRecommend, string sWishRecommendName, string sCustomerMemory, string sCreateDepartment, string sCreateDepartmentName, string sCreateEmployee, string sCreateEmployeeName, string sCreateDate, string sIsDelete, string sAddress, string sZipCode, string sCustomerState, string sIsEnableAddress, string n_address1, string n_address2, string n_address3, string v_address1, string v_address2, string v_address3, string CompanyBM)
        {

            //string sSql = "Insert into Customers (CustomerNO, CardType, CardNO, IntroducerType, IntroducerCardNO, CustomerName1, BirthdayYear1, BirthdayDay1, BirthdayMonth1, TheGregorianCalendar1, MobilePhone1, MobilePhoneIsLose1, Telephone1, TelephoneIsLose1, QQ_MSN1, Email1,Job1, Address1, ZipCode1, CustomerName2, BirthdayYear2, BirthdayDay2, BirthdayMonth2, TheGregorianCalendar2, MobilePhone2, MobilePhoneIsLose2, Telephone2, TelephoneIsLose2, QQ_MSN2, Email2,Job2, Address2, ZipCode2,IsLetterAddress, MarryDate, CustomerSource, ImformationSource, WishRecommend, CustomerMemory, CreateDepartment, CreateEmployee, CreateDate, CustomerState, IsDelete,N_Address_1,N_Address_2,N_Address_3,V_Address_1,V_Address_2,V_Address_3) Values ('" + sCustomerNO + "', '" + sCardType + "', '" + sCardNO + "','" + sIntroducerType + "', '" + sIntroducerCardNO + "', '" + sCustomerName1 + "', '" + sBirthdayYear1 + "', '" + sBirthdayDay1 + "', '" + sBirthdayMonth1 + "', '" + sTheGregorianCalendar1 + "', '" + sMobilePhone1 + "', '" + sMobilePhoneIsLose1 + "', '" + sTelephone1 + "', '" + sTelephoneIsLose1 + "', '" + sQQ_MSN1 + "', '" + sEmail1 + "','" + sJob1 + "', '" + sAddress1 + "', '" + sZipCode1 + "', '" + sCustomerName2 + "', '" + sBirthdayYear2 + "', '" + sBirthdayDay2 + "', '" + sBirthdayMonth2 + "', '" + sTheGregorianCalendar2 + "', '" + sMobilePhone2 + "', '" + sMobilePhoneIsLose2 + "', '" + sTelephone2 + "', '" + sTelephoneIsLose2 + "', '" + sQQ_MSN2 + "', '" + sEmail2 + "','" + sJob2 + "', '" + sAddress2 + "', '" + sZipCode2 + "','" + sIsLetterAddress + "', '" + sMarryDate + "', '" + sCustomerSource + "', '" + sImformationSource + "', '" + sWishRecommend + "','" + sCustomerMemory + "', '" + sCreateDepartment + "', '" + sCreateEmployee + "', '" + sCreateDate + "','" + sCustomerState + "', '" + sIsDelete + "','" + n_address1 + "','" + n_address2 + "','" + n_address3 + "','" + v_address1 + "','" + v_address2 + "','" + v_address3 + "') Insert into Letters (CustomerNO,Address,ZipCode,IsEnableAddress) values ('" + sCustomerNO + "','" + sAddress + "','" + sZipCode + "','" + sIsEnableAddress + "') ";
            string sSql = "Insert into Customers (CustomerNO, CardType, CardNO, IntroducerType, IntroducerCardNO, CustomerName1, BirthdayYear1, BirthdayDay1, BirthdayMonth1, TheGregorianCalendar1, MobilePhone1, MobilePhoneIsLose1, Telephone1, TelephoneIsLose1, QQ_MSN1, Email1,Job1,JobName1, Address1, ZipCode1, CustomerName2, BirthdayYear2, BirthdayDay2, BirthdayMonth2, TheGregorianCalendar2, MobilePhone2, MobilePhoneIsLose2, Telephone2, TelephoneIsLose2, QQ_MSN2, Email2,Job2,JobName2, Address2, ZipCode2,IsLetterAddress, MarryDate, MarryDate2, CustomerSource,CustomerSourceName, ImformationSource,ImformationSourceName, WishRecommend,WishRecommendName, CustomerMemory, CreateDepartment,CreateDepartmentName, CreateEmployee,CreateEmployeeName, CreateDate, CustomerState, IsDelete,N_Address_1,N_Address_2,N_Address_3,V_Address_1,V_Address_2,V_Address_3,CompanyBM) Values ('" + sCustomerNO + "', '" + sCardType + "', '" + sCardNO + "','" + sIntroducerType + "', '" + sIntroducerCardNO + "', '" + sCustomerName1 + "', '" + sBirthdayYear1 + "', '" + sBirthdayDay1 + "', '" + sBirthdayMonth1 + "', '" + sTheGregorianCalendar1 + "', '" + sMobilePhone1 + "', '" + sMobilePhoneIsLose1 + "', '" + sTelephone1 + "', '" + sTelephoneIsLose1 + "', '" + sQQ_MSN1 + "', '" + sEmail1 + "','" + sJob1 + "','" + sJobName1 + "', '" + sAddress1 + "', '" + sZipCode1 + "', '" + sCustomerName2 + "', '" + sBirthdayYear2 + "', '" + sBirthdayDay2 + "', '" + sBirthdayMonth2 + "', '" + sTheGregorianCalendar2 + "', '" + sMobilePhone2 + "', '" + sMobilePhoneIsLose2 + "', '" + sTelephone2 + "', '" + sTelephoneIsLose2 + "', '" + sQQ_MSN2 + "', '" + sEmail2 + "','" + sJob2 + "','" + sJobName2 + "', '" + sAddress2 + "', '" + sZipCode2 + "','" + sIsLetterAddress + "', '" + sMarryDate + "', '" + sMarryDate2 + "','" + sCustomerSource + "','" + sCustomerSourceName + "', '" + sImformationSource + "', '" + sImformationSourceName + "', '" + sWishRecommend + "', '" + sWishRecommendName + "','" + sCustomerMemory + "', '" + sCreateDepartment + "', '" + sCreateDepartmentName + "', '" + sCreateEmployee + "', '" + sCreateEmployeeName + "', '" + sCreateDate + "','" + sCustomerState + "', '" + sIsDelete + "','" + n_address1 + "','" + n_address2 + "','" + n_address3 + "','" + v_address1 + "','" + v_address2 + "','" + v_address3 + "','" + CompanyBM + "') Insert into Letters (CustomerNO,Address,ZipCode,IsEnableAddress) values ('" + sCustomerNO + "','" + sAddress + "','" + sZipCode + "','" + sIsEnableAddress + "') ";
            return ExecuteSql(sSql);
        }

        ///// <summary>
        ///// 更新客户
        ///// </summary>
        ///// <param name="sEmployeeNO"></param>
        ///// <returns></returns>
        //[WebMethod]
        //public bool UpdateCustomer(string sCustomerNO, string sCardType, string sCardNO, string sIntroducerType, string sIntroducerCardNO, string sCustomerName1, string sBirthdayYear1, string sBirthdayDay1, string sBirthdayMonth1, string sTheGregorianCalendar1, string sMobilePhone1, string sMobilePhoneIsLose1, string sTelephone1, string sTelephoneIsLose1, string sQQ_MSN1, string sEmail1, string sJob1, string sAddress1, string sZipCode1, string sCustomerName2, string sBirthdayYear2, string sBirthdayDay2, string sBirthdayMonth2, string sTheGregorianCalendar2, string sMobilePhone2, string sMobilePhoneIsLose2, string sTelephone2, string sTelephoneIsLose2, string sQQ_MSN2, string sEmail2, string sJob2, string sAddress2, string sZipCode2, string sIsLetterAddress, string sMarryDate, string sCustomerSource, string sImformationSource, string sWishRecommend, string sCustomerMemory, string sCreateDepartment, string sCreateEmployee, string sCreateDate, string sIsDelete, string sAddress, string sZipCode, string sCustomerState, string sIsEnableAddress)
        //{

        //    string sSql = "Update Customers set  CardType='" + sCardType + "', CardNO='" + sCardNO + "',IntroducerType='" + sIntroducerType + "', IntroducerCardNO='" + sIntroducerCardNO + "', CustomerName1='" + sCustomerName1 + "', BirthdayYear1='" + sBirthdayYear1 + "', BirthdayDay1='" + sBirthdayDay1 + "', BirthdayMonth1='" + sBirthdayMonth1 + "', TheGregorianCalendar1= '" + sTheGregorianCalendar1 + "', MobilePhone1='" + sMobilePhone1 + "', MobilePhoneIsLose1='" + sMobilePhoneIsLose1 + "', Telephone1='" + sTelephone1 + "', TelephoneIsLose1='" + sTelephoneIsLose1 + "', QQ_MSN1='" + sQQ_MSN1 + "', Email1='" + sEmail1 + "',Job1='" + sJob1 + "', Address1='" + sAddress1 + "', ZipCode1='" + sZipCode1 + "', CustomerName2='" + sCustomerName2 + "', BirthdayYear2='" + sBirthdayYear2 + "', BirthdayDay2='" + sBirthdayDay2 + "', BirthdayMonth2='" + sBirthdayMonth2 + "', TheGregorianCalendar2='" + sTheGregorianCalendar2 + "', MobilePhone2='" + sMobilePhone2 + "', MobilePhoneIsLose2='" + sMobilePhoneIsLose2 + "', Telephone2='" + sTelephone2 + "', TelephoneIsLose2='" + sTelephoneIsLose2 + "', QQ_MSN2='" + sQQ_MSN2 + "', Email2='" + sEmail2 + "',Job2='" + sJob2 + "', Address2='" + sAddress2 + "', ZipCode2='" + sZipCode2 + "', IsLetterAddress='" + sIsLetterAddress + "', MarryDate='" + sMarryDate + "', CustomerSource='" + sCustomerSource + "', ImformationSource='" + sImformationSource + "', WishRecommend='" + sWishRecommend + "', CustomerMemory='" + sCustomerMemory + "', CreateDepartment='" + sCreateDepartment + "',CustomerState='" + sCustomerState + "',  IsDelete='" + sIsDelete + "' where CustomerNO='" + sCustomerNO + "' if exists(select * from Letters where CustomerNO='" + sCustomerNO + "') Update Letters set Address='" + sAddress + "',ZipCode='" + sZipCode + "', IsEnableAddress='" + sIsEnableAddress + "' where CustomerNO='" + sCustomerNO + "' else Insert into Letters (CustomerNO,Address,ZipCode,IsEnableAddress) values ('" + sCustomerNO + "','" + sAddress + "','" + sZipCode + "','" + sIsEnableAddress + "') ";
        //    return ExecuteSql(sSql);
        //}


        /// <summary>
        /// 更新客户
        /// </summary>
        /// <param name="sEmployeeNO"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateCustomer(string sCustomerNO, string sCardType, string sCardNO, string sIntroducerType, string sIntroducerCardNO, string sCustomerName1, string sBirthdayYear1, string sBirthdayDay1, string sBirthdayMonth1, string sTheGregorianCalendar1, string sMobilePhone1, string sMobilePhoneIsLose1, string sTelephone1, string sTelephoneIsLose1, string sQQ_MSN1, string sEmail1, string sJob1, string sJobName1, string sAddress1, string sZipCode1, string sCustomerName2, string sBirthdayYear2, string sBirthdayDay2, string sBirthdayMonth2, string sTheGregorianCalendar2, string sMobilePhone2, string sMobilePhoneIsLose2, string sTelephone2, string sTelephoneIsLose2, string sQQ_MSN2, string sEmail2, string sJob2, string sJobName2, string sAddress2, string sZipCode2, string sIsLetterAddress, string sMarryDate, string sMarryDate2, string sCustomerSource, string sCustomerSourceName, string sImformationSource, string sImformationSourceName, string sWishRecommend, string sWishRecommendName, string sCustomerMemory, string sCreateDepartment, string sCreateDepartmentName, string sCreateEmployee, string sCreateEmployeeName, string sCreateDate, string sIsDelete, string sAddress, string sZipCode, string sCustomerState, string sIsEnableAddress, string n_address1, string n_address2, string n_address3, string v_address1, string v_address2, string v_address3)
        {

            string sSql = "Update Customers set  CardType='" + sCardType + "', CardNO='" + sCardNO + "',IntroducerType='" + sIntroducerType + "', IntroducerCardNO='" + sIntroducerCardNO + "', CustomerName1='" + sCustomerName1 + @"',
BirthdayYear1='" + sBirthdayYear1 + "', BirthdayDay1='" + sBirthdayDay1 + "', BirthdayMonth1='" + sBirthdayMonth1 + "', TheGregorianCalendar1= '" + sTheGregorianCalendar1 + "', MobilePhone1='" + sMobilePhone1 + @"', 
MobilePhoneIsLose1='" + sMobilePhoneIsLose1 + "', Telephone1='" + sTelephone1 + "', TelephoneIsLose1='" + sTelephoneIsLose1 + "', QQ_MSN1='" + sQQ_MSN1 + "', Email1='" + sEmail1 + "',Job1='" + sJob1 + "',JobName1='" + sJobName1 + @"',
Address1='" + sAddress1 + "', ZipCode1='" + sZipCode1 + "', CustomerName2='" + sCustomerName2 + "', BirthdayYear2='" + sBirthdayYear2 + "', BirthdayDay2='" + sBirthdayDay2 + @"',
BirthdayMonth2='" + sBirthdayMonth2 + "', TheGregorianCalendar2='" + sTheGregorianCalendar2 + "', MobilePhone2='" + sMobilePhone2 + "', MobilePhoneIsLose2='" + sMobilePhoneIsLose2 + @"', 
Telephone2='" + sTelephone2 + "', TelephoneIsLose2='" + sTelephoneIsLose2 + "', QQ_MSN2='" + sQQ_MSN2 + "', Email2='" + sEmail2 + "',Job2='" + sJob2 + "',JobName2='" + sJobName2 + @"',
Address2='" + sAddress2 + "', ZipCode2='" + sZipCode2 + "', IsLetterAddress='" + sIsLetterAddress + "', MarryDate='" + sMarryDate + "', MarryDate2='" + sMarryDate2 + "',CustomerSource='" + sCustomerSource + "',CustomerSourceName='" + sCustomerSourceName + @"', 
ImformationSource='" + sImformationSource + "',ImformationSourceName='" + sImformationSourceName + "', WishRecommend='" + sWishRecommend + "', WishRecommendName='" + sWishRecommendName + "', CustomerMemory='" + sCustomerMemory + @"',
CustomerState='" + sCustomerState + "',  IsDelete='" + sIsDelete + @"',
          Customers.N_Address_1='" + n_address1 + "',Customers.N_Address_2='" + n_address2 + "',Customers.N_Address_3='" + n_address3 + "',Customers.v_Address_1='" + v_address1 + "',Customers.v_Address_2='" + v_address2 + "',Customers.v_Address_3='" + v_address3 + "'  where CustomerNO='" + sCustomerNO + @"' if exists(select * from Letters where CustomerNO='" + sCustomerNO + "') Update Letters set Address='" + sAddress + "',ZipCode='" + sZipCode + "', IsEnableAddress='" + sIsEnableAddress + "' where CustomerNO='" + sCustomerNO + "' else Insert into Letters (CustomerNO,Address,ZipCode,IsEnableAddress) values ('" + sCustomerNO + "','" + sAddress + "','" + sZipCode + "','" + sIsEnableAddress + "') ";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 订单合并
        /// </summary>
        /// <param name="CombineNO"></param>
        /// <param name="CustomerNO"></param>
        /// <returns></returns>
        public bool CombineCustomerNO(string CombineNO, string CustomerNO)
        {
            string sSql = "Update Orders set CustomerNo = '" + CombineNO + "' where CustomerNO = '" + CustomerNO + "';";
            return ExecuteSql(sSql);
        }


        /// <summary>
        /// 删除客人
        /// </summary>
        /// <param name="sCustomerNO"></param>
        /// <returns></returns>
        [WebMethod]
        public bool DeleteCustomers(string[] sCustomerNO)
        {
            string sSql = "";
            for (int i = 0; i < sCustomerNO.Length; i++)
            {
                //sSql += "Delete Customers where CustomerNO='" + sCustomerNO[i] + "' ";
                sSql += "Update Customers set IsDelete=1 where CustomerNO='" + sCustomerNO[i] + "'";//zjj2012-02-09修改
            }
            return ExecuteSql(sSql);
        }

        public bool DelCard(string CustomerNO)
        {
            string sql = "update Customers set CardNO = '' where CustomerNO = '" + CustomerNO + "'";
            return ExecuteSql(sql);
        }

        /// <summary>
        /// 查询客户1
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchCustomer(string sSql)
        {
            DataSet myds = new DataSet();
            try
            {
                OpenConn();
                string Sql = "select * from dbo.v_SearchCustomer where 1=1 " + sSql;
                SqlDataAdapter myda = new SqlDataAdapter(Sql, Conn);
                myda.Fill(myds, "v_Customers");
                CloseConn();
                return myds;
            }
            catch
            {
                return myds;
            }
        }

        /// <summary>
        /// 查询客户2
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchCustomers(string sql)
        {
            //string sSql = "select distinct CustomerNO, CardType, CardNO, IntroducerCardNO, CustomerName1, Birthday1, TheGregorianCalendar1, MobilePhone1, MobilePhoneIsLose1, Telephone1, TelephoneIsLose1, QQ_MSN1, Email1, Job1, Address1, ZipCode1, CustomerName2, Birthday2, TheGregorianCalendar2, MobilePhone2, MobilePhoneIsLose2, Telephone2, TelephoneIsLose2, QQ_MSN2, Email2, Job2, Address2, ZipCode2, MarryDate, CustomerSource, ImforMationSource, WishRecommend, CreateEmployee, CreateDate,sum(RepayNumber) as RepayNumber from dbo.VIEW_Customers where (CustomerName1<>'' or CustomerName2<>'')" + sql + " Group by CustomerNO, CardType, CardNO, IntroducerCardNO, CustomerName1, Birthday1, TheGregorianCalendar1, MobilePhone1, MobilePhoneIsLose1, Telephone1, TelephoneIsLose1, QQ_MSN1, Email1, Job1, Address1, ZipCode1, CustomerName2, Birthday2, TheGregorianCalendar2, MobilePhone2, MobilePhoneIsLose2, Telephone2, TelephoneIsLose2, QQ_MSN2, Email2, Job2, Address2, ZipCode2, MarryDate, CustomerSource, ImforMationSource, WishRecommend, CreateEmployee, CreateDate order by CreateDate";
            string sSql = "select distinct CustomerNO, CardType, CardNO, IntroducerCardNO, CustomerName1, Birthday1,case when TheGregorianCalendar1=0 then '否' else '是' end as 'TheGregorianCalendar1', MobilePhone1, case when MobilePhoneIsLose1=0 then '否' else '是' end as 'MobilePhoneIsLose1', Telephone1,  case when TelephoneIsLose1=0 then '否' else '是' end as 'TelephoneIsLose1', QQ_MSN1, Email1, Job1, (VIEW_Customers.N_Address_1+VIEW_Customers.N_Address_2+VIEW_Customers.N_Address_3+address1) as Address1, ZipCode1, CustomerName2, Birthday2,case when TheGregorianCalendar2=0 then '否' else '是' end as 'TheGregorianCalendar2', MobilePhone2, case when MobilePhoneIsLose2=0 then '否' else '是' end as 'MobilePhoneIsLose2', Telephone2,case when TelephoneIsLose2=0 then '否' else '是' end as 'TelephoneIsLose2', QQ_MSN2, Email2, Job2, (VIEW_Customers.V_Address_1+VIEW_Customers.V_Address_2+VIEW_Customers.V_Address_3+Address2) as Address2, ZipCode2, MarryDate, MarryDate2, CustomerSource, ImforMationSource, WishRecommend, CreateEmployee, CreateDate,sum(RepayNumber)  as RepayNumber from dbo.VIEW_Customers where (CustomerName1<>'' or CustomerName2<>'') and IsDelete=0" + sql + " Group by CustomerNO, CardType, CardNO, IntroducerCardNO, CustomerName1, Birthday1, TheGregorianCalendar1, MobilePhone1, MobilePhoneIsLose1, Telephone1, TelephoneIsLose1, QQ_MSN1, Email1, Job1, Address1, ZipCode1, CustomerName2, Birthday2, TheGregorianCalendar2, MobilePhone2, MobilePhoneIsLose2, Telephone2, TelephoneIsLose2, QQ_MSN2, Email2, Job2, Address2, ZipCode2, MarryDate,MarryDate2, CustomerSource, ImforMationSource, WishRecommend, CreateEmployee, CreateDate ,N_Address_1,N_Address_2,N_Address_3,v_Address_1,v_Address_2,v_Address_3 order by CreateDate";//zjj2012-03-22
            return ExecuteDataSet(sSql, "Customers");
        }

        /// <summary>
        /// 检查当前卡号是否被使用
        /// </summary>
        /// <param name="sCardNO"></param>
        /// <returns></returns>
        [WebMethod]
        public bool CardNOIsAlive(string sCardNO)
        {
            string sSql = "select CardNO from VIPCard where CardNO='" + sCardNO + "'";
            return ExecuteSqlToString(sSql) != "";
        }

        /// <summary>
        /// 保存用卡记录
        /// </summary>
        /// <param name="sCustomerNO">客户号</param>
        /// <param name="sCardNO">卡号</param>
        /// <param name="sCreater">经办人</param>
        /// <param name="sCreateDate">办理时间</param>
        /// <returns></returns>
        [WebMethod]
        public bool SaveCustomerCardNO(string sCustomerNO, string sCardNO, string sCreater, string sCreateDate)
        {
            string sSql = "";
            sSql += "Update VIPCard set CardState='失效' where CustomerNO='" + sCustomerNO + "' ";
            sSql += "Insert into VIPCard (CustomerNO,CardNO,CardState,Creater,CreateDate) values ('" + sCustomerNO + "','" + sCardNO + "','正常','" + sCreater + "','" + sCreateDate + "') ";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 查询客户卡使用记录
        /// </summary>
        /// <param name="sCustomerNO"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchCustomerCardNO(string sCustomerNO)
        {
            string sSql = "select CardNO,CardState,Creater,CreateDate from VIPCard where CustomerNO='" + sCustomerNO + "' order by CreateDate desc";
            return ExecuteDataSet(sSql, "VIPCard");
        }

        /// <summary>
        /// 删除用卡记录
        /// </summary>
        /// <param name="sCardNO">会员卡</param>
        /// <returns></returns>
        [WebMethod]
        public bool DeleteCustomerCardNO(string sCardNO)
        {
            string sSql = "Delete from VIPCard where CardNO='" + sCardNO + "'";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 保存流失客户
        /// </summary>
        /// <param name="sCustomerNO"></param>
        /// <param name="sCustomerName1"></param>
        /// <param name="sBirthdayYear1"></param>
        /// <param name="sBirthdayDay1"></param>
        /// <param name="sBirthdayMonth1"></param>
        /// <param name="sTheGregorianCalendar1"></param>
        /// <param name="sMobilePhone1"></param>
        /// <param name="sMobilePhoneIsLose1"></param>
        /// <param name="sTelephone1"></param>
        /// <param name="sTelephoneIsLose1"></param>
        /// <param name="sQQ_MSN1"></param>
        /// <param name="sEmail1"></param>
        /// <param name="sJob1"></param>
        /// <param name="sAddress1"></param>
        /// <param name="sZipCode1"></param>
        /// <param name="sCustomerName2"></param>
        /// <param name="sBirthdayYear2"></param>
        /// <param name="sBirthdayDay2"></param>
        /// <param name="sBirthdayMonth2"></param>
        /// <param name="sTheGregorianCalendar2"></param>
        /// <param name="sMobilePhone2"></param>
        /// <param name="sMobilePhoneIsLose2"></param>
        /// <param name="sTelephone2"></param>
        /// <param name="sTelephoneIsLose2"></param>
        /// <param name="sQQ_MSN2"></param>
        /// <param name="sEmail2"></param>
        /// <param name="sJob2"></param>
        /// <param name="sAddress2"></param>
        /// <param name="sZipCode2"></param>
        /// <param name="sCreateDepartment"></param>
        /// <param name="sCreateEmployee"></param>
        /// <param name="sCreateDate"></param>
        /// <param name="sIsDelete"></param>
        /// <param name="sCustomerState"></param>
        /// <param name="sLossContent"></param>
        /// <param name="sTrackDate"></param>
        /// <returns></returns>
        [WebMethod]
        public bool SaveLossCustomer(string sCustomerNO, string sCustomerName1, string sBirthdayYear1, string sBirthdayDay1, string sBirthdayMonth1, string sTheGregorianCalendar1, string sMobilePhone1, string sMobilePhoneIsLose1, string sTelephone1, string sTelephoneIsLose1, string sQQ_MSN1, string sEmail1, string sJob1, string sAddress1, string sZipCode1, string sCustomerName2, string sBirthdayYear2, string sBirthdayDay2, string sBirthdayMonth2, string sTheGregorianCalendar2, string sMobilePhone2, string sMobilePhoneIsLose2, string sTelephone2, string sTelephoneIsLose2, string sQQ_MSN2, string sEmail2, string sJob2, string sAddress2, string sZipCode2, string sCreateDepartment, string sCreateEmployee, string sCreateDate, string sIsDelete, string sCustomerState, string sLossContent, string sTrackDate, string sHandler)
        {

            string sSql = "Insert into Customers (CustomerNO, CustomerName1, BirthdayYear1, BirthdayDay1, BirthdayMonth1, TheGregorianCalendar1, MobilePhone1, MobilePhoneIsLose1, Telephone1, TelephoneIsLose1, QQ_MSN1, Email1,Job1, Address1, ZipCode1, CustomerName2, BirthdayYear2, BirthdayDay2, BirthdayMonth2, TheGregorianCalendar2, MobilePhone2, MobilePhoneIsLose2, Telephone2, TelephoneIsLose2, QQ_MSN2, Email2,Job2, Address2, ZipCode2, CreateDepartment, CreateEmployee, CreateDate, CustomerState, IsDelete) Values ('" + sCustomerNO + "', '" + sCustomerName1 + "', '" + sBirthdayYear1 + "', '" + sBirthdayDay1 + "', '" + sBirthdayMonth1 + "', '" + sTheGregorianCalendar1 + "', '" + sMobilePhone1 + "', '" + sMobilePhoneIsLose1 + "', '" + sTelephone1 + "', '" + sTelephoneIsLose1 + "', '" + sQQ_MSN1 + "', '" + sEmail1 + "','" + sJob1 + "', '" + sAddress1 + "', '" + sZipCode1 + "', '" + sCustomerName2 + "', '" + sBirthdayYear2 + "', '" + sBirthdayDay2 + "', '" + sBirthdayMonth2 + "', '" + sTheGregorianCalendar2 + "', '" + sMobilePhone2 + "', '" + sMobilePhoneIsLose2 + "', '" + sTelephone2 + "', '" + sTelephoneIsLose2 + "', '" + sQQ_MSN2 + "', '" + sEmail2 + "','" + sJob2 + "', '" + sAddress2 + "', '" + sZipCode2 + "', '" + sCreateDepartment + "', '" + sCreateEmployee + "', '" + sCreateDate + "','" + sCustomerState + "', '" + sIsDelete + "') Insert into LossImformation (CustomerNO,LossContent,TrackDate,Handler) values ('" + sCustomerNO + "','" + sLossContent + "','" + sTrackDate + "','" + sHandler + "') ";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 更新流失客
        /// </summary>
        /// <param name="sCustomerNO"></param>
        /// <param name="sCustomerName1"></param>
        /// <param name="sBirthdayYear1"></param>
        /// <param name="sBirthdayDay1"></param>
        /// <param name="sBirthdayMonth1"></param>
        /// <param name="sTheGregorianCalendar1"></param>
        /// <param name="sMobilePhone1"></param>
        /// <param name="sMobilePhoneIsLose1"></param>
        /// <param name="sTelephone1"></param>
        /// <param name="sTelephoneIsLose1"></param>
        /// <param name="sQQ_MSN1"></param>
        /// <param name="sEmail1"></param>
        /// <param name="sJob1"></param>
        /// <param name="sAddress1"></param>
        /// <param name="sZipCode1"></param>
        /// <param name="sCustomerName2"></param>
        /// <param name="sBirthdayYear2"></param>
        /// <param name="sBirthdayDay2"></param>
        /// <param name="sBirthdayMonth2"></param>
        /// <param name="sTheGregorianCalendar2"></param>
        /// <param name="sMobilePhone2"></param>
        /// <param name="sMobilePhoneIsLose2"></param>
        /// <param name="sTelephone2"></param>
        /// <param name="sTelephoneIsLose2"></param>
        /// <param name="sQQ_MSN2"></param>
        /// <param name="sEmail2"></param>
        /// <param name="sJob2"></param>
        /// <param name="sAddress2"></param>
        /// <param name="sZipCode2"></param>
        /// <param name="sCreateDepartment"></param>
        /// <param name="sCreateEmployee"></param>
        /// <param name="sCreateDate"></param>
        /// <param name="sIsDelete"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateLossCustomer(string sCustomerNO, string sCustomerName1, string sBirthdayYear1, string sBirthdayDay1, string sBirthdayMonth1, string sTheGregorianCalendar1, string sMobilePhone1, string sMobilePhoneIsLose1, string sTelephone1, string sTelephoneIsLose1, string sQQ_MSN1, string sEmail1, string sJob1, string sAddress1, string sZipCode1, string sCustomerName2, string sBirthdayYear2, string sBirthdayDay2, string sBirthdayMonth2, string sTheGregorianCalendar2, string sMobilePhone2, string sMobilePhoneIsLose2, string sTelephone2, string sTelephoneIsLose2, string sQQ_MSN2, string sEmail2, string sJob2, string sAddress2, string sZipCode2, string sCreateDepartment, string sCreateEmployee, string sCreateDate, string sIsDelete, string sCustomerState, string sLossContent, string sTrackDate, string sHandler)
        {

            string sSql = "Update Customers set  CustomerName1='" + sCustomerName1 + "', BirthdayYear1='" + sBirthdayYear1 + "', BirthdayDay1='" + sBirthdayDay1 + "', BirthdayMonth1='" + sBirthdayMonth1 + "', TheGregorianCalendar1= '" + sTheGregorianCalendar1 + "', MobilePhone1='" + sMobilePhone1 + "', MobilePhoneIsLose1='" + sMobilePhoneIsLose1 + "', Telephone1='" + sTelephone1 + "', TelephoneIsLose1='" + sTelephoneIsLose1 + "', QQ_MSN1='" + sQQ_MSN1 + "', Email1='" + sEmail1 + "',Job1='" + sJob1 + "', Address1='" + sAddress1 + "', ZipCode1='" + sZipCode1 + "', CustomerName2='" + sCustomerName2 + "', BirthdayYear2='" + sBirthdayYear2 + "', BirthdayDay2='" + sBirthdayDay2 + "', BirthdayMonth2='" + sBirthdayMonth2 + "', TheGregorianCalendar2='" + sTheGregorianCalendar2 + "', MobilePhone2='" + sMobilePhone2 + "', MobilePhoneIsLose2='" + sMobilePhoneIsLose2 + "', Telephone2='" + sTelephone2 + "', TelephoneIsLose2='" + sTelephoneIsLose2 + "', QQ_MSN2='" + sQQ_MSN2 + "', Email2='" + sEmail2 + "',Job2='" + sJob2 + "', Address2='" + sAddress2 + "', ZipCode2='" + sZipCode2 + "', CreateDepartment='" + sCreateDepartment + "',CustomerState='" + sCustomerState + "',  IsDelete='" + sIsDelete + "' where CustomerNO='" + sCustomerNO + "' Update LossImformation set LossContent='" + sLossContent + "',TrackDate='" + sTrackDate + "',Handler='" + sHandler + "' where CustomerNO='" + sCustomerNO + "' ";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 查询流失客户
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public DataSet LossCustomersSearch(string sSql)
        {
            DataSet myds = new DataSet();
            try
            {
                OpenConn();
                string Sql = "select CustomerNO, CustomerName1, Birthday1, TheGregorianCalendar1, MobilePhone1, MobilePhoneIsLose1, Telephone1, TelephoneIsLose1, QQ_MSN1, Email1, Job1, Address1, ZipCode1, CustomerName2, Birthday2, TheGregorianCalendar2, MobilePhone2, MobilePhoneIsLose2, Telephone2, TelephoneIsLose2, QQ_MSN2, Email2, Job2, Address2, ZipCode2, LossContent, TrackDate, CreateEmployee, CreateDate,BirthdayYear1, BirthdayDay1, BirthdayMonth1, BirthdayYear2, BirthdayDay2,Handler, BirthdayMonth2 from dbo.v_LossCustomerSearch where 1=1 " + sSql;
                SqlDataAdapter myda = new SqlDataAdapter(Sql, Conn);
                myda.Fill(myds, "LossCustomers");
                CloseConn();
                return myds;
            }
            catch
            {
                return myds;
            }
        }

        /// <summary>
        /// 客户积分汇总查询
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchCustomeAccumulaterTotal(string sCustomerNO)
        {
            DataSet myds = new DataSet();
            try
            {
                OpenConn();
                string sSql = "select A.CustomerNO,(select IsNull(sum(Accumulate),0) from Accumulate where CustomerNO=A.CustomerNO and IsNull(Accumulate,0)>=0) as TotalAccumulate,(select IsNull(sum(Accumulate),0) from Accumulate where CustomerNO=A.CustomerNO and IsNull(Accumulate,0)<0) as UseredAccumulate,IsNull(sum(A.Accumulate),0) as RemainderAccumulate from Accumulate A where CustomerNO='" + sCustomerNO + "' group by A.CustomerNO";
                SqlDataAdapter myda = new SqlDataAdapter(sSql, Conn);
                myda.Fill(myds, "AccumulaterTotal");
                CloseConn();
                return myds;
            }
            catch
            {
                return myds;
            }
        }

        /// <summary>
        /// 客户积分明细查询
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchCustomeAccumulaterDetail(string sCustomerNO)
        {
            DataSet myds = new DataSet();
            try
            {
                OpenConn();
                string sSql = "select * from Accumulate where CustomerNO = '" + sCustomerNO + "'";
                SqlDataAdapter myda = new SqlDataAdapter(sSql, Conn);
                myda.Fill(myds, "Accumulate");
                CloseConn();
                return myds;
            }
            catch
            {
                return myds;
            }
        }

        /// <summary>
        /// 保存介绍回馈信息
        /// </summary>
        /// <param name="sIntroducerCustomerNO"></param>
        /// <param name="sCustomerNO"></param>
        /// <param name="sRepayType"></param>
        /// <param name="sRepayWay"></param>
        /// <param name="sRepayNumber"></param>
        /// <param name="sRepayMemory"></param>
        /// <param name="sIsRepay"></param>
        /// <param name="sRNumber"></param>
        /// <param name="sRepayEnableDate"></param>
        /// <param name="sRepayDate"></param>
        /// <param name="sResponsible"></param>
        /// <param name="sOption"></param>
        /// <returns></returns>
        [WebMethod]
        public bool SaveIntroducerRepay(string sIntroducerCustomerNO, string sCustomerNO, string sRNumber, string sRepayEnableDate, string sOption)
        {
            string sSql = "";
            if (sOption == "NEW")
            {
                sSql = "Insert into IntroducerRepay (IntroducerCustomerNO, CustomerNO, RNumber,IsRepay, RepayEnableDate) values ('" + sIntroducerCustomerNO + "','" + sCustomerNO + "', '" + sRNumber + "','0', '" + sRepayEnableDate + "')";

            }
            else if (sOption == "EDIT")
            {
                sSql = "Update IntroducerRepay set IntroducerCustomerNO='" + sIntroducerCustomerNO + "' where CustomerNO='" + sCustomerNO + "' ";
            }
            else if (sOption == "DELETE")
            {
                sSql = "Delete IntroducerRepay where CustomerNO='" + sCustomerNO + "' ";
            }
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 领取回馈
        /// </summary>
        /// <param name="sIntroducerCustomerNO"></param>
        /// <param name="sCustomerNO"></param>
        /// <param name="sRepayNumber"></param>
        /// <param name="sIsRepay"></param>
        /// <param name="sRepayDate"></param>
        /// <param name="sRepayMemory"></param>
        /// <param name="sResponsible"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateIntroducerRepay(string sIntroducerCustomerNO, string sCustomerNO, string sRepayWay, string sRepayNumber, string sRepayMemory, string sResponsible)
        {
            string sSql = "Update IntroducerRepay set RepayWay='" + sRepayWay + "',RepayNumber='" + sRepayNumber + "',RepayMemory='" + sRepayMemory + "',IsRepay='1',RepayDate=getdate(),Responsible='" + sResponsible + "' where IntroducerCustomerNO='" + sIntroducerCustomerNO + "' and CustomerNO='" + sCustomerNO + "' ";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 增加回馈方式
        /// </summary>
        /// <param name="sRepayWay"></param>
        /// <returns></returns>
        [WebMethod]
        public bool SaveRepayWay(string sRepayWay)
        {
            string sSql = "Insert into RepayWay (RepayWay) values ('" + sRepayWay + "')";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 查询回馈方式
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchRepayWay()
        {
            string sSql = "Select ID,RepayWay From RepayWay";
            return ExecuteDataSet(sSql, "RepayWay");
        }

        /// <summary>
        /// 查询被介绍的客人
        /// </summary>
        /// <param name="Sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchIntroducer(string Sql)
        {
            string sSql = "select IntroduceCustomerNO, IntroduceCardType, IntroduceCardNO, CustomerNO, CardType, CardNO, CustomerName1, MobilePhone1, CustomerName2, MobilePhone2, RepayType, RepayWay, RepayNumber, RepayMemory, IsRepay, RepayEnableDate, RepayDate, Responsible from dbo.v_SearchIntroducer where 1=1 " + Sql;
            return ExecuteDataSet(sSql, "SearchIntroducer");
        }

        /// <summary>
        /// 汇总积分
        /// </summary>
        /// <param name="Sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchIntroducerCount(string Sql)
        {
            string sSql = "select distinct IntroduceCustomerNO, IntroduceCardType, IntroduceCardNO, CustomerNO, CardType, CardNO, CustomerName1, MobilePhone1, CustomerName2, MobilePhone2, RNumber, RepayType, RepayWay, RepayNumber, RepayMemory, IsRepay=case when sum(RNumber-RepayNumber)>0 then 0 when sum(RNumber-RepayNumber)<=0 then 1 end, RepayDate, Responsible, sum(SuitePrice) as SuitePrice, sum(Number) as Number from dbo.VIEW_SearchIntroducerCount where 1=1 " + Sql + " group by IntroduceCustomerNO, IntroduceCardType, IntroduceCardNO, CustomerNO, CardType, CardNO, CustomerName1, MobilePhone1, CustomerName2, MobilePhone2, RNumber, RepayType, RepayWay, RepayNumber, RepayMemory, RepayDate, Responsible";
            return ExecuteDataSet(sSql, "SearchIntroducerCount");
        }

        /// <summary>
        /// 查询回馈标准
        /// </summary>
        /// <param name="Sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchRepayStandard(string Sql)
        {
            string sSql = "select RepayType, RepayStandard1, RepayStandard2, RepayMoney, RepayDate1, RepayDate2, [Create], CreateDate, IsDelete from RepayStandard where IsDelete=0 " + Sql + " order by CreateDate desc ";
            return ExecuteDataSet(sSql, "RepayStandard");
        }

        /// <summary>
        /// 创建新订单号
        /// </summary>
        /// <param name="sOrderNo"></param>
        /// <returns></returns>
        [WebMethod]
        public string CreateNewOrder(string sOrderNo)
        {
            try
            {
                OpenConn();
                string sSql = "select top 1 IsNull(right(OrderNO,3),'000') from InOrders where OrderNO like '" + sOrderNo + "%' order by OrderNO desc";
                SqlCommand myCom = new SqlCommand(sSql, Conn);
                string sLastOrderNo = (string)myCom.ExecuteScalar();
                if (sLastOrderNo == null)
                    sLastOrderNo = "000";
                sLastOrderNo = string.Format("{0:D3}", Int32.Parse(sLastOrderNo) + 1);
                string newOrderNo = sOrderNo + sLastOrderNo;
                ExecuteNoneQuery(string.Format(@"Insert into InOrders(OrderNO,CreateTime) values('{0}',GETDATE())", newOrderNo));
                return newOrderNo;
            }
            catch
            {
                return "";
            }
            finally
            {
                CloseConn();
            }
        }

        /// <summary>
        /// 保存订单-新
        /// </summary>
        /// <param name="sCustomerNO"></param>
        /// <param name="sOrderNO"></param>
        /// <param name="sFPH"></param>
        /// <param name="sActivityNO"></param>
        /// <param name="sActivityName"></param>
        /// <param name="sSuiteTypeNO"></param>
        /// <param name="sSuiteNO"></param>
        /// <param name="sSuitePrice"></param>
        /// <param name="sDiscount"></param>
        /// <param name="sReducesPresently"></param>
        /// <param name="sReducesPresently2"></param>
        /// <param name="sReducesPresently3"></param>
        /// <param name="sAddPresently"></param>
        /// <param name="sOrderSuitePrice"></param>
        /// <param name="sImageCount"></param>
        /// <param name="sShootAddressN"></param>
        /// <param name="sShootAddressNName"></param>
        /// <param name="sPreShootDateN"></param>
        /// <param name="sShootAddressW"></param>
        /// <param name="sPreShootDateW"></param>
        /// <param name="sOrderDepartmentNO"></param>
        /// <param name="sOrderEmployeeNO"></param>
        /// <param name="sOrderDate"></param>
        /// <param name="sOrderMemory"></param>
        /// <param name="sImagePath"></param>
        /// <param name="sOrderState"></param>
        /// <param name="sLossType"></param>
        /// <param name="sLossMemory"></param>
        /// <param name="sIsDelete"></param>
        /// <param name="sOrderIndex"></param>
        /// <param name="sProductNO"></param>
        /// <param name="sSeparateNO"></param>
        /// <param name="sFram"></param>
        /// <param name="sBox"></param>
        /// <param name="sUnit"></param>
        /// <param name="sPaper"></param>
        /// <param name="sfilm"></param>
        /// <param name="sInsidePage"></param>
        /// <param name="sBiao"></param>
        /// <param name="sBan"></param>
        /// <param name="sDiao"></param>
        /// <param name="sPageQuantity"></param>
        /// <param name="sNegativeQuantity"></param>
        /// <param name="sProductQuantity"></param>
        /// <param name="sProductMemory"></param>
        /// <param name="sProductSellingPrice"></param>
        /// <param name="sProduceState"></param>
        /// <param name="sCreate"></param>
        /// <param name="sCreateDate"></param>
        /// <param name="sOption"></param>
        /// <returns></returns>
        [WebMethod]
        public bool SaveOrder_N(string sCustomerNO, string sOrderNO, string sFPH, string sActivityNO, string sActivityName, string sSuiteTypeNO, string sSuiteTypeName, string sSuiteNO, string sSuiteName, string sSuitePrice, string sDiscount, string sReducesPresently, string sReducesPresently2, string sReducesPresently3, string sAddPresently, string sOrderSuitePrice, string sImageCount, string sShootAddressN, string sShootAddressNName, string sPreShootDateN, string sShootAddressW, string sShootAddressWName, string sPreShootDateW, string sOrderDepartmentNO, string sOrderDepartmentName, string sOrderEmployeeNO, string sOrderEmployeeName, string sOrderEmployeeNO2, string sOrderEmployeeName2, string OnLine, string sOrderDate, string sOrderMemory, string sImagePath, string sOrderState, string sLossType, string sLossMemory, string sIsDelete, string[] sOrderIndex, string[] sProductNO, string[] sSeparateNO, string[] sFram, string[] sBox, string[] sUnit, string[] sPaper, string[] sfilm, string[] sInsidePage, string[] sBiao, string[] sBan, string[] sDiao, string[] sPageQuantity, string[] sNegativeQuantity, string[] sProductQuantity, string[] sProductMemory, string[] sProductSellingPrice, string[] sProduceState, string[] sCreate, string[] sCreateDate, string[] sOption, string shootMemoryN, string shootMemoryW, string companyBM, string EstimateShootTimeYearMoth, string EstimateShootTimeDay, string shootSites, string strOrderSource, string strOrderSourceName, string pregnant) //update by 20130403 guo.ty 添加EstimateTime1,EstimateTime2两个字段  update20131024 guo,ty 添加shootSites字段
        {
            bool bResult = true;
            string sSql = "declare @companyBM varchar(10);select @companyBM=CompanyBM from Department where DepartmentNO='" + sOrderDepartmentNO + "'; ";

            //string sSql += "Insert into Orders (CustomerNO, OrderNO, FPH, ActivityNO, SuiteTypeNO, SuiteNO, SuitePrice, Discount, ReducesPresently, OrderSuitePrice, ImageCount, ShootAddressN, PreShootDateN, ShootAddressW, PreShootDateW, orderDepartmentNo, OrderEmployeeNO, OrderDate, OrderMemory, ImagePath, OrderState, LossType, LossMemory, IsDelete,ShootMemoryN,ShootMemoryW) values ('" + sCustomerNO + "', '" + sOrderNo + "','" + sFPH + "','" + sActivityNO + "','" + sSuiteTypeNO + "', '" + sSuiteNO + "', '" + sSuitePrice + "','" + sDiscount + "','" + sReducesPresently + "','" + sOrderSuitePrice + "', '" + sImageCount + "','" + sShootAddressN + "','" + sPreShootDateN + "','" + sShootAddressW + "','" + sPreShootDateW + "', '" + sOrderDepartmentNO + "', '" + sOrderEmployeeNO + "', '" + sOrderDate + "', '" + sOrderMemory + "', '" + sImagePath + "','" + sOrderState + "','" + sLossType + "','" + sLossMemory + "', '" + sIsDelete + "', '" + shootMemoryN + "', '" + shootMemoryW + "') ";
            sSql += "Insert into Orders (CustomerNO, OrderNO, FPH, ActivityNO, SuiteTypeNO, SuiteNO, SuitePrice, Discount, ReducesPresently, ReducesPresently2, ReducesPresently3, AddPresently, OrderSuitePrice, ImageCount, ShootAddressN, PreShootDateN, ShootAddressW, PreShootDateW, orderDepartmentNo, OrderEmployeeNO,OrderEmployeeNO2, [onLine], OrderDate, OrderMemory, ImagePath, OrderState, LossType, LossMemory, IsDelete,ShootMemoryN,ShootMemoryW,CompanyBM,EstimateShootTimeYearMonth,EstimateShootTimeDay,ShootSites,OrderSource,IsNewOrder,Pregnant) values ('" + sCustomerNO + "', '" + sOrderNO + "','" + sFPH + "','" + sActivityNO + "','" + sSuiteTypeNO + "', '" + sSuiteNO + "', '" + sSuitePrice + "','" + sDiscount + "','" + sReducesPresently + "','" + sReducesPresently2 + "','" + sReducesPresently3 + "','" + sAddPresently + "','" + sOrderSuitePrice + "', '" + sImageCount + "','" + sShootAddressN + "','" + sPreShootDateN + "','" + sShootAddressW + "','" + sPreShootDateW + "', '" + sOrderDepartmentNO + "', '" + sOrderEmployeeNO + "','" + sOrderEmployeeNO2 + "','" + OnLine + "', '" + sOrderDate + "', '" + sOrderMemory + "', '" + sImagePath + "','" + sOrderState + "','" + sLossType + "','" + sLossMemory + "', '" + sIsDelete + "', '" + shootMemoryN + "', '" + shootMemoryW + "', @companyBM,'" + EstimateShootTimeYearMoth + "','" + EstimateShootTimeDay + "','" + shootSites + "','" + strOrderSource + "', 0,'" + pregnant + "'); ";  //update by 20130913 guo.ty 添加字段ISFinished
            sSql += "Insert into OrdersSub (OrderNO, ActivityName, SuiteTypeName, SuiteName, OrderDepartmentName, OrderEmployeeName, OrderEmployeeName2, OrderSourceName) values ('" + sOrderNO + "', '" + sActivityName + "', '" + sSuiteTypeName + "', '" + sSuiteName + "', '" + sOrderDepartmentName + "', '" + sOrderEmployeeName + "', '" + sOrderEmployeeName2 + "', '" + strOrderSourceName + "') ";
            sSql += "Insert into OrdersPayState (OrderNO, PayableSuite) Values ('" + sOrderNO + "','" + sOrderSuitePrice + "');  ";
            //Add by Caijinsong 2014-4-22
            sSql += " insert into Dress_Reventions (OrderNO,Dress_WhetherGiveUp,Dress_WhetherRevention) values ('" + sOrderNO + "',0,'否'); ";
            if (!ExecuteSql(sSql))
            {
                this._Msg += "订单基本信息保存失败 ";
                bResult = false;
            }
            if (!SaveOrderProducts(sOrderNO, sOrderIndex, sProductNO, sSeparateNO, sFram, sBox, sUnit, sPaper, sfilm, sInsidePage, sBiao, sBan, sDiao, sPageQuantity, sNegativeQuantity, sProductQuantity, sProductMemory, sProductSellingPrice, sProduceState, sCreate, sCreateDate, null, sOption, "A"))
            {
                this._Msg += "订单产品保存失败 ";
                bResult = false;
            }

            //if (shootSites == "全套")//保存全套
            //{
            //    if (!this.Insert_PreShoot(sOrderNo, "正常", "内景", sShootAddressN, sShootAddressN, sShootAddressNName, "", "", sPreShootDateN, shootMemoryN, sOrderEmployeeNO, sOrderDepartmentNO, DateTime.Now))
            //    {
            //        this._Msg = "内景保存失败 ";
            //        bResult = false;
            //    }
            //    if (sPreShootDateW == "")
            //    {
            //        sPreShootDateW = sPreShootDateN;
            //    }
            //    if (!this.Insert_PreShoot(sOrderNo, "正常", "外景", sShootAddressN, sShootAddressW, sShootAddressWName, "", "", sPreShootDateW, shootMemoryW, sOrderEmployeeNO, sOrderDepartmentNO, DateTime.Now))
            //    {
            //        this._Msg += "外景保存失败 ";
            //        bResult = false;
            //    }
            //}
            //else if (shootSites == "内景")//保存内景
            //{
            //    if (!this.Insert_PreShoot(sOrderNo, "正常", "内景", sShootAddressN, sShootAddressN, sShootAddressNName, "", "", sPreShootDateN, shootMemoryN, sOrderEmployeeNO, sOrderDepartmentNO, DateTime.Now))
            //    {
            //        this._Msg = "内景保存失败 ";
            //        bResult = false;
            //    }
            //}
            //else //外景
            //{
            //    if (!this.Insert_PreShoot(sOrderNo, "正常", "外景", sShootAddressN, sShootAddressW, sShootAddressWName, "", "", sPreShootDateW, shootMemoryW, sOrderEmployeeNO, sOrderDepartmentNO, DateTime.Now))
            //    {
            //        this._Msg = "外景保存失败 ";
            //        bResult = false;
            //    }
            //}
            return bResult;
        }
        /// <summary>
        /// zjj2012-04-20
        /// </summary>
        /// <param name="sCustomerNO"></param>
        /// <param name="sSourceOrderNO"></param>
        /// <param name="sOrderNO"></param>
        /// <param name="sFPH"></param>
        /// <param name="sActivityNO"></param>
        /// <param name="sSuiteTypeNO"></param>
        /// <param name="sSuiteNO"></param>
        /// <param name="sSuitePrice"></param>
        /// <param name="sDiscount"></param>
        /// <param name="sReducesPresently"></param>
        /// <param name="sReducesPresently2"></param>
        /// <param name="sReducesPresently3"></param>
        /// <param name="sAddPresently"></param>
        /// <param name="sOrderSuitePrice"></param>
        /// <param name="sImageCount"></param>
        /// <param name="sOrderDepartmentNO"></param>
        /// <param name="sOrderEmployeeNO"></param>
        /// <param name="Online">0:线下订单/1:线上订单</param>
        /// <param name="sOrderDate"></param>
        /// <param name="sOrderMemory"></param>
        /// <param name="sImagePath"></param>
        /// <param name="sOrderState"></param>
        /// <param name="sLossType"></param>
        /// <param name="sLossMemory"></param>
        /// <param name="sIsDelete"></param>
        /// <param name="sOrderIndex"></param>
        /// <param name="sProductNO"></param>
        /// <param name="sSeparateNO"></param>
        /// <param name="sFram"></param>
        /// <param name="sBox"></param>
        /// <param name="sUnit"></param>
        /// <param name="sPaper"></param>
        /// <param name="sfilm"></param>
        /// <param name="sInsidePage"></param>
        /// <param name="sBiao"></param>
        /// <param name="sBan"></param>
        /// <param name="sDiao"></param>
        /// <param name="sPageQuantity"></param>
        /// <param name="sNegativeQuantity"></param>
        /// <param name="sProductQuantity"></param>
        /// <param name="sProductMemory"></param>
        /// <param name="sProductSellingPrice"></param>
        /// <param name="sProduceState"></param>
        /// <param name="sCreate"></param>
        /// <param name="sCreateDate"></param>
        /// <param name="sOption"></param>
        /// <param name="sType"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateOrder_NTwo(string sCustomerNO, string sSourceOrderNO, string sOrderNO, string sFPH, string sActivityNO, string sActivityName, string sSuiteTypeNO, string sSuiteTypeName, string sSuiteNO, string sSuiteName, string sSuitePrice, string sDiscount, string sReducesPresently, string sReducesPresently2, string sReducesPresently3, string sAddPresently, string sOrderSuitePrice, string sImageCount, string sOrderDepartmentNO, string sOrderDepartmentName, string sOrderEmployeeNO, string sOrderEmployeeName, string sOrderEmployeeNO2, string sOrderEmployeeName2, string OnLine, string sOrderDate, string sOrderMemory, string sImagePath, string sOrderState, string sLossType, string sLossMemory, string sIsDelete, string[] sOrderIndex, string[] sProductNO, string[] sSeparateNO, string[] sFram, string[] sBox, string[] sUnit, string[] sPaper, string[] sfilm, string[] sInsidePage, string[] sBiao, string[] sBan, string[] sDiao, string[] sPageQuantity, string[] sNegativeQuantity, string[] sProductQuantity, string[] sProductMemory, string[] sProductSellingPrice, string[] sProduceState, string[] sCreate, string[] sCreateDate, string[] sOption, string sType, string EstimateShootTimeYearMoth, string EstimateShootTimeDay, string shootSites, string strOrderSource, string strOrderSourceName, string pregnant) //update by 20130403 guo.ty 添加EstimateTime1,EstimateTime2两个字 update by 20131024 guo,ty 添加shootSites字段
        {
            //, string sPreClothesDate, string sPreDressDate, string sPreShootDateN, string sPreShootDateW, string sPreChooseDate, string sPreLookDate, string sPreGetGoodsDate, string sClothesAddress, string sClothesEmployeeNO, string sClothesDate, string sClothesMemory, string sDressAddress, string sDressEmployeeNO, string sModelEmployeeNO, string sDressDate, string sDressMemory, string sShootAddressN, string sShootEmployeeNON, string sShootDateN, string sShootMemoryN, string sShootAddressW, string sShootEmployeeNOW, string sShootDateW, string sShootMemoryW, string sChooseAddress, string sChooseEmployeeNO, string sChooseDate, string sChooseMeMory, string sLookAddress, string sLookEmployeeNO, string sLookDate, string sLookMemory, string sGetGoodsAddress, string sGetGoodsEmployeeNO, string sGetGoodsDate, string sGetGoodsMemory


            //, PreClothesDate='" + sPreClothesDate + "', PreDressDate='" + sPreDressDate + "', PreShootDateN='" + sPreShootDateN + "', PreShootDateW='" + sPreShootDateW + "', PreChooseDate='" + sPreChooseDate + "', PreLookDate='" + sPreLookDate + "', PreGetGoodsDate='" + sPreGetGoodsDate + "', ClothesAddress='" + sClothesAddress + "', ClothesEmployeeNO='" + sClothesEmployeeNO + "', ClothesDate='" + sClothesDate + "', ClothesMemory='" + sClothesMemory + "', DressAddress='" + sDressAddress + "', DressEmployeeNO='" + sDressEmployeeNO + "', ModelEmployeeNO= '" + sModelEmployeeNO + "', DressDate= '" + sDressDate + "', DressMemory='" + sDressMemory + "', ShootAddressN='" + sShootAddressN + "', ShootEmployeeNON='" + sShootEmployeeNON + "', ShootDateN='" + sShootDateN + "', ShootMemoryN='" + sShootMemoryN + "', ShootAddressW='" + sShootAddressW + "', ShootEmployeeNOW='" + sShootEmployeeNOW + "', ShootDateW='" + sShootDateW + "', ShootMemoryW='" + sShootMemoryW + "', ChooseAddress='" + sChooseAddress + "', ChooseEmployeeNO='" + sChooseEmployeeNO + "', ChooseDate='" + sChooseDate + "', ChooseMeMory='" + sChooseMeMory + "', LookAddress='" + sLookAddress + "', LookEmployeeNO='" + sLookEmployeeNO + "', LookDate='" + sLookDate + "', LookMemory='" + sLookMemory + "', GetGoodsAddress='" + sGetGoodsAddress + "', GetGoodsEmployeeNO='" + sGetGoodsEmployeeNO + "', GetGoodsDate='" + sGetGoodsDate + "', GetGoodsMemory='" + sGetGoodsMemory + "'
            string sSql = "declare @companyBM varchar(10);select @companyBM=CompanyBM from Department where DepartmentNO='" + sOrderDepartmentNO + "';";
            //string sSql = "";
            if (sType == "客服部")
            {


                sSql += "Update Orders set  OrderNO='" + sOrderNO + "',FPH='" + sFPH + "', ActivityNO='" + sActivityNO + "', SuiteTypeNO='" + sSuiteTypeNO + "', SuiteNO='" + sSuiteNO + "', SuitePrice='" + sSuitePrice + "',Discount='" + sDiscount + "',ReducesPresently='" + sReducesPresently + "',ReducesPresently2='" + sReducesPresently2 + "',ReducesPresently3='" + sReducesPresently3 + "',AddPresently='" + sAddPresently + "',OrderSuitePrice='" + sOrderSuitePrice + "', orderDepartmentNo='" + sOrderDepartmentNO + "', OrderEmployeeNO='" + sOrderEmployeeNO + "', OrderEmployeeNO2='" + sOrderEmployeeNO2 + "', [onLine]='" + OnLine + "', OrderMemory='" + sOrderMemory + "', CompanyBM=@companyBM ,EstimateShootTimeYearMonth = '" + EstimateShootTimeYearMoth + "', EstimateShootTimeDay = '" + EstimateShootTimeDay + "',ShootSites = '" + shootSites + "',OrderSource='" + strOrderSource + "',Pregnant = '" + pregnant + "'  where OrderNO='" + sSourceOrderNO + "' ";//, OrderEmployeeNO= '" + sOrderEmployeeNO + "', OrderDate='" + sOrderDate + "'
            }
            else
            {

                sSql += "Update Orders set  OrderNO='" + sOrderNO + "',FPH='" + sFPH + "', ActivityNO='" + sActivityNO + "', SuiteTypeNO='" + sSuiteTypeNO + "', SuiteNO='" + sSuiteNO + "', SuitePrice='" + sSuitePrice + "',Discount='" + sDiscount + "',ReducesPresently='" + sReducesPresently + "',ReducesPresently2='" + sReducesPresently2 + "',ReducesPresently3='" + sReducesPresently3 + "',AddPresently='" + sAddPresently + "',OrderSuitePrice='" + sOrderSuitePrice + "', orderDepartmentNo='" + sOrderDepartmentNO + "', OrderEmployeeNO='" + sOrderEmployeeNO + "', OrderEmployeeNO2='" + sOrderEmployeeNO2 + "',[onLine]='" + OnLine + "', OrderMemory='" + sOrderMemory + "', OrderState='" + sOrderState + "', LossType='" + sLossType + "', LossMemory='" + sLossMemory + "', CompanyBM=@companyBM ,EstimateShootTimeYearMonth = '" + EstimateShootTimeYearMoth + "', EstimateShootTimeDay = '" + EstimateShootTimeDay + "',ShootSites = '" + shootSites + "',OrderSource='" + strOrderSource + "',Pregnant = '" + pregnant + "'  where OrderNO='" + sSourceOrderNO + "' ";//, OrderEmployeeNO= '" + sOrderEmployeeNO + "', OrderDate='" + sOrderDate + "'

            }
            sSql += "if exists(select 1 from OrdersSub where OrderNO='" + sSourceOrderNO + "') ";
            sSql += "Update OrdersSub set OrderNO='" + sOrderNO + "', ActivityName='" + sActivityName + "', SuiteTypeName='" + sSuiteTypeName + "', SuiteName='" + sSuiteName + "', OrderDepartmentName='" + sOrderDepartmentName + "', OrderEmployeeName='" + sOrderEmployeeName + "', OrderEmployeeName2='" + sOrderEmployeeName2 + "', OrderSourceName='" + strOrderSourceName + "' where OrderNO='" + sSourceOrderNO + "' ";
            sSql += "else ";
            sSql += "Insert into OrdersSub (OrderNO, ActivityName, SuiteTypeName, SuiteName, OrderDepartmentName, OrderEmployeeName, OrderEmployeeName2, OrderSourceName) values ('" + sOrderNO + "', '" + sActivityName + "', '" + sSuiteTypeName + "', '" + sSuiteName + "', '" + sOrderDepartmentName + "', '" + sOrderEmployeeName + "', '" + sOrderEmployeeName2 + "', '" + strOrderSourceName + "')";
            //sSql += "Update OrdersPayState set PayableSuite='" + sOrderSuitePrice + "' where OrderNO='" + sOrderNo + "' ";
            sSql += "if exists (select 1 from OrdersPayState where orderno='" + sOrderNO + "') \r\n";
            sSql += "begin \r\n";
            sSql += "Update OrdersPayState set PayableSuite='" + sOrderSuitePrice + "', OrderNO='" + sOrderNO + "' where OrderNO='" + sSourceOrderNO + "' ";//zjj2011-02-09
            sSql += "end \r\n";
            sSql += "else \r\n";
            sSql += "begin \r\n";
            sSql += "Insert into OrdersPayState (OrderNO, PayableSuite) Values ('" + sOrderNO + "','" + sOrderSuitePrice + "') \r\n";
            sSql += "end \r\n";
            if (!ExecuteSql(sSql))
                return false;
            if (!SaveOrderProducts(sOrderNO, sOrderIndex, sProductNO, sSeparateNO, sFram, sBox, sUnit, sPaper, sfilm, sInsidePage, sBiao, sBan, sDiao, sPageQuantity, sNegativeQuantity, sProductQuantity, sProductMemory, sProductSellingPrice, sProduceState, sCreate, sCreateDate, null, sOption, "A"))
                return false;
            return true;
        }

        /// <summary>
        /// 更新订单产品成本信息-订单
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sOrderIndex"></param>
        /// <param name="sSeparateNO"></param>
        /// <param name="Approval_Department"></param>
        /// <param name="Approval_Employee"></param>
        /// <param name="Approval_Number"></param>
        /// <param name="Approval_Date"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdatePreProductsApproval(string sOrderNO, string[] sOrderIndex, string[] sSeparateNO, string[] Approval_Department, string[] Approval_Employee, string[] Approval_Number, string[] Approval_Date)
        {
            string sSql = "";
            for (int i = 0; i < sOrderIndex.Length; i++)
            {
                sSql += "Update PreProducts set Approval_Department='" + Approval_Department[i] + "', Approval_Employee='" + Approval_Employee[i] + "', Approval_Number='" + Approval_Number[i] + "', Approval_Date='" + Approval_Date[i] + "' where OrderNO='" + sOrderNO + "' and OrderIndex='" + sOrderIndex[i] + "' and SeparateNO='" + sSeparateNO[i] + "' ";
                sSql += "Update OrderProducts set Approval_Department='" + Approval_Department[i] + "', Approval_Employee='" + Approval_Employee[i] + "', Approval_Number='" + Approval_Number[i] + "', Approval_Date='" + Approval_Date[i] + "' where OrderNO='" + sOrderNO + "' and OrderIndex='" + sOrderIndex[i] + "' and SeparateNO='" + sSeparateNO[i] + "' ";
            }
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 更新订单产品成本信息-看样
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sOrderIndex"></param>
        /// <param name="sSeparateNO"></param>
        /// <param name="Approval_Department"></param>
        /// <param name="Approval_Employee"></param>
        /// <param name="Approval_Number"></param>
        /// <param name="Approval_Date"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateOrderProductsApproval(string sOrderNO, string[] sOrderIndex, string[] sSeparateNO, string[] Approval_Department, string[] Approval_Employee, string[] Approval_Number, string[] Approval_Date)
        {
            string sSql = "";
            for (int i = 0; i < sOrderIndex.Length; i++)
            {
                sSql += "Update OrderProducts Approval_Department='" + Approval_Department[i] + "', Approval_Employee='" + Approval_Employee[i] + "', Approval_Number='" + Approval_Number[i] + "', Approval_Date='" + Approval_Date[i] + "' where OrderNO='" + sOrderNO + "' and OrderIndex='" + sOrderIndex[i] + "' and SeparateNO='" + sSeparateNO[i] + "' ";
            }
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 删除订单资料
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <returns></returns>
        [WebMethod]
        public bool DeleteOrders(string[] sOrderNO)
        {
            string sSql = "";
            for (int i = 0; i < sOrderNO.Length; i++)
            {
                sSql += "Update Orders set IsDelete=1 where OrderNO='" + sOrderNO[i] + "' ";
            }
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 利用Option判断订单产品是新建,更新还是删除
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sProductNO"></param>
        /// <param name="sSeparateNO"></param>
        /// <param name="sImageNumber"></param>
        /// <param name="sProductSellingPrice"></param>
        /// <param name="sProduceState"></param>
        /// <param name="sCreate"></param>
        /// <param name="sCreateDate"></param>
        /// <param name="sOption"></param>
        /// <returns></returns>
        [WebMethod]
        public bool SaveOrderProducts(string sOrderNO, string[] sOrderIndex, string[] sProductNO, string[] sSeparateNO, string[] sFram, string[] sBox, string[] sUnit, string[] sPaper, string[] sfilm, string[] sInsidePage, string[] sBiao, string[] sBan, string[] sDiao, string[] sPageQuantity, string[] sNegativeQuantity, string[] sProductQuantity, string[] sProductMemory, string[] sProductSellingPrice, string[] sProduceState, string[] sCreate, string[] sCreateDate, string[] sParentProductNO, string[] sOption, string sAorB)
        {
            //sAorB 意思为:A表示预约,B表示看样
            DataRow[] drSub;
            try
            {
                int sub = 0;
                for (int i = 0; i < sProductNO.Length; i++)
                {
                    drSub = SearchProduct("and ProductNO like '" + sProductNO[i] + "_sub%'").Tables[0].Select("1=1");//查询子产品
                    if (sOption[i] == "NEW")
                    {
                        if (sAorB == "A")//zjj2012-2-24 A表示预约
                        {
                            string sorderIndex = "";
                            //if (!(SavePreProduct(sOrderNo, sOrderIndex[i], sProductNO[i], sSeparateNO[i], sFram[i], sBox[i], sUnit[i], sPaper[i], sfilm[i], sInsidePage[i], sBiao[i], sBan[i], sDiao[i], sPageQuantity[i], sNegativeQuantity[i], sProductQuantity[i], sProductMemory[i], sProductSellingPrice[i], sProduceState[i], sCreate[i], sCreateDate[i])
                            //    &&
                            //    SaveOrderProduct(sOrderNo, sOrderIndex[i], sProductNO[i], sSeparateNO[i], sFram[i], sBox[i], sUnit[i], sPaper[i], sfilm[i], sInsidePage[i], sBiao[i], sBan[i], sDiao[i], sPageQuantity[i], sNegativeQuantity[i], sProductQuantity[i], sProductSellingPrice[i], sProduceState[i], sCreate[i], sCreateDate[i], "P_05")))

                            DataSet dsPreProduct = SearchPreProductMax(sOrderNO);
                            DataSet dsOrderProduct = SearchOrderProductMax(sOrderNO);
                            if (dsPreProduct.Tables[0].Rows[0][0].ToString() == "" && dsOrderProduct.Tables[0].Rows[0][0].ToString() == "")
                            {
                                sorderIndex = string.Format("{0:d3}", 1);
                            }
                            else if (dsPreProduct.Tables[0].Rows[0][0].ToString() == "" && dsOrderProduct.Tables[0].Rows[0][0].ToString() != "")
                            {
                                sorderIndex = string.Format("{0:d3}", Int32.Parse(dsOrderProduct.Tables[0].Rows[0][0].ToString()) + 1);
                            }
                            else if (dsPreProduct.Tables[0].Rows[0][0].ToString() != "" && dsOrderProduct.Tables[0].Rows[0][0].ToString() == "")
                            {
                                sorderIndex = string.Format("{0:d3}", Int32.Parse(dsPreProduct.Tables[0].Rows[0][0].ToString()) + 1);
                            }
                            else if (dsPreProduct.Tables[0].Rows[0][0].ToString() != "" && dsOrderProduct.Tables[0].Rows[0][0].ToString() != "")
                            {
                                sorderIndex = Int32.Parse(dsPreProduct.Tables[0].Rows[0][0].ToString()) > Int32.Parse(dsOrderProduct.Tables[0].Rows[0][0].ToString()) ? string.Format("{0:d3}", Int32.Parse(dsPreProduct.Tables[0].Rows[0][0].ToString()) + 1) : string.Format("{0:d3}", Int32.Parse(dsOrderProduct.Tables[0].Rows[0][0].ToString()) + 1);
                            }
                            //主产品
                            if (!(SavePreProductTwo(sOrderNO, sorderIndex, sProductNO[i], sSeparateNO[i], sFram[i], sBox[i], sUnit[i], sPaper[i], sfilm[i], sInsidePage[i], sBiao[i], sBan[i], sDiao[i], sPageQuantity[i], sNegativeQuantity[i], sProductQuantity[i], sProductMemory[i], sProductSellingPrice[i], sProduceState[i], sCreate[i], sCreateDate[i], sorderIndex)
                                &&
                               SaveOrderProductTwo(sOrderNO, sorderIndex, sProductNO[i], sSeparateNO[i], sFram[i], sBox[i], sUnit[i], sPaper[i], sfilm[i], sInsidePage[i], sBiao[i], sBan[i], sDiao[i], sPageQuantity[i], sNegativeQuantity[i], sProductQuantity[i], sProductMemory[i], sProductSellingPrice[i], sProduceState[i], sCreate[i], sCreateDate[i], "P_05", sorderIndex)))
                                return false;
                            else
                            {
                                //添加组合产品附属项
                                if (drSub.Length > 0)
                                {
                                    for (int j = 1; j <= drSub.Length; j++)
                                    {
                                        //string sorderIndex = string.Format("{0:d3}", sProductNO.Length + sub + j - 1);
                                        string orderIndexsub = "";
                                        dsPreProduct = SearchPreProductMax(sOrderNO);
                                        dsOrderProduct = SearchOrderProductMax(sOrderNO);
                                        if (dsPreProduct.Tables[0].Rows[0][0].ToString() == "" && dsOrderProduct.Tables[0].Rows[0][0].ToString() == "")
                                        {
                                            orderIndexsub = string.Format("{0:d3}", 1);
                                        }
                                        else if (dsPreProduct.Tables[0].Rows[0][0].ToString() == "" && dsOrderProduct.Tables[0].Rows[0][0].ToString() != "")
                                        {
                                            orderIndexsub = string.Format("{0:d3}", Int32.Parse(dsOrderProduct.Tables[0].Rows[0][0].ToString()) + 1);
                                        }
                                        else if (dsPreProduct.Tables[0].Rows[0][0].ToString() != "" && dsOrderProduct.Tables[0].Rows[0][0].ToString() == "")
                                        {
                                            orderIndexsub = string.Format("{0:d3}", Int32.Parse(dsPreProduct.Tables[0].Rows[0][0].ToString()) + 1);
                                        }
                                        else if (dsPreProduct.Tables[0].Rows[0][0].ToString() != "" && dsOrderProduct.Tables[0].Rows[0][0].ToString() != "")
                                        {
                                            orderIndexsub = Int32.Parse(dsPreProduct.Tables[0].Rows[0][0].ToString()) > Int32.Parse(dsOrderProduct.Tables[0].Rows[0][0].ToString()) ? string.Format("{0:d3}", Int32.Parse(dsPreProduct.Tables[0].Rows[0][0].ToString()) + 1) : string.Format("{0:d3}", Int32.Parse(dsOrderProduct.Tables[0].Rows[0][0].ToString()) + 1);
                                        }
                                        //sorderIndex = string.Format("{0:d3}", Int32.Parse(dsPreProduct.Tables[0].Rows[0][0].ToString()) + 1);
                                        //if (!(SavePreProduct(sOrderNo, sorderIndex, drSub[j - 1]["ProductNO"].ToString(), "001", drSub[j - 1]["fram"].ToString(), drSub[j - 1]["Box"].ToString(), drSub[j - 1]["Unit"].ToString(), drSub[j - 1]["Paper"].ToString(), drSub[j - 1]["Film"].ToString(), drSub[j - 1]["InsidePage"].ToString(), drSub[j - 1]["Biao"].ToString(), drSub[j - 1]["Ban"].ToString(), drSub[j - 1]["Diao"].ToString(), "0", "0", "1", "", drSub[j - 1]["ProductSellingPrice"].ToString(), sProduceState[i], sCreate[i], sCreateDate[i])
                                        //&& SaveOrderProduct(sOrderNo, sorderIndex, drSub[j - 1]["ProductNO"].ToString(), "001", drSub[j - 1]["fram"].ToString(), drSub[j - 1]["Box"].ToString(), drSub[j - 1]["Unit"].ToString(), drSub[j - 1]["Paper"].ToString(), drSub[j - 1]["Film"].ToString(), drSub[j - 1]["InsidePage"].ToString(), drSub[j - 1]["Biao"].ToString(), drSub[j - 1]["Ban"].ToString(), drSub[j - 1]["Diao"].ToString(), "0", "0", "1", drSub[j - 1]["ProductSellingPrice"].ToString(), sProduceState[i], sCreate[i], sCreateDate[i], "P_05")))
                                        if (!(SavePreProductTwo(sOrderNO, orderIndexsub, drSub[j - 1]["ProductNO"].ToString(), "001", drSub[j - 1]["fram"].ToString(), drSub[j - 1]["Box"].ToString(), drSub[j - 1]["Unit"].ToString(), drSub[j - 1]["Paper"].ToString(), drSub[j - 1]["Film"].ToString(), drSub[j - 1]["InsidePage"].ToString(), drSub[j - 1]["Biao"].ToString(), drSub[j - 1]["Ban"].ToString(), drSub[j - 1]["Diao"].ToString(), "0", "0", "1", "", drSub[j - 1]["ProductSellingPrice"].ToString(), sProduceState[i], sCreate[i], sCreateDate[i], sorderIndex)
                                       && SaveOrderProductTwo(sOrderNO, orderIndexsub, drSub[j - 1]["ProductNO"].ToString(), "001", drSub[j - 1]["fram"].ToString(), drSub[j - 1]["Box"].ToString(), drSub[j - 1]["Unit"].ToString(), drSub[j - 1]["Paper"].ToString(), drSub[j - 1]["Film"].ToString(), drSub[j - 1]["InsidePage"].ToString(), drSub[j - 1]["Biao"].ToString(), drSub[j - 1]["Ban"].ToString(), drSub[j - 1]["Diao"].ToString(), "0", "0", "1", "", drSub[j - 1]["ProductSellingPrice"].ToString(), sProduceState[i], sCreate[i], sCreateDate[i], "P_05", sorderIndex)))
                                            return false;


                                    }
                                    sub += drSub.Length;
                                }
                            }
                        }
                        else//B表示看样
                        {
                            if (!(SaveOrderProduct(sOrderNO, sOrderIndex[i], sProductNO[i], sSeparateNO[i], sFram[i], sBox[i], sUnit[i], sPaper[i], sfilm[i], sInsidePage[i], sBiao[i], sBan[i], sDiao[i], sPageQuantity[i], sNegativeQuantity[i], sProductQuantity[i], sProductSellingPrice[i], sProduceState[i], sCreate[i], sCreateDate[i], sParentProductNO[i], "P_50")))
                                return false;
                        }
                    }
                    else if (sOption[i] == "EDIT")
                    {
                        if (sAorB == "A")//zjj2012-02-24 A表示预约
                        {
                            string sql = " AND ParentProductNO=" + sOrderIndex[i];
                            DataSet dsPreProduct = SearchPreProduct(sOrderNO, sql);
                            foreach (DataRow dr in dsPreProduct.Tables[0].Rows)
                            {
                                if (dr["ProductNO"].ToString().Contains("_sub"))//表示子产品
                                {
                                    if (!(DeletePreProduct(sOrderNO, dr["OrderIndex"].ToString()) && DeleteOrderProduct(sOrderNO, dr["OrderIndex"].ToString())))
                                        return false;
                                }
                            }

                            #region MyRegion
                            //DataRow[] dssub = SearchProduct("and ProductNO like '" + dsPreProduct.Tables[0].Rows[0]["ProductNO"] + "_sub%'").Tables[0].Select("1=1");//当前订单索引的子产品
                            ////删除所带的附属产品
                            //if (dssub.Length > 0)
                            //{
                            //    sql = " AND OrderIndex>" + sOrderIndex[i];
                            //    dsPreProduct = SearchPreProduct(sOrderNo, sql);
                            //    int count = 0;
                            //    int n = 0;
                            //    for (int m = 0; m < dsPreProduct.Tables[0].Rows.Count; m++)
                            //    {
                            //        if (dssub.Length == n)
                            //        {
                            //            break;
                            //        }

                            //        else if (dsPreProduct.Tables[0].Rows[m]["ProductNO"].ToString().Contains("_sub"))
                            //        {
                            //            if (!(DeletePreProduct(sOrderNo, dsPreProduct.Tables[0].Rows[m]["OrderIndex"].ToString()) && DeleteOrderProduct(sOrderNo, dsPreProduct.Tables[0].Rows[m]["OrderIndex"].ToString())))
                            //                return false;
                            //            count = 1;
                            //            n++;
                            //        }
                            //        else if (count == 1)
                            //        {
                            //            break;
                            //        }

                            //    }
                            //} 
                            #endregion

                            if (!(UpdatePreProduct(sOrderNO, sOrderIndex[i], sProductNO[i], sSeparateNO[i], sFram[i], sBox[i], sUnit[i], sPaper[i], sfilm[i], sInsidePage[i], sBiao[i], sBan[i], sDiao[i], sPageQuantity[i], sNegativeQuantity[i], sProductQuantity[i], sProductMemory[i], sProductSellingPrice[i], sProduceState[i], sCreate[i], sCreateDate[i], sOrderIndex[i])
                                &&
                                UpdateOrderProducts(sOrderNO, sOrderIndex[i], sProductNO[i], sSeparateNO[i], sFram[i], sBox[i], sUnit[i], sPaper[i], sfilm[i], sInsidePage[i], sBiao[i], sBan[i], sDiao[i], sPageQuantity[i], sNegativeQuantity[i], sProductQuantity[i], sProductMemory[i], sProductSellingPrice[i], sProduceState[i], sCreate[i], sCreateDate[i], sOrderIndex[i])))
                                return false;
                            else//zjj2012-2-24
                            {
                                ///添加组合产品附属项
                                if (drSub.Length > 0)
                                {
                                    for (int j = 1; j <= drSub.Length; j++)
                                    {
                                        //string sorderIndex = string.Format("{0:d3}", sProductNO.Length + sub + j - 1);
                                        dsPreProduct = SearchPreProductMax(sOrderNO);
                                        DataSet dsOrderProduct = SearchOrderProductMax(sOrderNO);
                                        string sorderIndex = "";
                                        if (dsPreProduct.Tables[0].Rows[0][0].ToString() == "" && dsOrderProduct.Tables[0].Rows[0][0].ToString() == "")
                                        {
                                            sorderIndex = string.Format("{0:d3}", 1);
                                        }
                                        else if (dsPreProduct.Tables[0].Rows[0][0].ToString() == "" && dsOrderProduct.Tables[0].Rows[0][0].ToString() != "")
                                        {
                                            sorderIndex = string.Format("{0:d3}", Int32.Parse(dsOrderProduct.Tables[0].Rows[0][0].ToString()) + 1);
                                        }
                                        else if (dsPreProduct.Tables[0].Rows[0][0].ToString() != "" && dsOrderProduct.Tables[0].Rows[0][0].ToString() == "")
                                        {
                                            sorderIndex = string.Format("{0:d3}", Int32.Parse(dsPreProduct.Tables[0].Rows[0][0].ToString()) + 1);
                                        }
                                        else if (dsPreProduct.Tables[0].Rows[0][0].ToString() != "" && dsOrderProduct.Tables[0].Rows[0][0].ToString() != "")
                                        {
                                            sorderIndex = Int32.Parse(dsPreProduct.Tables[0].Rows[0][0].ToString()) > Int32.Parse(dsOrderProduct.Tables[0].Rows[0][0].ToString()) ? string.Format("{0:d3}", Int32.Parse(dsPreProduct.Tables[0].Rows[0][0].ToString()) + 1) : string.Format("{0:d3}", Int32.Parse(dsOrderProduct.Tables[0].Rows[0][0].ToString()) + 1);
                                        }
                                        // string sorderIndex = string.Format("{0:d3}", Int32.Parse(dsPreProduct.Tables[0].Rows[0][0].ToString()) + 1);
                                        //if (!(SavePreProduct(sOrderNo, sorderIndex, drSub[j - 1]["ProductNO"].ToString(), "001", drSub[j - 1]["fram"].ToString(), drSub[j - 1]["Box"].ToString(), drSub[j - 1]["Unit"].ToString(), drSub[j - 1]["Paper"].ToString(), drSub[j - 1]["Film"].ToString(), drSub[j - 1]["InsidePage"].ToString(), drSub[j - 1]["Biao"].ToString(), drSub[j - 1]["Ban"].ToString(), drSub[j - 1]["Diao"].ToString(), "0", "0", "1", "", drSub[j - 1]["ProductSellingPrice"].ToString(), sProduceState[i], sCreate[i], sCreateDate[i])
                                        //&& SaveOrderProduct(sOrderNo, sorderIndex, drSub[j - 1]["ProductNO"].ToString(), "001", drSub[j - 1]["fram"].ToString(), drSub[j - 1]["Box"].ToString(), drSub[j - 1]["Unit"].ToString(), drSub[j - 1]["Paper"].ToString(), drSub[j - 1]["Film"].ToString(), drSub[j - 1]["InsidePage"].ToString(), drSub[j - 1]["Biao"].ToString(), drSub[j - 1]["Ban"].ToString(), drSub[j - 1]["Diao"].ToString(), "0", "0", "1", drSub[j - 1]["ProductSellingPrice"].ToString(), sProduceState[i], sCreate[i], sCreateDate[i], "P_05")))
                                        if (!(SavePreProductTwo(sOrderNO, sorderIndex, drSub[j - 1]["ProductNO"].ToString(), "001", drSub[j - 1]["fram"].ToString(), drSub[j - 1]["Box"].ToString(), drSub[j - 1]["Unit"].ToString(), drSub[j - 1]["Paper"].ToString(), drSub[j - 1]["Film"].ToString(), drSub[j - 1]["InsidePage"].ToString(), drSub[j - 1]["Biao"].ToString(), drSub[j - 1]["Ban"].ToString(), drSub[j - 1]["Diao"].ToString(), "0", "0", "1", "", drSub[j - 1]["ProductSellingPrice"].ToString(), sProduceState[i], sCreate[i], sCreateDate[i], sOrderIndex[i])
                                       && SaveOrderProductTwo(sOrderNO, sorderIndex, drSub[j - 1]["ProductNO"].ToString(), "001", drSub[j - 1]["fram"].ToString(), drSub[j - 1]["Box"].ToString(), drSub[j - 1]["Unit"].ToString(), drSub[j - 1]["Paper"].ToString(), drSub[j - 1]["Film"].ToString(), drSub[j - 1]["InsidePage"].ToString(), drSub[j - 1]["Biao"].ToString(), drSub[j - 1]["Ban"].ToString(), drSub[j - 1]["Diao"].ToString(), "0", "0", "1", "", drSub[j - 1]["ProductSellingPrice"].ToString(), sProduceState[i], sCreate[i], sCreateDate[i], "P_05", sOrderIndex[i])))
                                            return false;


                                    }
                                    sub += drSub.Length;
                                }
                            }
                            //else
                            //{
                            //    ///添加组合产品附属项
                            //    if (drSub.Length > 0)
                            //    {
                            //        for (int j = 1; j <= drSub.Length; j++)
                            //        {
                            //            string sorderIndex = string.Format("{0:d3}", sProductNO.Length + j-1+i);

                            //            if (!(UpdatePreProduct(sOrderNo, sorderIndex, drSub[j - 1]["ProductNO"].ToString(), "001", drSub[j - 1]["fram"].ToString(), drSub[j - 1]["Box"].ToString(), drSub[j - 1]["Unit"].ToString(), drSub[j - 1]["Paper"].ToString(), drSub[j - 1]["Film"].ToString(), drSub[j - 1]["InsidePage"].ToString(), drSub[j - 1]["Biao"].ToString(), drSub[j - 1]["Ban"].ToString(), drSub[j - 1]["Diao"].ToString(), "0", "0", "1", "", drSub[j - 1]["ProductSellingPrice"].ToString(), sProduceState[i], sCreate[i], sCreateDate[i])
                            //           && UpdateOrderProduct(sOrderNo, sorderIndex, drSub[j - 1]["ProductNO"].ToString(), "001", drSub[j - 1]["fram"].ToString(), drSub[j - 1]["Box"].ToString(), drSub[j - 1]["Unit"].ToString(), drSub[j - 1]["Paper"].ToString(), drSub[j - 1]["Film"].ToString(), drSub[j - 1]["InsidePage"].ToString(), drSub[j - 1]["Biao"].ToString(), drSub[j - 1]["Ban"].ToString(), drSub[j - 1]["Diao"].ToString(), "0", "0", "1","", drSub[j - 1]["ProductSellingPrice"].ToString(), sProduceState[i], sCreate[i], sCreateDate[i])))
                            //                return false;
                            //        }
                            //    }
                            //}
                        }
                        else//B表示看样
                        {
                            if (!(UpdateOrderProduct(sOrderNO, sOrderIndex[i], sProductNO[i], sSeparateNO[i], sFram[i], sBox[i], sUnit[i], sPaper[i], sfilm[i], sInsidePage[i], sBiao[i], sBan[i], sDiao[i], sPageQuantity[i], sNegativeQuantity[i], sProductQuantity[i], sProductMemory[i], sProductSellingPrice[i], sProduceState[i], sCreate[i], sCreateDate[i])))
                                return false;
                        }
                    }
                    else if (sOption[i] == "DELETE")
                    {
                        if (sAorB == "A")
                        {
                            string sql = " AND ParentProductNO=" + sOrderIndex[i];
                            DataSet dsPreProduct = SearchPreProduct(sOrderNO, sql);
                            foreach (DataRow dr in dsPreProduct.Tables[0].Rows)
                            {
                                if (dr["ProductNO"].ToString().Contains("_sub"))//表示子产品
                                {
                                    if (!(DeletePreProduct(sOrderNO, dr["OrderIndex"].ToString()) && DeleteOrderProduct(sOrderNO, dr["OrderIndex"].ToString())))
                                        return false;
                                }
                            }
                            if (!(DeletePreProduct(sOrderNO, sOrderIndex[i]) && DeleteOrderProduct(sOrderNO, sOrderIndex[i])))
                                return false;
                        }
                        else
                        {
                            if (!(DeleteOrderProduct(sOrderNO, sOrderIndex[i])))
                                return false;
                        }
                    }
                }
                sub = 0;
                return true;
            }
            catch
            {

                return false;
            }

        }
        /// <summary>
        /// 保存预约产品
        /// zjj2012-02-23
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sProductNO"></param>
        /// <param name="sSeparateNO"></param>
        /// <param name="sImageNumber"></param>
        /// <param name="sProductNumber"></param>
        /// <param name="sProductSellingPrice"></param>
        /// <param name="sProduceState"></param>
        /// <param name="sCreate"></param>
        /// <param name="sCreateDate"></param>
        [WebMethod]
        public bool SavePreProductTwo(string sOrderNO, string sOrderIndex, string sProductNO, string sSeparateNO, string sFram, string sBox, string sUnit, string sPaper, string sfilm, string sInsidePage, string sBiao, string sBan, string sDiao, string sPageQuantity, string sNegativeQuantity, string sProductQuantity, string sProductMemory, string sProductSellingPrice, string sProduceState, string sCreate, string sCreateDate, string parentNo)
        {
            string sSql = "";
            //sSql = "insert into PreProducts (OrderNO, OrderIndex, ProductNO, SeparateNO, Fram, Box, Unit, Paper, film, InsidePage, Biao, Ban, Diao, PageQuantity, NegativeQuantity, ProductQuantity, ProductMemory, ProductSellingPrice, ProduceState, [Create], CreateDate) values ('" + sOrderNo + "','" + sOrderIndex + "', '" + sProductNO + "', '" + sSeparateNO + "','" + sFram + "', '" + sBox + "', '" + sUnit + "', '" + sPaper + "', '" + sfilm + "', '" + sInsidePage + "', '" + sBiao + "', '" + sBan + "', '" + sDiao + "', '" + sPageQuantity + "','" + sNegativeQuantity + "', '" + sProductQuantity + "', '" + sProductMemory + "', '" + sProductSellingPrice + "', '" + sProduceState + "', '" + sCreate + "', '" + sCreateDate + "') ";
            sSql = "insert into PreProducts (OrderNO, OrderIndex, ProductNO, SeparateNO, Fram, Box, Unit, Paper, film, InsidePage, Biao, Ban, Diao, PageQuantity, NegativeQuantity, ProductQuantity, ProductMemory, ProductSellingPrice, ProduceState, [Create], CreateDate,ParentProductNO) values ('" + sOrderNO + "','" + sOrderIndex + "', '" + sProductNO + "', '" + sSeparateNO + "','" + sFram + "', '" + sBox + "', '" + sUnit + "', '" + sPaper + "', '" + sfilm + "', '" + sInsidePage + "', '" + sBiao + "', '" + sBan + "', '" + sDiao + "', '" + sPageQuantity + "','" + sNegativeQuantity + "', '" + sProductQuantity + "', '" + sProductMemory + "', '" + sProductSellingPrice + "', '" + sProduceState + "', '" + sCreate + "', '" + sCreateDate + "','" + parentNo + "') ";
            return ExecuteSql(sSql);
        }
        /// <summary>
        /// 保存订单(看样)产品
        /// zjj2012-02-23
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sProductNO"></param>
        /// <param name="sSeparateNO"></param>
        /// <param name="sImageNumber"></param>
        /// <param name="sProductNumber"></param>
        /// <param name="sProductSellingPrice"></param>
        /// <param name="sProduceState"></param>
        /// <param name="sCreate"></param>
        /// <param name="sCreateDate"></param>
        [WebMethod]
        public bool SaveOrderProductTwo(string sOrderNO, string sOrderIndex, string sProductNO, string sSeparateNO, string sFram, string sBox, string sUnit, string sPaper, string sfilm, string sInsidePage, string sBiao, string sBan, string sDiao, string sPageQuantity, string sNegativeQuantity, string sProductQuantity, string sProductMemory, string sProductSellingPrice, string sProduceState, string sCreate, string sCreateDate, string sProcess, string parentNo)
        {
            string sSql = "";
            sSql = "insert into OrderProducts (OrderNO, OrderIndex, ProductNO, SeparateNO, Fram, Box, Unit, Paper, film, InsidePage, Biao, Ban, Diao, PageQuantity, NegativeQuantity, ProductQuantity,ProductMemory, ProductSellingPrice, ProduceState, [Create], CreateDate,ParentProductNO) values ('" + sOrderNO + "','" + sOrderIndex + "', '" + sProductNO + "', '" + sSeparateNO + "','" + sFram + "', '" + sBox + "', '" + sUnit + "', '" + sPaper + "', '" + sfilm + "', '" + sInsidePage + "', '" + sBiao + "', '" + sBan + "', '" + sDiao + "', '" + sPageQuantity + "', '" + sNegativeQuantity + "', '" + sProductQuantity + "', '" + sProductMemory + "', '" + sProductSellingPrice + "', '" + sProduceState + "', '" + sCreate + "', '" + sCreateDate + "','" + parentNo + "')";
            if (!ExecuteSql(sSql))
                return false;
            if (!InsertOrderLogo(sOrderNO, sOrderIndex, sSeparateNO, "", "P_05", "", sCreate, sCreateDate))
                return false;
            return true;
        }

        /// <summary>
        /// 保存订单(看样)产品
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sProductNO"></param>
        /// <param name="sSeparateNO"></param>
        /// <param name="sImageNumber"></param>
        /// <param name="sProductNumber"></param>
        /// <param name="sProductSellingPrice"></param>
        /// <param name="sProduceState"></param>
        /// <param name="sCreate"></param>
        /// <param name="sCreateDate"></param>
        [WebMethod]
        public bool SaveOrderProduct(string sOrderNO, string sOrderIndex, string sProductNO, string sSeparateNO, string sFram, string sBox, string sUnit, string sPaper, string sfilm, string sInsidePage, string sBiao, string sBan, string sDiao, string sPageQuantity, string sNegativeQuantity, string sProductQuantity, string sProductSellingPrice, string sProduceState, string sCreate, string sCreateDate, string sParentProductNO, string sProcess)
        {
            string sSql = "";
            sSql = "insert into OrderProducts (OrderNO, OrderIndex, ProductNO, SeparateNO, Fram, Box, Unit, Paper, film, InsidePage, Biao, Ban, Diao, PageQuantity, NegativeQuantity, ProductQuantity, ProductSellingPrice, ProduceState, [Create], CreateDate,ParentProductNO) values ('" + sOrderNO + "','" + sOrderIndex + "', '" + sProductNO + "', '" + sSeparateNO + "','" + sFram + "', '" + sBox + "', '" + sUnit + "', '" + sPaper + "', '" + sfilm + "', '" + sInsidePage + "', '" + sBiao + "', '" + sBan + "', '" + sDiao + "', '" + sPageQuantity + "', '" + sNegativeQuantity + "', '" + sProductQuantity + "', '" + sProductSellingPrice + "', '" + sProduceState + "', '" + sCreate + "', '" + sCreateDate + "','" + sParentProductNO + "')";
            if (!ExecuteSql(sSql))
                return false;
            if (!InsertOrderLogo(sOrderNO, sOrderIndex, sSeparateNO, "", "P_05", "", sCreate, sCreateDate))
                return false;
            return true;
        }
        /// <summary>
        /// 更新预约产品
        /// zjj2012-02-25
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sProductNO"></param>
        /// <param name="sSeparateNO"></param>
        /// <param name="sImageNumber"></param>
        /// <param name="sProductNumber"></param>
        /// <param name="sProductSellingPrice"></param>
        /// <param name="sProduceState"></param>
        /// <param name="sCreate"></param>
        /// <param name="sCreateDate"></param>
        [WebMethod]
        public bool UpdatePreProduct(string sOrderNO, string sOrderIndex, string sProductNO, string sSeparateNO, string sFram, string sBox, string sUnit, string sPaper, string sfilm, string sInsidePage, string sBiao, string sBan, string sDiao, string sPageQuantity, string sNegativeQuantity, string sProductQuantity, string sProductMemory, string sProductSellingPrice, string sProduceState, string sCreate, string sCreateDate, string parentNo)
        {
            string sSql = "";
            sSql = "Update PreProducts set  ProductNO= '" + sProductNO + "', Fram='" + sFram + "',Box='" + sBox + "', Unit='" + sUnit + "', Paper='" + sPaper + "', film='" + sfilm + "', InsidePage='" + sInsidePage + "', Biao='" + sBiao + "', Ban='" + sBan + "', Diao ='" + sDiao + "', PageQuantity='" + sPageQuantity + "', NegativeQuantity='" + sNegativeQuantity + "', ProductQuantity='" + sProductQuantity + "', ProductMemory='" + sProductMemory + "', ProductSellingPrice='" + sProductSellingPrice + "', ProduceState='" + sProduceState + "',ParentProductNO='" + parentNo + "' where OrderNO='" + sOrderNO + "' and OrderIndex='" + sOrderIndex + "' ";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 更新订单(看样)产品
        /// zjj2012-02-25
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sProductNO"></param>
        /// <param name="sSeparateNO"></param>
        /// <param name="sImageNumber"></param>
        /// <param name="sProductNumber"></param>
        /// <param name="sProductSellingPrice"></param>
        /// <param name="sProduceState"></param>
        /// <param name="sCreate"></param>
        /// <param name="sCreateDate"></param>
        [WebMethod]
        public bool UpdateOrderProducts(string sOrderNO, string sOrderIndex, string sProductNO, string sSeparateNO, string sFram, string sBox, string sUnit, string sPaper, string sfilm, string sInsidePage, string sBiao, string sBan, string sDiao, string sPageQuantity, string sNegativeQuantity, string sProductQuantity, string sProductMemory, string sProductSellingPrice, string sProduceState, string sCreate, string sCreateDate, string parentNo)
        {
            string sSql = "";
            sSql = "Update OrderProducts set  ProductNO= '" + sProductNO + "', Fram='" + sFram + "',Box='" + sBox + "', Unit='" + sUnit + "', Paper='" + sPaper + "', film='" + sfilm + "', InsidePage='" + sInsidePage + "', Biao='" + sBiao + "', Ban='" + sBan + "', Diao ='" + sDiao + "', PageQuantity='" + sPageQuantity + "', NegativeQuantity='" + sNegativeQuantity + "', ProductQuantity='" + sProductQuantity + "',ProductMemory='" + sProductMemory + "', ProductSellingPrice='" + sProductSellingPrice + "', ProduceState='" + sProduceState + "',ParentProductNO='" + parentNo + "' where OrderNO='" + sOrderNO + "' and OrderIndex='" + sOrderIndex + "' ";
            return ExecuteSql(sSql);
        }
        /// <summary>
        /// 更新预约产品
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sProductNO"></param>
        /// <param name="sSeparateNO"></param>
        /// <param name="sImageNumber"></param>
        /// <param name="sProductNumber"></param>
        /// <param name="sProductSellingPrice"></param>
        /// <param name="sProduceState"></param>
        /// <param name="sCreate"></param>
        /// <param name="sCreateDate"></param>
        [WebMethod]
        public bool UpdatePreProducts(string sOrderNO, string sOrderIndex, string sProductNO, string sSeparateNO, string sFram, string sBox, string sUnit, string sPaper, string sfilm, string sInsidePage, string sBiao, string sBan, string sDiao, string sPageQuantity, string sNegativeQuantity, string sProductQuantity, string sProductMemory, string sProductSellingPrice, string sProduceState, string sCreate, string sCreateDate)
        {
            string sSql = "";
            sSql = "Update PreProducts set  ProductNO= '" + sProductNO + "', Fram='" + sFram + "',Box='" + sBox + "', Unit='" + sUnit + "', Paper='" + sPaper + "', film='" + sfilm + "', InsidePage='" + sInsidePage + "', Biao='" + sBiao + "', Ban='" + sBan + "', Diao ='" + sDiao + "', PageQuantity='" + sPageQuantity + "', NegativeQuantity='" + sNegativeQuantity + "', ProductQuantity='" + sProductQuantity + "', ProductMemory='" + sProductMemory + "', ProductSellingPrice='" + sProductSellingPrice + "', ProduceState='" + sProduceState + "' where OrderNO='" + sOrderNO + "' and OrderIndex='" + sOrderIndex + "' ";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 更新订单(看样)产品
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sProductNO"></param>
        /// <param name="sSeparateNO"></param>
        /// <param name="sImageNumber"></param>
        /// <param name="sProductNumber"></param>
        /// <param name="sProductSellingPrice"></param>
        /// <param name="sProduceState"></param>
        /// <param name="sCreate"></param>
        /// <param name="sCreateDate"></param>
        [WebMethod]
        public bool UpdateOrderProduct(string sOrderNO, string sOrderIndex, string sProductNO, string sSeparateNO, string sFram, string sBox, string sUnit, string sPaper, string sfilm, string sInsidePage, string sBiao, string sBan, string sDiao, string sPageQuantity, string sNegativeQuantity, string sProductQuantity, string sProductMemory, string sProductSellingPrice, string sProduceState, string sCreate, string sCreateDate)
        {
            string sSql = "";
            sSql = "Update OrderProducts set  ProductNO= '" + sProductNO + "', Fram='" + sFram + "',Box='" + sBox + "', Unit='" + sUnit + "', Paper='" + sPaper + "', film='" + sfilm + "', InsidePage='" + sInsidePage + "', Biao='" + sBiao + "', Ban='" + sBan + "', Diao ='" + sDiao + "', PageQuantity='" + sPageQuantity + "', NegativeQuantity='" + sNegativeQuantity + "', ProductQuantity='" + sProductQuantity + "',ProductMemory='" + sProductMemory + "', ProductSellingPrice='" + sProductSellingPrice + "', ProduceState='" + sProduceState + "' where OrderNO='" + sOrderNO + "' and OrderIndex='" + sOrderIndex + "' ";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 删除预约产品
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sProductNO"></param>
        /// <param name="sSeparateNO"></param>
        [WebMethod]
        public bool DeletePreProduct(string sOrderNO, string sOrderIndex)
        {
            string sSql = "";
            sSql = "Delete PreProducts where OrderNO='" + sOrderNO + "' and OrderIndex= '" + sOrderIndex + "' ";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 删除订单(看样)产品
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sProductNO"></param>
        /// <param name="sSeparateNO"></param>
        [WebMethod]
        public bool DeleteOrderProduct(string sOrderNO, string sOrderIndex)
        {
            string sSql = "";
            sSql = "Delete OrderProducts where OrderNO='" + sOrderNO + "' and OrderIndex= '" + sOrderIndex + "' ";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 添加流程信息
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sProductNO"></param>
        /// <param name="sSeparateNO"></param>
        /// <param name="sLogoIndex"></param>
        /// <param name="sProcess"></param>
        /// <param name="sDepartmentNO"></param>
        /// <param name="sCreate"></param>
        /// <param name="sCreateDate"></param>
        [WebMethod]
        public bool InsertOrderLogo(string sOrderNO, string sOrderIndex, string sSeparateNO, string sLogoIndex, string sProcess, string sDepartmentNO, string sCreate, string sCreateDate)
        {
            try
            {
                string sSql = "";
                sSql = "select Process from OrderLogo where OrderNO='" + sOrderNO + "' and OrderIndex='" + sOrderIndex + "' and SeparateNO='" + sSeparateNO + "' and State=1 ";
                DataSet myds = ExecuteDataSet(sSql, "Temp");
                if (myds != null && myds.Tables[0].Rows.Count > 0)
                {
                    string sOldProcess = myds.Tables[0].Rows[0]["Process"].ToString();
                    string sNewProcess = sProcess;
                    if (double.Parse(sOldProcess.Substring(2, sOldProcess.Length - 2)) >= double.Parse(sNewProcess.Substring(2, sNewProcess.Length - 2)))
                    {
                        //表示已过当前流程
                        sSql += "declare @a int set @a=isnull((SELECT MAX(LogoIndex) AS Expr1 FROM OrderLogo where OrderNO='" + sOrderNO + "' and OrderIndex='" + sOrderIndex + "' and SeparateNO='" + sSeparateNO + "'),0)+1 set @a=right(cast(@a+10000 as varchar(20)),3) Insert into OrderLogo (OrderNO, OrderIndex, SeparateNO, LogoIndex, Process, DepartmentNO, [Create], CreateDate, State) values ('" + sOrderNO + "','" + sOrderIndex + "','" + sSeparateNO + "',@a,'" + sProcess + "','" + sDepartmentNO + "','" + sCreate + "','" + sCreateDate + "',0)";
                    }
                    else
                    {
                        //表示进入新流程
                        sSql = "Update OrderLogo set State=0 where OrderNO='" + sOrderNO + "' and OrderIndex='" + sOrderIndex + "' and SeparateNO='" + sSeparateNO + "' ";
                        sSql += "declare @a int set @a=isnull((SELECT MAX(LogoIndex) AS Expr1 FROM OrderLogo where OrderNO='" + sOrderNO + "' and OrderIndex='" + sOrderIndex + "' and SeparateNO='" + sSeparateNO + "'),0)+1 set @a=right(cast(@a+10000 as varchar(20)),3) Insert into OrderLogo (OrderNO, OrderIndex, SeparateNO, LogoIndex, Process, DepartmentNO, [Create], CreateDate) values ('" + sOrderNO + "','" + sOrderIndex + "','" + sSeparateNO + "',@a,'" + sProcess + "','" + sDepartmentNO + "','" + sCreate + "','" + sCreateDate + "')";
                    }
                }
                else
                {
                    //表示进入新流程
                    sSql = "Update OrderLogo set State=0 where OrderNO='" + sOrderNO + "' and OrderIndex='" + sOrderIndex + "' and SeparateNO='" + sSeparateNO + "' ";
                    sSql += "declare @a int set @a=isnull((SELECT MAX(LogoIndex) AS Expr1 FROM OrderLogo where OrderNO='" + sOrderNO + "' and OrderIndex='" + sOrderIndex + "' and SeparateNO='" + sSeparateNO + "'),0)+1 set @a=right(cast(@a+10000 as varchar(20)),3) Insert into OrderLogo (OrderNO, OrderIndex, SeparateNO, LogoIndex, Process, DepartmentNO, [Create], CreateDate) values ('" + sOrderNO + "','" + sOrderIndex + "','" + sSeparateNO + "',@a,'" + sProcess + "','" + sDepartmentNO + "','" + sCreate + "','" + sCreateDate + "')";
                }
                myds.Dispose();
                return ExecuteSql(sSql);
            }
            catch { return false; }
        }

        [WebMethod]
        public bool InsertOrderLogoBat(string sOrderNO, string sProcess, string sDepartmentNO, string sCreate, string sCreateDate)
        {

            DataSet myds = new DataSet();
            try
            {
                OpenConn();
                string Sql = "select OrderNO, OrderIndex, SeparateNO,CONVERT(varchar,getdate(),120) as CurrentTime from OrderProducts where OrderNO='" + sOrderNO + "' ";//update by wujianbo 20120512 取服务器当前时间
                SqlDataAdapter myda = new SqlDataAdapter(Sql, Conn);
                myda.Fill(myds, "OrderProducts");
                CloseConn();
            }
            catch { return false; }
            if (myds.Tables[0].Rows.Count > 0)
            {
                DataRow[] dr = myds.Tables[0].Select("1=1");
                for (int i = 0; i < dr.Length; i++)
                {
                    InsertOrderLogo(sOrderNO, dr[i]["OrderIndex"].ToString(), dr[i]["SeparateNO"].ToString(), "", sProcess, sDepartmentNO, sCreate, dr[i]["CurrentTime"].ToString());
                }
            }
            return true;

        }

        [WebMethod]
        public bool InsertOrderLogoNew(string sOrderNO, string sOrderIndex, string sSeparateNO, string sLogoIndex, string sProcess, string sDepartmentNO, string sCreate, string sCreateDate)
        {
            try
            {
                string sSql = "";
                //表示进入新流程
                sSql = "Update OrderLogo set State=0 where OrderNO='" + sOrderNO + "' and OrderIndex='" + sOrderIndex + "' and SeparateNO='" + sSeparateNO + "' ";
                sSql += "declare @a int set @a=isnull((SELECT MAX(LogoIndex) AS Expr1 FROM OrderLogo where OrderNO='" + sOrderNO + "' and OrderIndex='" + sOrderIndex + "' and SeparateNO='" + sSeparateNO + "'),0)+1 set @a=right(cast(@a+10000 as varchar(20)),3) Insert into OrderLogo (OrderNO, OrderIndex, SeparateNO, LogoIndex, Process, DepartmentNO, [Create], CreateDate) values ('" + sOrderNO + "','" + sOrderIndex + "','" + sSeparateNO + "',@a,'" + sProcess + "','" + sDepartmentNO + "','" + sCreate + "','" + sCreateDate + "')";
                return ExecuteSql(sSql);
            }
            catch { return false; }
        }

        /// <summary>
        /// 批量添加订单所有产品流程信息
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sProcess"></param>
        /// <param name="sDepartmentNO"></param>
        /// <param name="sCreate"></param>
        /// <param name="sCreateDate"></param>
        /// <returns></returns>
        [WebMethod]
        public bool InsertOrderLogoBatNew(string sOrderNO, string sProcess, string sDepartmentNO, string sCreate, string sCreateDate)
        {
            DataSet myds = new DataSet();
            try
            {
                OpenConn();
                string Sql = "select OrderNO, OrderIndex, SeparateNO from OrderProducts where OrderNO='" + sOrderNO + "' ";
                SqlDataAdapter myda = new SqlDataAdapter(Sql, Conn);
                myda.Fill(myds, "OrderProducts");
                CloseConn();
            }
            catch { return false; }
            if (myds.Tables[0].Rows.Count > 0)
            {
                DataRow[] dr = myds.Tables[0].Select("1=1");
                for (int i = 0; i < dr.Length; i++)
                {
                    InsertOrderLogoNew(sOrderNO, dr[i]["OrderIndex"].ToString(), dr[i]["SeparateNO"].ToString(), "", sProcess, "", sCreate, sCreateDate);
                }
            }
            return true;
        }


        /// <summary>
        /// 查询订单是否有[导卡完成]的状态
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <returns></returns>
        [WebMethod]
        public bool SearchOrderLogoIsImportting(string sOrderNO)
        {
            string sSql = "Select distinct OrderNO from OrderLogo where OrderNO='" + sOrderNO + "' and Process='P_47' ";
            if (ExecuteSqlToString(sSql).Trim() == "")
                return false;
            else
                return true;
        }
        /// <summary>
        /// 查询订单是否有[看样完成]的状态
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <returns></returns>
        [WebMethod]
        public bool SearchOrderLogeIsChoosed(string sOrderNO)
        {
            string sSql = "Select distinct OrderNO from OrderLogo where OrderNO='" + sOrderNO + "' and Process='P_55' ";
            if (ExecuteSqlToString(sSql).Trim() == "")
                return false;
            else
                return true;
        }

        /// <summary>
        /// 添加流程信息(只记录流程,不改变状态)
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sProductNO"></param>
        /// <param name="sSeparateNO"></param>
        /// <param name="sLogoIndex"></param>
        /// <param name="sProcess"></param>
        /// <param name="sDepartmentNO"></param>
        /// <param name="sCreate"></param>
        /// <param name="sCreateDate"></param>
        [WebMethod]
        public bool InsertOrderLogoZ(string sOrderNO, string sOrderIndex, string sSeparateNO, string sLogoIndex, string sProcess, string sDepartmentNO, string sCreate, string sCreateDate)
        {
            string sSql = ""; //"Update OrderLogo set State=0 where OrderNO='" + sOrderNo + "' and ProductNO='" + sProductNO + "' and SeparateNO='" + sSeparateNO + "' ";
            sSql += "declare @a int set @a=isnull((SELECT MAX(LogoIndex) AS Expr1 FROM OrderLogo where OrderNO='" + sOrderNO + "' and OrderIndex='" + sOrderIndex + "' and SeparateNO='" + sSeparateNO + "'),0)+1 set @a=right(cast(@a+10000 as varchar(20)),3) Insert into OrderLogo (OrderNO, OrderIndex, SeparateNO, LogoIndex, Process, DepartmentNO, [Create], CreateDate, State) values ('" + sOrderNO + "','" + sOrderIndex + "','" + sSeparateNO + "',@a,'" + sProcess + "','" + sDepartmentNO + "','" + sCreate + "','" + sCreateDate + "',0)";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 批量添加订单所有产品流程信息(只记录流程,不改变状态)
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sProcess"></param>
        /// <param name="sDepartmentNO"></param>
        /// <param name="sCreate"></param>
        /// <param name="sCreateDate"></param>
        /// <returns></returns>
        [WebMethod]
        public bool InsertOrderLogoBatZ(string sOrderNO, string sProcess, string sDepartmentNO, string sCreate, string sCreateDate)
        {
            DataSet myds = new DataSet();
            try
            {
                OpenConn();
                string Sql = "select OrderNO, OrderIndex, SeparateNO from OrderProducts where OrderNO='" + sOrderNO + "' ";
                SqlDataAdapter myda = new SqlDataAdapter(Sql, Conn);
                myda.Fill(myds, "OrderProducts");
                CloseConn();
            }
            catch { return false; }
            if (myds.Tables[0].Rows.Count > 0)
            {
                DataRow[] dr = myds.Tables[0].Select("1=1");
                for (int i = 0; i < dr.Length; i++)
                {
                    InsertOrderLogoZ(sOrderNO, dr[i]["OrderIndex"].ToString(), dr[i]["SeparateNO"].ToString(), "", sProcess, "", sCreate, sCreateDate);
                }
            }
            return true;
        }

        [WebMethod]
        public DataSet ProcessRecordDisplay(string sql)
        {
            string sSql = "SELECT DISTINCT OrderNO, Process, DepartmentName, [Create], CreateDate FROM VIEW_ProcessList where 1=1 " + sql + " order by CreateDate";
            return ExecuteDataSet(sSql, "ProcessRecordDisplay");
        }


        /// <summary>
        /// 简易查询
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchOrdersSample(string sql)
        {
            //string sSql = "Select distinct top 400 CardNO, CustomerNO, OrderNO, CustomerName1, CustomerName2, ImagePath, BackupPath, SuiteName, OrderSuitePrice, ImageCount, ShootDateN, ShootEmployeeN, ShootAddressN, OrderDate,Process from VIEW_SampleOrders where 1=1 " + sql + "order by OrderDate desc";
            string sSql = "Select distinct top 400 CardNO, CustomerNO, OrderNO, FPH, CustomerName1, CustomerName2, ImagePath, BackupPath, SuiteName, OrderSuitePrice, ImageCount, ShootDateN, ShootEmployeeN, ShootAddressN, OrderDate,Process,PreGetGoodsAddress,PreGetGoodsDate,ShootMemory,OrderMemory from VIEW_SampleOrders where 1=1 and customDelete=0" + sql;//zjj2012-03-28//update by wujianbo 20120919 增加取件时间与地点
            //Edit by Caijinsong 2013-3-6 Add FPH
            //string sSql = "with departParNO as (" +
            //            "select DepartmentNO,ParDepartmentNO,DepartmentName,IsDelete " +
            //            "from Department " +
            //            "where DepartmentNO = '" + sEmployeeDepartmentNO + "' " +
            //            "union all " +
            //            "select d.DepartmentNO,d.ParDepartmentNO,d.DepartmentName,d.IsDelete " +
            //            "FROM Department d inner join departParNO Par on d.ParDepartmentNO = Par.DepartmentNO where d.IsDelete=0) " +
            //            "Select distinct top 400 CardNO, CustomerNO, OrderNO, CustomerName1, CustomerName2, ImagePath, BackupPath, SuiteName, OrderSuitePrice, ImageCount, ShootDateN, ShootEmployeeN, ShootAddressN, OrderDate,Process,PreGetGoodsAddress,PreGetGoodsDate from departParNO inner join VIEW_Orders on departParNO.DepartmentName = VIEW_Orders.OrderDepartment where 1=1 and customDelete=0" + sql + "order by OrderDate desc";
            return ExecuteDataSet(sSql, "VIEW_SampleOrders");
        }

        /// <summary>
        /// 订单查询[客户表+订单表]-列表数据
        /// </summary>
        /// <param name="sSql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchOrders(string sColumns, string sql)
        {
            string sSql = "select distinct " + sColumns + " from dbo.VIEW_Orders where 1=1 and IsDelete=0 " + sql;// +" order by OrderDate desc ";//zjj2012-03-22修改，筛选出客户资料未被删除的
            return ExecuteDataSet(sSql, "OrderSearch");
        }

        [WebMethod]
        public string SearchSMSOld(string phone)
        {
            string sSql = "select   top 1   SmsContent     from SMSOld where    smsphone='" + phone + "' and  CustomerName ='微信' order by SmsTime desc ";
            return ExecuteSqlToString(sSql);
        }

        /// <summary>
        /// 订单查询[客户表+订单表]-订单数据
        /// </summary>
        /// <param name="sSql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchOrder(string sql)
        {

            string sSql = "select distinct CardNO, CustomerNO, OrderNO, SuiteNO, FPH, IntroducerCardNO, CustomerName1, CustomerName2,MobilePhone1,MobilePhone2, MarryDate, ActivityName, SuiteTypeName, SuiteName, SuitePrice,Discount,ReducesPresently,ReducesPresently2,ReducesPresently3,AddPresently,OrderSuitePrice, ImageCount, OrderDepartment,OrderEmployee,OrderEmployee2, onLine, OrderDate, PreClothesDate, PreDressDate, PreShootDateN, PreShootDateW, PreChooseDate, PreLookDate, PreGetGoodsDate, ClothesAddress, ClothesEmployee, ClothesDate, ClothesMemory, DressAddress, DressEmployee, ModelEmployee, DressDate, DressMemory, ShootAddressN, ShootEmployeeN, DressEmployeeN, ShootDateN, ShootMemoryN, ShootAddressW, ShootEmployeeW, DressEmployeeW, ShootDateW, ShootMemoryW, ChooseAddress, ChooseEmployee, ChooseDate, ChooseMeMory, LookAddress, LookEmployee, LookDate, LookMemory, GetGoodsAddress, GetGoodsEmployee, GetGoodsDate, GetGoodsMemory, OrderMemory, ImagePath, ImageXSPath, ImageSJPath, BackupPath, OrdersIsDelete, OrderState, LossType, LossMemory, Process ,EstimateShootTimeYearMonth ,EstimateShootTimeDay,ShootSites,OrderSource,ISFinished,Pregnant from VIEW_Orders where 1=1 " + sql;
            return ExecuteDataSet(sSql, "OrderSearch");
        }
        /// <summary>
        /// zjj2012-06-02
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchOrders(string sql)
        {
            string sSql = "select [CustomerNO] ,[OrderNO] ,[FPH] ,[ActivityNO] ,[SuiteTypeNO] ,[SuiteNO] ,[SuitePrice] ,[Discount],[ReducesPresently],[OrderSuitePrice],[ImageCount],[orderDepartmentNo],[OrderEmployeeNO],[OrderDate],[PreClothesDate] ,[PreDressDate] ,[PreShootDateN] ,[PreShootDateW],[PreChooseDate],[PreLookDate] ,[PreGetGoodsDate],[ClothesAddress],[ClothesEmployeeNO],[ClothesDate],[ClothesMemory],[DressAddress],[DressEmployeeNO] ,[ModelEmployeeNO],[DressDate] ,[DressMemory],[ShootAddressN],[ShootEmployeeNON],[DressEmployeeNON] ,[ShootDateN],[ShootTitle] ,[ShootTimeN1],[ShootTimeN2],[ShootMemory] ,[ShootMemoryN],[ShootAddressW],[ShootEmployeeNOW],[DressEmployeeNOW],[ShootDateW] ,[ShootMemoryW] ,[ChooseAddress] ,[ChooseEmployeeNO] ,[ChooseDate],[ChooseMeMory] ,[LookAddress],[LookEmployeeNO] ,[LookDate],[LookMemory],[GetGoodsAddress] ,[GetGoodsEmployeeNO],[GetGoodsDate],[GetGoodsMemory],[OrderMemory],[ImagePath],[BackupPath] ,[ImageXSPath] ,[ImageSJPath],[Process] ,[OrderState],[LossType] ,[LossMemory],[IsDelete] from Orders where 1=1 " + sql;
            return ExecuteDataSet(sSql, "OrdersSearch");
        }

        /// <summary>
        /// 订单复杂查询
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchOrdersComplex(string sql)
        {
            string sSql = "Select distinct CustomerNO, CardNO, IntroducerCardNO, CustomerName1, Birthday1, MobilePhone1, Telephone1, QQ_MSN1, Email1, Job1, Address1, ZipCode1, CustomerName2, Birthday2, MobilePhone2, Telephone2, QQ_MSN2, Email2, Job2, ZipCode2, MarryDate, CustomerSource, ImformationSource, WishRecommend, CreateEmployee, CreateDate, OrderNO, FPH, SuiteName, SuitePrice, Discount, ReducesPresently, OrderSuitePrice, ImageCount, OrderDepartment, OrderEmployee, OrderDate, ClothesAddress, ClothesEmployee, ClothesDate, ClothesMemory, DressAddress, DressEmployee, ModelEmployee, DressDate, DressMemory, ShootAddressN, ShootEmployeeN, ShootDateN, ShootMemoryN, ShootAddressW, ShootEmployeeW, ShootDateW, ShootMemoryW, ChooseAddress, ChooseEmployee, ChooseDate, ChooseMeMory, LookAddress, LookEmployee, LookDate, LookMemory, GetGoodsAddressNO, GetGoodsAddress, GetGoodsEmployeeNO, GetGoodsEmployee, GetGoodsDate, GetGoodsMemory, ImagePath, BackupPath, OrdersIsDelete, ProcessCode, Process, OrderLogoEmployee, PreClothesDate, PreDressDate, PreShootDateN, PreShootDateW, PreChooseDate, PreLookDate, PreGetGoodsDate, IntroNumber from VIEW_SearchOrder_Complex where 1=1 " + sql;
            return ExecuteDataSet(sSql, "SearchOrdersComplex");
        }

        /// <summary>
        /// 查询订单详细内容
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchOrderByOrderNO(string sOrderNO)
        {
            string sSql = "select Customers.CustomerNO,Customers.CardNO,Customers.CustomerName1,Customers.CustomerName2,Orders.OrderNO,Orders.FPH,Orders.SuiteNO,Orders.SuitePrice,Orders.Discount,Orders.OrderSuitePrice,Orders.ImageCount,Orders.orderDepartmentNo,Orders.OrderEmployeeNO,Orders.ShootAddressN,Orders.ShootEmployeeNON,Orders.ShootDateN,Orders.ShootAddressW,Orders.ShootEmployeeNOW,Orders.ShootDateW from Customers inner join Orders on Customers.CustomerNO=Orders.CustomerNO where OrderNO='" + sOrderNO + "' ";
            return ExecuteDataSet(sSql, "Orders");
        }
        /// <summary>
        /// 查询预约套系详细内容
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchPreSuiteByOrderNO(string sOrderNO)
        {
            string sSql = "SELECT dbo.Products.BackProductTypeNO,dbo.Products.BackProductNO,dbo.Products.ProductSizeA,dbo.Products.ProductSizeB, dbo.PreProducts.OrderNO, PreProducts.OrderIndex, dbo.PreProducts.ProductNO, dbo.PreProducts.SeparateNO, dbo.Products.ProductName, ProductSize=(dbo.Products.ProductSizeA+'*'+dbo.Products.ProductSizeB), dbo.ProductType.ProductTypeName, dbo.PreProducts.Fram, dbo.PreProducts.Box, dbo.PreProducts.Unit, dbo.PreProducts.Paper, dbo.PreProducts.film, dbo.PreProducts.InsidePage, dbo.PreProducts.Biao, dbo.PreProducts.Ban, dbo.PreProducts.Diao, dbo.PreProducts.PageQuantity, dbo.PreProducts.NegativeQuantity, dbo.PreProducts.ProductQuantity, dbo.PreProducts.ProductMemory, dbo.PreProducts.ProductSellingPrice, dbo.Products.ProductCostPrice, dbo.PreProducts.ProduceState, dbo.PreProducts.[Create], dbo.PreProducts.CreateDate, dbo.PreProducts.Approval_Department, dbo.PreProducts.Approval_Employee, dbo.PreProducts.Approval_Number, dbo.PreProducts.Approval_Date,dbo.PreProducts.ParentProductNO FROM dbo.PreProducts INNER JOIN dbo.Products ON dbo.PreProducts.ProductNO = dbo.Products.ProductNO INNER JOIN dbo.ProductType ON dbo.Products.ProductTypeNO = dbo.ProductType.ProductTypeNO where dbo.PreProducts.OrderNO='" + sOrderNO + "' order by  dbo.PreProducts.OrderNO, PreProducts.OrderIndex, dbo.PreProducts.SeparateNO";//update by wujianbo 20130201 增加后期产品编号、后期产品类型编号
            return ExecuteDataSet(sSql, "OrderProducts");
        }

        /// <summary>
        /// 查询订单套系详细内容
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchOrderSuiteByOrderNO(string sOrderNO)
        {
            //string sSql = "SELECT OrderNO, ProductNO, OrderIndex, SeparateNO, ProductName, ProductSize, ProductTypeName, Fram, Box, Unit, Paper, film, InsidePage, Biao, Ban, Diao, ChooseNegativeQuantity, NegativeQuantity, PageQuantity, ProductQuantity, ProductMemory, ProductSellingPrice, ProduceState, [Create], CreateDate FROM v_OrderProducts where OrderNO='" + sOrderNo + "' Order by OrderNO, OrderIndex, SeparateNO";
            string sSql = "SELECT OrderNO, ProductNO, OrderIndex, SeparateNO, ProductName, ProductSize, ProductTypeName, Fram, Box, Unit, Paper, film, InsidePage, Biao, Ban, Diao, ChooseNegativeQuantity, NegativeQuantity, PageQuantity, ProductQuantity, ProductMemory, ProductSellingPrice, ProductCostPrice, ProduceState, [Create], CreateDate,ParentProductNO,IsDelete,ProductElement FROM v_OrderProducts where OrderNO='" + sOrderNO + "' Order by CreateDate,ProductNO,OrderIndex";
            return ExecuteDataSet(sSql, "OrderProducts");
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="OrderNO"></param>
        [WebMethod]
        public void ClearSubProducts(string OrderNO)
        {
            string sSql = "update OrderProducts set ProduceState='回收' where OrderNO='" + OrderNO + "' and not exists (select 1 from OrderProducts op where OrderProducts.ParentProductNO=op.OrderIndex and OrderProducts.OrderNO=op.OrderNO)";
            ExecuteNoneQuery(sSql);
        }

        /// <summary>
        /// 查询订单套系详细内容
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchOrderSuiteByOrderNO1(string sOrderNO, string sqlwhere)//create by wujianbo
        {
            //string sSql = "SELECT OrderNO, ProductNO, OrderIndex, SeparateNO, ProductName, ProductSize, ProductTypeName, Fram, Box, Unit, Paper, film, InsidePage, Biao, Ban, Diao, ChooseNegativeQuantity, NegativeQuantity, PageQuantity, ProductQuantity, ProductMemory, ProductSellingPrice, ProduceState, [Create], CreateDate FROM v_OrderProducts where OrderNO='" + sOrderNo + "' Order by OrderNO, OrderIndex, SeparateNO";
            //string sSql = "SELECT OrderNO, ProductNO, OrderIndex, SeparateNO, ProductName, ProductSize, ProductTypeName, Fram, Box, Unit, Paper, film, InsidePage, Biao, Ban, Diao, ChooseNegativeQuantity, NegativeQuantity, PageQuantity, ProductQuantity, ProductMemory, ProductSellingPrice, ProduceState, [Create], CreateDate,IsDelete FROM v_OrderProducts where OrderNO='" + sOrderNo + "' " + sqlwhere + " Order by CreateDate,ProductNO,OrderIndex";
            //string sSql = "SELECT v.OrderNO, v.ProductNO, v.OrderIndex, v.SeparateNO, ProductName, ProductSize, ProductTypeName, v.Fram, v.Box, v.Unit, v.Paper, v.film, v.InsidePage, v.Biao, v.Ban, v.Diao, ChooseNegativeQuantity, v.NegativeQuantity, v.PageQuantity, v.ProductQuantity, p.ProductMemory, v.ProductSellingPrice, v.ProduceState, v.[Create], v.CreateDate,v.ParentProductNO,IsDelete FROM v_OrderProducts v,PreProducts p where v.OrderNO=p.OrderNO and v.ProductNO=p.ProductNO  and v.OrderNO='" + sOrderNo + "' " + sqlwhere + "  Order by v.CreateDate,v.ProductNO,v.OrderIndex";
            string sSql = "SELECT v.OrderNO, v.ProductNO, v.OrderIndex, v.SeparateNO, ProductName, ProductSize, ProductTypeName, v.Fram, v.Box, v.Unit, v.Paper, v.film, v.InsidePage, v.Biao, v.Ban, v.Diao, ChooseNegativeQuantity, v.NegativeQuantity, v.PageQuantity, v.ProductQuantity, v.ProductMemory, v.ProductSellingPrice, v.ProduceState, v.[Create], v.CreateDate,v.ParentProductNO,IsDelete FROM v_OrderProducts v where v.OrderNO='" + sOrderNO + "' " + sqlwhere + "  Order by v.CreateDate,v.ProductNO,v.OrderIndex";
            return ExecuteDataSet(sSql, "OrderProducts");
        }


        /// <summary>
        /// 保存订单产品照片
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sProductNO"></param>
        /// <param name="sSeparateNO"></param>
        /// <param name="sFile"></param>
        /// <returns></returns>
        [WebMethod]
        public bool SaveOrderProductImage(string sOrderNO, string sOrderIndex, string sSeparateNO, string sProductNO, string[] sFile, string sDepartmentNO, string sEmployeeNO)
        {
            string sSql = "declare @a int set @a=isnull((SELECT MAX(ImageIndex) AS Expr1 FROM OrderProductImage where OrderNO='" + sOrderNO + "' and OrderIndex='" + sOrderIndex + "' and SeparateNO='" + sSeparateNO + "' and ProductNO='" + sProductNO + "' ),0) ";
            for (int i = 0; i < sFile.Length; i++)
            {
                //sSql += "if not exists(select * from dbo.OrderProductImage where OrderNO='" + sOrderNo + "' and OrderIndex='" + sOrderIndex + "' and SeparateNO='" + sSeparateNO + "' and ProductNO='" + sProductNO + "' and [FileName]='" + sFile[i] + "') Insert into OrderProductImage ( OrderNO, OrderIndex, ProductNO, SeparateNO, ImageIndex, [FileName]) Values ('" + sOrderNo + "','" + sOrderIndex + "','" + sProductNO + "','" + sSeparateNO + "',@a+" + (i + 1) + ",'" + sFile[i] + "') else Delete OrderProductImage where OrderNO='" + sOrderNo + "' and OrderIndex='" + sOrderIndex + "' and SeparateNO='" + sSeparateNO + "' and ProductNO='" + sProductNO + "' and [FileName]='" + sFile[i] + "' ";
                //update by caijinsong 2013-10-10
                sSql += @"if not exists(select 1 from dbo.OrderProductImage where OrderNO='" + sOrderNO + "' and OrderIndex='" + sOrderIndex + "' and SeparateNO='" + sSeparateNO + "' and ProductNO='" + sProductNO + "' and [FileName]='" + sFile[i] + @"') 
begin
Insert into OrderProductImage 
( OrderNO, OrderIndex, ProductNO, SeparateNO, ImageIndex, [FileName]) 
Values ('" + sOrderNO + "','" + sOrderIndex + "','" + sProductNO + "','" + sSeparateNO + "',@a+" + (i + 1) + ",'" + sFile[i] + @"');
insert into Logo (OrderNO,OrderIndex,Process,DepartmentNO,[Create],CreateDate,[State],LogoType,LogoContext) 
values ('" + sOrderNO + "','" + sOrderIndex + "','06_037','" + sDepartmentNO + "','" + sEmployeeNO + "',getdate(),'0','操作日志','" + sFile[i] + " " + "入册" + " " + sProductNO + @"')
end
else
begin 
Delete OrderProductImage where OrderNO='" + sOrderNO + "' and OrderIndex='" + sOrderIndex + "' and SeparateNO='" + sSeparateNO + "' and ProductNO='" + sProductNO + "' and [FileName]='" + sFile[i] + @"';
insert into Logo (OrderNO,OrderIndex,Process,DepartmentNO,[Create],CreateDate,[State],LogoType,LogoContext) 
values ('" + sOrderNO + "','" + sOrderIndex + "','06_038','" + sDepartmentNO + "','" + sEmployeeNO + "',getdate(),'0','操作日志','" + sProductNO + " " + "删除" + " " + sFile[i] + @"')
end 
";
            }
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 删除订单产品照片
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sProductNO"></param>
        /// <param name="sSeparateNO"></param>
        /// <param name="sFile"></param>
        /// <returns></returns>
        [WebMethod]
        public bool DeleteOrderProductImage(string sOrderNO, string sProductNO, string sSeparateNO, string[] sFile)
        {
            string sSql = "";
            for (int i = 0; i < sFile.Length; i++)
            {
                sSql += "Delete OrderProductImage where OrderNO='" + sOrderNO + "' and ProductNO='" + sProductNO + "' and SeparateNO='" + sSeparateNO + "' and [FileName]='" + sFile[i] + "' ";
            }
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 查询订单产品照片
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sProductNO"></param>
        /// <param name="sSeparateNO"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchOrderProductImage(string sql)
        {
            string sSql = "select  OrderNO, OrderIndex, ProductNO, SeparateNO, ImageIndex, [FileName] from OrderProductImage where 1=1 " + sql;
            return ExecuteDataSet(sSql, "OrderProductImage");
        }

        /// <summary>
        /// 版本信息
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public string[] SearchEditionManager()
        {
            string sSql = "select EditionNO, EditionName, [Default],CustomerName1,CustomerName2,MemorizeDay from EditionManager where [Default]=1";
            DataSet myds = ExecuteDataSet(sSql, "SearchEditionManager");
            string[] str = new string[5];
            if (myds.Tables[0].Rows.Count > 0)
            {
                str[0] = myds.Tables[0].Rows[0]["EditionNO"].ToString();
                str[1] = myds.Tables[0].Rows[0]["EditionName"].ToString();
                str[2] = myds.Tables[0].Rows[0]["CustomerName1"].ToString();
                str[3] = myds.Tables[0].Rows[0]["CustomerName2"].ToString();
                str[4] = myds.Tables[0].Rows[0]["MemorizeDay"].ToString();
            }
            return str;
        }

        [WebMethod]
        public DataSet SearchRateEmployee(string sql)
        {
            string sSql = @"SELECT distinct ID, EmployeeName,DepartMent,Floor,Duty from RateEmployees where 1=1  " + sql;
            return ExecuteDataSet(sSql, "员工考评项");

        }
        [WebMethod]
        public bool AddRateEmployee(string sql)
        {

            string sSql = @"insert into RateEmployees values " + sql;
            return ExecuteSql(sSql);

        }
        [WebMethod]
        public bool UpdateRateEmployee(string ID, string employeeName, string duty, string dePatrMent, string Floor)
        {

            string sSql = @"if exists(select id from RateEmployees where ID='" + ID + "')";
            sSql += " update RateEmployees set employeeName='" + employeeName + "', duty='" + duty + "', dePartMent='" + dePatrMent + "', Floor='" + Floor + "' where ID='" + ID + "'";
            return ExecuteSql(sSql);

        }
        [WebMethod]
        public bool DeleteRateEmployee(string ID)
        {
            string sSql = " delete RateEmployees  where ID='" + ID + "'";
            return ExecuteSql(sSql);

        }

        [WebMethod]
        public DataSet SearchRateOption(string sql)
        {
            string sSql = @"SELECT distinct [RateOption] ,[veryGood] ,[Good],[normal],[bad] FROM [ERP].[dbo].[EmployeeRate] where 1=1  " + sql;
            return ExecuteDataSet(sSql, "员工考评项");

        }


        #endregion

        #region 控制管理
        /// <summary>
        /// 保存控制表模版
        /// </summary>
        /// <param name="sControlType">摄影、礼服、看样、看版、取件、新娘妆</param>
        /// <param name="sControlDate1">开始日期</param>
        /// <param name="sControlDate2">结束日期</param>
        /// <param name="sControl1Type">列类型</param>
        /// <param name="sControl1">列</param>
        /// <param name="sControl2Type">行类型</param>
        /// <param name="sControl2">行</param>
        /// <param name="sControlValue">数量/时间</param>
        /// <param name="sCreateEmployee">操作人</param>
        /// <param name="sCreateDate">操作时间</param>
        /// <returns></returns>
        [WebMethod]
        public bool SaveN_ControlTable(string sControlType, string[] sControlDate1, string[] sControlDate2, string[] sControl1Type, string[] sControl1, string[] sControl2Type, string[] sControl2, string[][] sControlValue, string sCreateEmployee, string sCreateDate)
        {
            string sSql = "";
            for (int i = 0; i < sControlDate1.Length; i++)
            {
                for (int j = 0; j < sControl1Type.Length; j++)
                {
                    for (int x = 0; x < sControl2Type.Length; x++)
                    {
                        //检索
                        sSql += "if exists (select ID from N_ControlTable where ControlType='" + sControlType + "' and ControlDate1='" + sControlDate1[i] + "' and Control1Type='" + sControl1Type[j] + "' and Control1='" + sControl1[j] + "' and Control2Type='" + sControl2Type[x] + "' and Control2='" + sControl2[x] + "') ";
                        //存在则更新数据
                        sSql += "Update N_ControlTable set ControlValue='" + sControlValue[j][x] + "',UpdateEmployee='" + sCreateEmployee + "',UpdateDate='" + sCreateDate + "' where ControlType='" + sControlType + "' and ControlDate1='" + sControlDate1[i] + "' and Control1Type='" + sControl1Type[j] + "' and Control1='" + sControl1[j] + "' and Control2Type='" + sControl2Type[x] + "' and Control2='" + sControl2[x] + "' ";
                        sSql += "else ";
                        //不存在则新增加
                        sSql += "Insert into N_ControlTable (ControlType, ControlDate1, Control1Type, Control1, Control2Type, Control2, ControlValue, UpdateEmployee, UpdateDate, CreateEmployee, CreateDate) Values ('" + sControlType + "', '" + sControlDate1[i] + "', '" + sControl1Type[j] + "', '" + sControl1[j] + "', '" + sControl2Type[x] + "', '" + sControl2[x] + "', '" + sControlValue[j][x] + "', '" + sCreateEmployee + "', '" + sCreateDate + "', '" + sCreateEmployee + "', '" + sCreateDate + "') ";
                    }
                }
            }
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 删除控制表模版
        /// </summary>
        /// <param name="sControlType"></param>
        /// <param name="sControlDate1"></param>
        /// <returns></returns>
        [WebMethod]
        public bool DeleteN_ControlTable(string sControlType, string[] sControlDate1)
        {
            string sSql = "";
            for (int i = 0; i < sControlDate1.Length; i++)
            {
                sSql += "Delete N_ControlTable where ControlType='" + sControlType + "' and ControlDate1='" + sControlDate1[i] + "' ";
            }
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 当天日期是否已安排
        /// </summary>
        /// <param name="sControlType"></param>
        /// <param name="sControlDate1"></param>
        /// <returns></returns>
        [WebMethod]
        public bool IsExisisN_ControlTable(string sControlType, string sControlDate1)
        {
            string sSql = "select id from N_ControlTable where ControlType='" + sControlType + "' and ControlDate1='" + sControlDate1 + "'";
            string str = ExecuteSqlToString(sSql);
            if (str != "")
                return true;
            else
                return false;
        }

        ///
        [WebMethod]
        public DataSet SearchN_ControlTableCurrentDate(string sControlType, string sControlDate1)
        {
            string sSql = "select ControlType, ControlDate1, ControlDate2, Control1Type, Control1, Control1Name, Control2Type, Control2, Control2Name, ControlValue, UpdateEmployee, UpdateDate, CreateEmployee, CreateDate from VIEW_SearchN_ControlTable where ControlType='" + sControlType + "' and datediff(dd,ControlDate1,'" + sControlDate1 + "')=0 ";
            return ExecuteDataSet(sSql, "VIEW_SearchN_ControlTable");
        }

        /// <summary>
        /// Caijinsong:2012-12-06 用于 统计
        /// </summary>
        /// <param name="sControlType"></param>
        /// <param name="firstDate"></param>
        /// <param name="lastDate"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchN_ControlTableCurrentDate(string sControlType, DateTime firstDate, DateTime lastDate, string[] sControl2)
        {
            bool isFirst = true;
            string strControl2 = "";
            foreach (string str in sControl2)
            {
                if (!isFirst)
                {
                    strControl2 += ",";
                }
                strControl2 += "'" + str + "'";
                isFirst = false;
            }
            string sSql = "select distinct Control1,Control1Name,Control2,Control2Name from VIEW_SearchN_ControlTable where ControlType='" + sControlType + "' and Control2 in (" + strControl2 + ") and datediff(dd,ControlDate1,'" + firstDate + "')<=0 and datediff(dd,ControlDate1,'" + lastDate + "')>=0";
            return ExecuteDataSet(sSql, "VIEW_SearchN_ControlTable");
        }

        /// <summary>
        /// 锁定 或 解锁 摄影数量的修改
        /// </summary>
        /// <param name="control1">摄影部门</param>
        /// <param name="control2">门市</param>
        /// <param name="controlDate"></param>
        public bool LockShootNumber(string[] control1, string[] control2, DateTime controlDate, bool isLock)
        {
            string sSql = string.Empty;
            for (int i = 0; i < control1.Length; ++i)
            {
                sSql += " update N_ControlTable set IsLock='" + isLock + "' where Control1='" + control1[i] + "' and Control2='" + control2[i] + "' and DATEDIFF(DD,ControlDate1,'" + controlDate.ToShortDateString() + "')=0 \r\n";
            }
            if (!string.IsNullOrEmpty(sSql))
            {
                return ExecuteSql(sSql);
            }
            return false;
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="control1">摄影部门</param>
        /// <param name="control2">门市</param>
        /// <param name="controlDate"></param>
        /// <returns></returns>
        public bool IsShootNumberLock(string[] control1, string[] control2, DateTime controlDate)
        {
            for (int i = 0; i < control1.Length; ++i)
            {
                string sSql = "select IsLock from N_ControlTable where Control1='" + control1[i] + "' and Control2='" + control2[i] + "' and DATEDIFF(DD,ControlDate1,'" + controlDate.ToShortDateString() + "')=0";
                DataSet ds = ExecuteDataSet(sSql, "N_ControlTable");
                if (ds.Tables[0].Rows[0][0] != DBNull.Value && (bool)ds.Tables[0].Rows[0][0] == true)
                {
                    return true;
                }
            }
            return false;
        }
        /// <summary>
        /// 返回摄影量与控制量 用于 统计
        /// </summary>
        /// <param name="sControlDate1"></param>
        /// <param name="sControl1">摄影地点编号</param>
        /// <param name="sControl2">订单门市编号</param>
        /// <returns></returns>
        [WebMethod]
        public int[] GetShootNumber(string sControlType, string sControlDate1, string sControl1, string[] sControl2)
        {
            string strControl2 = "'" + string.Join("','", sControl2) + "'";
            int[] ShootNumber = new int[2];
            string sSql = "";
            sSql = "select controlvalue from (Select ROW_NUMBER() over(partition by control2 order by createdate desc) as rowno,ControlValue from N_ControlTable where ControlType='" + sControlType + "' and datediff(dd,ControlDate1,'" + sControlDate1 + "')=0 and Control1='" + sControl1 + "' and Control2 in (" + strControl2 + "))  as temp where rowno=1";
            DataSet ds = ExecuteDataSet(sSql, "ShootCount");
            foreach (DataRow row in ds.Tables[0].Rows)
            {
                ShootNumber[0] += Convert.ToInt32(row[0]);
            }
            //sSql = "select count(ID) from Orders where IsDelete=0 and (datediff(dd,PreShootDateN,'" + sControlDate1 + "')=0 or datediff(dd,PreShootDateW,'" + sControlDate1 + "')=0) and orderDepartmentNo in (" + strControl2 + ") and ShootAddressN='" + sControl1 + "' ";
            sSql = @"select count(1) from Orders o join (
	select OrderNO,shootDepartment,CONVERT(varchar(10),PreShootDate,23) PreShootDate
	from OrderShoot where IsDelete=0
	group by OrderNO,shootState,shootDepartment,CONVERT(varchar(10),PreShootDate,23)
) b on o.OrderNO=b.OrderNO 
where o.IsDelete=0 
and datediff(dd,PreShootDate,'" + sControlDate1 + "')=0 and o.orderDepartmentNo in (" + strControl2 + ") and b.shootDepartment='" + sControl1 + "'";
            string str2 = ExecuteSqlToString(sSql);
            //ShootNumber[0] = Int32.Parse(str1 == "" ? "0" : str1);
            ShootNumber[1] = Int32.Parse(str2 == "" ? "0" : str2);
            return ShootNumber;
        }

        /// <summary>
        /// 返回摄影量与控制量
        /// </summary>
        /// <param name="sControlDate1"></param>
        /// <param name="sControl1">摄影地点编号</param>
        /// <param name="sControl2">订单门市编号</param>
        /// <returns></returns>
        [WebMethod]
        public int[] GetShootNumber(string sControlType, string sControlDate1, string sControl1, string sControl2)
        {
            int[] ShootNumber = new int[2];
            string sSql = "";
            if (sControl2 == "")
            {
                sSql = "Select sum(ControlValue) from N_ControlTable where ControlType='" + sControlType + "' and datediff(dd,ControlDate1,'" + sControlDate1 + "')=0 and Control1='" + sControl1 + "'";
            }
            else
            {
                sSql = "Select ControlValue from N_ControlTable where ControlType='" + sControlType + "' and datediff(dd,ControlDate1,'" + sControlDate1 + "')=0 and Control1='" + sControl1 + "' and Control2='" + sControl2 + "' ";
            }
            string str1 = ExecuteSqlToString(sSql);
            Console.WriteLine(sSql);
            //sSql = "select count(ID) from Orders where IsDelete=0 and (datediff(dd,PreShootDateN,'" + sControlDate1 + "')=0 or datediff(dd,PreShootDateW,'" + sControlDate1 + "')=0) and orderDepartmentNo='" + sControl2 + "' and ShootAddressN='" + sControl1 + "' ";
            sSql = @"select count(1) from 
Orders o join
(
	select OrderNO,shootDepartment,CONVERT(varchar(10),PreShootDate,23) PreShootDate
	from OrderShoot where IsDelete=0 and RecordState=0
    group by OrderNO,shootState,shootDepartment,CONVERT(varchar(10),PreShootDate,23)
) b on o.OrderNO=b.OrderNO 
where o.IsDelete=0 and datediff(dd,b.PreShootDate,'" + sControlDate1 + "')=0  and b.shootDepartment='" + sControl1 + "'";//Edit by Caijinsong 20104-11-25

            if (sControl2 != "")
            {
                sSql += " and o.orderDepartmentNo='" + sControl2 + "'";
            }
            string str2 = ExecuteSqlToString(sSql);
            Console.WriteLine(sSql);
            ShootNumber[0] = Int32.Parse(str1 == "" ? "0" : str1);
            ShootNumber[1] = Int32.Parse(str2 == "" ? "0" : str2);
            return ShootNumber;
        }
        [WebMethod]
        public DataSet GetShootNumber(string sControlType, string sControlDate1)
        {
            string strSql = "Select Control1,Control2,ControlValue,IsLock from N_ControlTable where ControlType='" + sControlType + "' and datediff(dd,ControlDate1,'" + sControlDate1 + "')=0; ";
            strSql += @"select o.orderDepartmentNo,shootDepartment,COUNT(1) Number from 
Orders o join
(
	select OrderNO,shootDepartment,CONVERT(varchar(10),PreShootDate,23) PreShootDate
	from OrderShoot where IsDelete=0 and RecordState = 0
	group by OrderNO,shootState,shootDepartment,CONVERT(varchar(10),PreShootDate,23)
) b on o.OrderNO=b.OrderNO where o.IsDelete=0 and datediff(dd,b.PreShootDate,'" + sControlDate1 + "')=0 group by o.orderDepartmentNo,shootDepartment";
            return ExecuteDataSet(strSql, "GetShootNumber");
        }
        /// <summary>
        /// 查询当前订单号是否已经排入当前位置
        /// </summary>
        /// <param name="orderno"></param>
        [WebMethod]
        public bool CheckIsSetShootByOrderNo(string orderno, string sControlDate1, string sControl1, string sControl2)
        {
            //string sSql = "select orderno from Orders where IsDelete=0 and (datediff(dd,PreShootDateN,'" + sControlDate1 + "')=0 or datediff(dd,PreShootDateW,'" + sControlDate1 + "')=0) and orderDepartmentNo='" + sControl2 + "' and ShootAddressN='" + sControl1 + "' and orderno='" + orderno + "'";
            string sSql = "select OrderNO from OrderShoot os join Orders o on os.OrderNO=o.OrderNO where os.IsDelete=0 and o.IsDelete=0 and datediff(dd,os.PreShootDate,'" + sControlDate1 + "')=0 and o.orderDepartmentNo='" + sControl2 + "' and os.shootDepartment='" + sControl1 + "' and o.OrderNO='" + orderno + "'";
            string str = ExecuteSqlToString(sSql);
            bool isSet = str == "" ? false : true;
            return isSet;
        }

        /// <summary>
        /// 预约选衣控
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sClothesAddress"></param>
        /// <param name="sClothesEmployeeNO"></param>
        /// <param name="sPreClothesDate"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdatePreClothes(string sOrderNO, string sClothesAddress, string sClothesAddressName, string sClothesEmployeeNO, string sClothesEmployeeName, string sPreClothesDate, string sCreate, string sCreateDate, string sClothesMemory, string sProcess)
        {
            string sSql = "Update Orders Set PreClothesDate='" + sPreClothesDate + "',ClothesAddress='" + sClothesAddress + "',ClothesEmployeeNO='" + sClothesEmployeeNO + "',ClothesMemory='" + sClothesMemory + "' where OrderNO='" + sOrderNO + "' ";
            sSql += "if exists(select 1 from OrdersSub where OrderNO='" + sOrderNO + "') ";
            sSql += "Update OrdersSub set ClothesAddressName='" + sClothesAddressName + "', ClothesEmployeeName='" + sClothesEmployeeName + "' where OrderNO='" + sOrderNO + "' ";
            sSql += "else ";
            sSql += "insert into OrdersSub (OrderNO, ClothesAddressName, ClothesEmployeeName) values ('" + sOrderNO + "','" + sClothesAddressName + "','" + sClothesEmployeeName + "') ";
            if (!ExecuteSql(sSql))
                return false;
            //由于取消礼服预选在流程中控制,所以只记录流程,不改变状态
            InsertOrderLogoBatNew(sOrderNO, sProcess, "", sCreate, sCreateDate);
            return true;
        }

        /// <summary>
        /// 立选
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sPreClothesDate"></param>
        /// <returns></returns>
        [WebMethod]
        public bool ChangePreClothesDate(string sOrderNO, string sPreClothesDate)
        {
            string sSql = "Update Orders Set PreClothesDate='" + sPreClothesDate + "' where OrderNO='" + sOrderNO + "' ";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 实际选衣控
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sClothesAddress"></param>
        /// <param name="sClothesEmployeeNO"></param>
        /// <param name="sClothesDate"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateClothes(string sOrderNO, string sClothesAddress, string sClothesEmployeeNO, string sClothesDate, string sCreate, string sCreateDate, string sProcess)
        {
            string sSql = "Update Orders Set ClothesDate='" + sClothesDate + "' where OrderNO='" + sOrderNO + "' ";
            if (!ExecuteSql(sSql))
                return false;
            //由于取消礼服预选在流程中控制,所以只记录流程,不改变状态
            InsertOrderLogoBatNew(sOrderNO, sProcess, "", sCreate, sCreateDate);
            return true;
        }

        /// <summary>
        /// 使用一键选衣完成功能
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sClothesAddress"></param>
        /// <param name="sClothesEmployeeNO"></param>
        /// <param name="sClothesDate"></param>
        /// <param name="sCreate"></param>
        /// <param name="sCreateDate"></param>
        /// <param name="sProcess"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateClothesAll(string[] sOrderNO, string sClothesAddress, string sClothesEmployeeNO, string sClothesDate, string sCreate, string sCreateDate, string sProcess)
        {
            string sSql = "";
            for (int i = 0; i < sOrderNO.Length; i++)
                sSql += "Update Orders Set PreClothesDate='" + sClothesDate + "',ClothesDate='" + sClothesDate + "',ClothesAddress='" + sClothesAddress + "',ClothesEmployeeNO='" + sClothesEmployeeNO + "' where OrderNO='" + sOrderNO[i] + "' ";
            if (!ExecuteSql(sSql))
                return false;
            //由于取消礼服预选在流程中控制,所以只记录流程,不改变状态
            for (int i = 0; i < sOrderNO.Length; i++)
                InsertOrderLogoBatNew(sOrderNO[i], sProcess, "", sCreate, sCreateDate);
            return true;
        }

        /// <summary>
        /// 查询选衣控
        /// </summary>
        /// <param name="sSql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchClothes(string sql)
        {
            //string sSql = "select distinct top 400 CardNO, CustomerNO, OrderNO, FPH, CustomerName1, CustomerName2, MobilePhone1, MobilePhone2, SuiteName, SuitePrice, PreClothesDate, ClothesAddress, ClothesEmployee, ClothesDate, ClothesMemory, ShootAddressN, PreShootDateN, ShootEmployeeN, ShootDateN, ShootMemoryN,PreShootDateW, ShootAddressW, ShootEmployeeW, ShootDateW, ShootMemoryW,OrderEmployee, OrderDate,LF, Process from  VIEW_Orders  where 1=1 " + sql;
            string sSql = "select distinct top 400 CardNO, CustomerNO, OrderNO, FPH, CustomerName1, CustomerName2, MobilePhone1, MobilePhone2, SuiteName, SuitePrice, PreClothesDate, ClothesAddress, ClothesEmployeeNO, ClothesDate, ClothesMemory, ShootAddressN, PreShootDateN, ShootEmployeeN, ShootDateN, ShootMemoryN,PreShootDateW, ShootAddressW, ShootEmployeeW, ShootDateW, ShootMemoryW,OrderEmployee, OrderDate,LF, Process from  VIEW_Orders  where 1=1 " + sql;
            return ExecuteDataSet(sSql, "SearchClothes");
        }

        /// <summary>
        /// 礼服师选衣数据
        /// </summary>
        /// <param name="sPreClothesDate"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchClothesEmployeeCount(string sql)
        {
            string sSql = "select distinct ClothesEmployee,ClothesEmployeeCount=count(*) from  VIEW_Orders where 1=1 and " + sql + " Group by ClothesEmployee ";
            return ExecuteDataSet(sSql, "Tmp");
        }
        [WebMethod]
        public DataSet SearchClothesEmployeeCount1(string ClothesAddress, string ClothesDate)
        {
            string sSql = "select Employeeno,EmployeeName, ClothesCount=isnull((select  count (*) from Orders where ClothesEmployeeNO=a.EmployeeNO and ClothesAddress='" + ClothesAddress + "'  and datediff(dd,ClothesDate,'" + ClothesDate + "')=0  group by ClothesEmployeeNO),0)from  Employee as a where EmployeeDuty='Duty_21' order by ClothesCount";
            return ExecuteDataSet(sSql, "ClothesCount");
        }

        /// <summary>
        /// 预约化妆造型
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sDressAddress"></param>
        /// <param name="sDressEmployeeNO"></param>
        /// <param name="sModelEmployeeNO"></param>
        /// <param name="sPreDressDate"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdatePreDress(string sOrderNO, string sDressAddress, string sDressEmployeeNO, string sModelEmployeeNO, string sPreDressDate, string sCreate, string sCreateDate, string sDressMemory, string sProcess)
        {
            string sSql = "Update Orders Set PreDressDate='" + sPreDressDate + "',DressAddress='" + sDressAddress + "',DressEmployeeNO='" + sDressEmployeeNO + "',ModelEmployeeNO='" + sModelEmployeeNO + "',DressMemory='" + sDressMemory + "' where OrderNO='" + sOrderNO + "' ";
            if (!ExecuteSql(sSql))
                return false;
            //由于取消新娘妆在流程中控制,所以只记录流程,不改变状态
            InsertOrderLogoBatZ(sOrderNO, sProcess, "", sCreate, sCreateDate);
            return true;
        }

        /// <summary>
        /// 实际化妆造型
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sDressAddress"></param>
        /// <param name="sDressEmployeeNO"></param>
        /// <param name="sModelEmployeeNO"></param>
        /// <param name="sDressDate"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateDress(string sOrderNO, string sDressAddress, string sDressEmployeeNO, string sModelEmployeeNO, string sDressDate, string sCreate, string sCreateDate, string sProcess)
        {
            string sSql = "Update Orders Set DressDate='" + sDressDate + "',DressAddress='" + sDressAddress + "' where OrderNO='" + sOrderNO + "' ";//,DressEmployeeNO='" + sDressEmployeeNO + "',ModelEmployeeNO='" + sModelEmployeeNO + "'   暂时不改变化妆师与造型师
            if (!ExecuteSql(sSql))
                return false;
            //由于取消新娘妆在流程中控制,所以只记录流程,不改变状态
            InsertOrderLogoBatZ(sOrderNO, sProcess, "", sCreate, sCreateDate);
            return true;
        }

        /// <summary>
        /// 查询化妆造型控制
        /// </summary>
        /// <param name="sSql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchDress(string sql)
        {
            string sSql = "select distinct CardNO, CustomerNO, OrderNO, FPH, CustomerName1, CustomerName2,MobilePhone1,MobilePhone2, MarryDate, SuiteName, SuitePrice,OrderSuitePrice,OrderDepartment, OrderEmployee, OrderDate, DressAddress, DressEmployee, ModelEmployee, PreDressDate, DressDate, DressMemory, Process from dbo.VIEW_Orders where 1=1 " + sql + " order by OrderNO ";
            return ExecuteDataSet(sSql, "SearchDress");
        }

        /// <summary>
        /// 预约摄影(内)
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sShootAddress"></param>
        /// <param name="sShootEmployeeNO"></param>
        /// <param name="sPreShootDate"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdatePreShootN(string sOrderNO, string sShootAddress, string sShootEmployeeNO, string sLightEmployeeNO, string sDressEmployeeNON, string sDressAssistantEmployeeNON, string sPreShootDate, string sShootMemoryN, string sCreate, string sCreateDate, string sProcess)
        {
            string sSql = "Update Orders Set PreShootDateN='" + sPreShootDate + "',ShootAddressN='" + sShootAddress + "',ShootEmployeeNON='" + sShootEmployeeNO + "',LightEmployeeNON='" + sLightEmployeeNO + "',DressEmployeeNON='" + sDressEmployeeNON + "',DressAssistantEmployeeNON='" + sDressAssistantEmployeeNON + "',ShootMemoryN='" + sShootMemoryN + "' where OrderNO='" + sOrderNO + "' ";
            if (!ExecuteSql(sSql))
                return false;
            InsertOrderLogoBatZ(sOrderNO, sProcess, "", sCreate, sCreateDate);
            return true;
        }

        /// <summary>
        /// 实际摄影(内)
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sShootAddress"></param>
        /// <param name="sShootEmployeeNO"></param>
        /// <param name="sShootDate"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateShootN(string sOrderNO, string sShootAddress, string sShootEmployeeNO, string sShootDate, string sCreate, string sCreateDate, string sProcess)
        {
            string sSql = "Update Orders Set ShootDateN='" + sShootDate + "',ShootAddressN='" + sShootAddress + "',ShootEmployeeNON='" + sShootEmployeeNO + "' where OrderNO='" + sOrderNO + "' ";
            if (!ExecuteSql(sSql))
                return false;
            InsertOrderLogoBat(sOrderNO, sProcess, "", sCreate, sCreateDate);
            return true;
        }

        /// <summary>
        /// 变更摄影状态-内景
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sShootDate"></param>
        /// <param name="sCreate"></param>
        /// <param name="sCreateDate"></param>
        /// <param name="sProcess"></param>
        /// <returns></returns>
        [WebMethod]
        public bool ChangeShootN(string sOrderNO, string sShootDate, string sCreate, string sCreateDate, string sProcess)
        {
            string sSql = "Update Orders Set ShootDateN='" + sShootDate + "' where OrderNO='" + sOrderNO + "' ";
            if (!ExecuteSql(sSql))
                return false;
            if (sProcess == "P_45")
                InsertOrderLogoBat(sOrderNO, sProcess, "", sCreate, sCreateDate);
            else
                InsertOrderLogoBatZ(sOrderNO, sProcess, "", sCreate, sCreateDate);
            return true;
        }

        /// <summary>
        /// 查询摄影控制
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchShoot(string sql)
        {
            string sSql = "select CardNO, CustomerNO, OrderNO, FPH, CustomerName1, CustomerName2,MobilePhone1,MobilePhone2, MarryDate, SuiteName, SuitePrice,OrderSuitePrice,OrderDepartment, OrderEmployee, OrderDate, PreShootDateN, ShootTitle, ShootTimeN1, ShootTimeN2, ShootMemory, PreShootDateW, PreChooseDate, DressAddress, DressEmployee, ModelEmployee, DressDate, DressMemory, ShootAddressN, ShootEmployeeN,LightEmployeeN, ShootDateN, ShootMemoryN, ShootAddressW, ShootEmployeeW,LightEmployeeW, ShootDateW, ShootMemoryW,Process,OrderMemory,ShootSites, (SELECT 1 FROM OrderShoot WHERE OrderNO = v.OrderNO AND IsDelete = 0 AND shootState = '看样重拍') AS NeedReShoot,(SELECT ShootType FROM OrderShoot WHERE OrderNO = v.OrderNO AND IsDelete = 0 AND shootState = '看样重拍') AS ReShootType from dbo.VIEW_Orders v where 1=1 " + sql + " ";
            return ExecuteDataSet(sSql, "OrderSearch");
        }
        /// <summary>
        /// 重拍订单查询
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        public DataSet SearchReShoot(string sql)
        {
            string sSql = @"select distinct o.OrderNO,os.ShootMemory,em.EmployeeName as ShootEmployeeName,ep.EmployeeName as DressEmployeeName, os.shootState,o.OrderDate,el.ElementName as ShootAddressN,o.PreShootDateN,co.ConfigValue as ShootAddressW ,o.PreShootDateW, c.CustomerName1, c.CustomerName2,c.MobilePhone1,c.MobilePhone2 
from Orders o 
left join OrderShoot os on os.OrderNO = o.OrderNO  
left join Customers c on c.CustomerNO = o.CustomerNO 
left join Element el on ElementNO =o.ShootAddressN 
left join Config co on co.ConfigNO = o.ShootAddressW
left join Employee em on em.EmployeeNO = os.ShootEmployeeNO
left join Employee ep on ep.EmployeeNO = os.DressEmployeeNO
where  os.shootState='重拍'  " + sql + "";
            return ExecuteDataSet(sSql, "SearchReShoot");
        }

        /// <summary>
        /// 查询摄影状态
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchShootState(string sOrderNO)
        {
            string sSql = "select PreShootDateN,ShootAddressN,ShootDateN,PreShootDateW,ShootAddressW,ShootDateW from Orders where OrderNO='" + sOrderNO + "' ";
            return ExecuteDataSet(sSql, "shootState");
        }

        /// <summary>
        /// 获取订单的订单部门编号
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <returns></returns>
        [WebMethod]
        public string GetTheOrderDepartmentNO(string sOrderNO)
        {
            string sSql = "select orderDepartmentNo from Orders where OrderNO='" + sOrderNO + "'";
            return ExecuteSqlToString(sSql);
        }

        /// <summary>
        /// 获取订单的订单人员编号
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <returns></returns>
        [WebMethod]
        public string GetTheOrderEmployeeNO(string sOrderNO)
        {
            string sSql = "select OrderEmployeeNO from Orders where OrderNO='" + sOrderNO + "'";
            return ExecuteSqlToString(sSql);
        }
        [WebMethod]
        public string GetTheOrderEmployeeNO2(string sOrderNO)
        {
            string sSql = "select OrderEmployeeNO2 from Orders where OrderNO='" + sOrderNO + "'";
            return ExecuteSqlToString(sSql);
        }

        //打印摄控
        [WebMethod]
        public DataSet PrintShootReport(string sql)
        {

            string sSql = "select CustomerNO, OrderNO, CustomerName1, CustomerName2, MobilePhone1, MobilePhone2, ShootDateN, ShootAddressN, ShootEmployeeN, DressEmployeeN, OrderEmployee, SuiteName, SuitePrice, LF,Process from VIEW_SearchPreShoot where 1=1 " + sql + " order by ShootAddressN ";

            //string sSql = "select CustomerNO, OrderNO, CustomerName1, CustomerName2, MobilePhone1, MobilePhone2, ShootDateN, ShootAddressN, ShootEmployeeN, DressEmployeeN, OrderEmployee, SuiteName, SuitePrice, LF, Process from VIEW_SearchPreShoot where 1=1 " + sql + " order by ShootAddressN ";

            return ExecuteDataSet(sSql, "VIEW_SearchPreShoot");
        }

        /// <summary>
        /// 查询拍摄全部时间
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchShootTimeRecord(string sOrderNO)
        {
            string sSql = "Select [ShootTitle],[ShootTime1],[ShootTime2],[ShootMemory],[Create] from ShootTime where OrderNO='" + sOrderNO + "' ";
            return ExecuteDataSet(sSql, "ShootTime");
        }

        /// <summary>
        /// 预约摄影(外)
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sShootAddress"></param>
        /// <param name="sShootEmployeeNO"></param>
        /// <param name="sPreShootDate"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdatePreShootW(string sOrderNO, string sShootAddress, string sShootEmployeeNO, string sLightEmployeeNO, string sDressEmployeeNOW, string sDressAssistantEmployeeNO, string sPreShootDate, string sShootMemoryW, string sCreate, string sCreateDate, string sProcess)
        {
            string sSql = "Update Orders Set PreShootDateW='" + sPreShootDate + "',ShootAddressW='" + sShootAddress + "',ShootEmployeeNOW='" + sShootEmployeeNO + "',LightEmployeeNOW='" + sLightEmployeeNO + "',DressEmployeeNOW='" + sDressEmployeeNOW + "',DressAssistantEmployeeNOW='" + sDressAssistantEmployeeNO + "',ShootMemoryW='" + sShootMemoryW + "' where OrderNO='" + sOrderNO + "' ";
            if (!ExecuteSql(sSql))
                return false;
            InsertOrderLogoBat(sOrderNO, sProcess, "", sCreate, sCreateDate);
            return true;
        }

        /// <summary>
        /// 安排内景
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sShootTimeN"></param>
        /// <param name="sShootAddress"></param>
        /// <param name="sShootEmployeeNO"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateN_PreShootN(string sOrderNO, string sShootTime, string sShootAddress, string sShootEmployeeNO, string sShootMemory)
        {
            string sSql = "Update Orders Set PreShootDateN='" + sShootTime + "',ShootAddressN='" + sShootAddress + "',ShootEmployeeNON='" + sShootEmployeeNO + "',ShootMemoryN='" + sShootMemory + "',ShootDateN=null where OrderNO='" + sOrderNO + "' ";

            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 按排摄控 Update by Caijinsong  2014-11-25
        /// </summary>
        /// <param name="OrderNO">订单号</param>
        /// <param name="ShootState">状态（正常，重拍，补拍）</param>
        /// <param name="ShootType">类别（内景，外景）</param>
        /// <param name="ShootDepartment">摄影 部门（不是摄影地点）</param>
        /// <param name="ShootAddress">具体的摄影地点</param>
        /// <param name="ShootEmployeeNO">摄影师</param>
        /// <param name="PreShootDate">预摄影时间</param>
        /// <param name="ShootMemory">摄影备注</param>
        /// <param name="OpEmployee">操作人</param>
        /// <param name="OpDepartment">操作部门</param>
        /// <param name="OpDateTime">操作时间</param>
        /// <returns></returns>
        [WebMethod]
        public bool Insert_PreShoot(string OrderNO, string ShootState, string ShootType, string ShootDepartment, string ShootAddress, string ShootAddressName, string ShootEmployeeNO, string ShootEmployeeName, string PreShootDate, string ShootMemory, string OpEmployee, string OpDepartment, DateTime OpDateTime)
        {

            string sSql = @"if exists (select 1 from OrderShoot where  OrderNO='" + OrderNO + "' and shootState='" + ShootState + "' and ShootType='" + ShootType + @"' and IsDelete=0 AND RecordState = 0)
                            begin
                            update OrderShoot set shootDepartment='" + ShootDepartment + "',ShootAddress='" + ShootAddress + "',ShootEmployeeNO='" + ShootEmployeeNO + "',PreShootDate='" + PreShootDate + "',ShootMemory='" + ShootMemory + "',OpEmployee='" + OpEmployee + "',OpDepartment='" + OpDepartment + "',OpDateTime='" + OpDateTime + @"', 
                            ShootDate = NULL where  OrderNO='" + OrderNO + "' and shootState='" + ShootState + "' and ShootType='" + ShootType + @"' and IsDelete=0
                            end
                            else
                            begin
                            insert into OrderShoot (OrderNO,shootState,ShootType,shootDepartment,ShootAddress,ShootEmployeeNO,PreShootDate,ShootMemory,OpEmployee,OpDepartment,OpDateTime)
                            values ('" + OrderNO + "','" + ShootState + "','" + ShootType + "','" + ShootDepartment + "','" + ShootAddress + "','" + ShootEmployeeNO + "','" + PreShootDate + "','" + ShootMemory + "','" + OpEmployee + "','" + OpDepartment + "','" + OpDateTime.ToString("yyyy-MM-dd HH:mm:ss") + @"')
                            end ";
            if (ShootType == "内景")
            {
                sSql += "if exists(select 1 from OrdersSub where OrderNO='" + OrderNO + "') ";
                sSql += "Update OrdersSub set ShootAddressNameN='" + ShootAddressName + "', ShootEmployeeNameN='" + ShootEmployeeName + "' where OrderNO='" + OrderNO + "' ";
                sSql += "else ";
                sSql += "Insert into OrdersSub (OrderNO, ShootAddressNameN, ShootEmployeeNameN) values ('" + OrderNO + "','" + ShootAddressName + "','" + ShootEmployeeName + "') ";
                sSql += string.Format("   update Orders set PreShootDateN ='{0}', ShootAddressN ='{1}' where OrderNO = '{2}'", PreShootDate, ShootAddress, OrderNO);
            }
            else if (ShootType == "外景")
            {
                sSql += "if exists(select 1 from OrdersSub where OrderNO='" + OrderNO + "') ";
                sSql += "Update OrdersSub set ShootAddressNameW='" + ShootAddressName + "', ShootEmployeeNameW='" + ShootEmployeeName + "' where OrderNO='" + OrderNO + "' ";
                sSql += "else ";
                sSql += "Insert into OrdersSub (OrderNO, ShootAddressNameW, ShootEmployeeNameW) values ('" + OrderNO + "','" + ShootAddressName + "','" + ShootEmployeeName + "') ";
                sSql += string.Format("   update Orders set PreShootDateW ='{0}', ShootAddressW ='{1}' where OrderNO = '{2}'", PreShootDate, ShootAddress, OrderNO);
            }
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 按排摄控_正常 Update by Caijinsong  2014-11-25
        /// </summary>
        /// <param name="OrderNO">订单号</param>
        /// <param name="ShootState">状态（正常，重拍，补拍）</param>
        /// <param name="ShootType">类别（内景，外景）</param>
        /// <param name="ShootDepartment">摄影 部门（不是摄影地点）</param>
        /// <param name="ShootAddress">具体的摄影地点</param>
        /// <param name="ShootEmployeeNO">摄影师</param>
        /// <param name="PreShootDate">预摄影时间</param>
        /// <param name="ShootMemory">摄影备注</param>
        /// <param name="OpEmployee">操作人</param>
        /// <param name="OpDepartment">操作部门</param>
        /// <param name="OpDateTime">操作时间</param>
        /// <returns></returns>
        [WebMethod]
        public bool Insert_PreShoot_Normal(string OrderNO, string ShootState, string ShootType, string ShootDepartment, string ShootAddress, string ShootAddressName, string ShootEmployeeNO, string ShootEmployeeName, string PreShootDate, string ShootMemory, string OpEmployee, string OpDepartment, DateTime OpDateTime)
        {

            string sSql = @"if exists (select 1 from OrderShoot where  OrderNO='" + OrderNO + "' and shootState IS NULL and ShootType='" + ShootType + @"' and IsDelete=0 AND RecordState = 0)
                            begin
                            update OrderShoot set shootDepartment='" + ShootDepartment + "',ShootAddress='" + ShootAddress + "',ShootEmployeeNO='" + ShootEmployeeNO + "',PreShootDate='" + PreShootDate + "',ShootMemory='" + ShootMemory + "',OpEmployee='" + OpEmployee + "',OpDepartment='" + OpDepartment + "',OpDateTime='" + OpDateTime + @"', 
                            ShootDate = NULL, shootState = '正常' where  OrderNO='" + OrderNO + "' and shootState IS NULL and ShootType='" + ShootType + @"' and IsDelete=0
                            end
                            else
                            begin
                            insert into OrderShoot (OrderNO,shootState,ShootType,shootDepartment,ShootAddress,ShootEmployeeNO,PreShootDate,ShootMemory,OpEmployee,OpDepartment,OpDateTime)
                            values ('" + OrderNO + "','" + ShootState + "','" + ShootType + "','" + ShootDepartment + "','" + ShootAddress + "','" + ShootEmployeeNO + "','" + PreShootDate + "','" + ShootMemory + "','" + OpEmployee + "','" + OpDepartment + "','" + OpDateTime.ToString("yyyy-MM-dd HH:mm:ss") + @"')
                            end ";
            if (ShootType == "内景")
            {
                sSql += "if exists(select 1 from OrdersSub where OrderNO='" + OrderNO + "') ";
                sSql += "Update OrdersSub set ShootAddressNameN='" + ShootAddressName + "', ShootEmployeeNameN='" + ShootEmployeeName + "' where OrderNO='" + OrderNO + "' ";
                sSql += "else ";
                sSql += "Insert into OrdersSub (OrderNO, ShootAddressNameN, ShootEmployeeNameN) values ('" + OrderNO + "','" + ShootAddressName + "','" + ShootEmployeeName + "') ";
                sSql += string.Format("   update Orders set PreShootDateN ='{0}', ShootAddressN ='{1}' where OrderNO = '{2}'", PreShootDate, ShootAddress, OrderNO);
            }
            else if (ShootType == "外景")
            {
                sSql += "if exists(select 1 from OrdersSub where OrderNO='" + OrderNO + "') ";
                sSql += "Update OrdersSub set ShootAddressNameW='" + ShootAddressName + "', ShootEmployeeNameW='" + ShootEmployeeName + "' where OrderNO='" + OrderNO + "' ";
                sSql += "else ";
                sSql += "Insert into OrdersSub (OrderNO, ShootAddressNameW, ShootEmployeeNameW) values ('" + OrderNO + "','" + ShootAddressName + "','" + ShootEmployeeName + "') ";
                sSql += string.Format("   update Orders set PreShootDateW ='{0}', ShootAddressW ='{1}' where OrderNO = '{2}'", PreShootDate, ShootAddress, OrderNO);
            }
            return ExecuteSql(sSql);
        }


        /// <summary>
        /// 当订单拍摄类型为内景时，也要插入一条补位的外景记录，防止收银查摄影欠款查不出来
        /// </summary>
        /// <param name="OrderNO">订单号</param>
        /// <returns></returns>
        [WebMethod]
        public bool Insert_PreShoot_MakeUpW(string OrderNO)
        {
            string sSql = @"if not exists (select 1 from OrderShoot where  OrderNO='" + OrderNO + @"' and ShootType = '外景' and IsDelete=0 AND RecordState = 0)
                            begin
                            insert into OrderShoot (OrderNO,ShootType)
                            values ('" + OrderNO + "','" + @"外景')
                            end ";
            return ExecuteSql(sSql);
        }
        /// <summary>
        /// 当订单拍摄类型为外景时，也要插入一条补位的内景记录，防止收银查摄影欠款查不出来
        /// </summary>
        /// <param name="OrderNO">订单号</param>
        /// <returns></returns>
        [WebMethod]
        public bool Insert_PreShoot_MakeUpN(string OrderNO)
        {
            string sSql = @"if not exists (select 1 from OrderShoot where  OrderNO='" + OrderNO + @"' and ShootType = '内景' and IsDelete=0 AND RecordState = 0)
                            begin
                            insert into OrderShoot (OrderNO,ShootType)
                            values ('" + OrderNO + "','" + @"内景')
                            end ";
            return ExecuteSql(sSql);
        }
        /// <summary>
        /// 补拍
        /// </summary>
        /// <param name="OrderNO">订单号</param>
        /// <param name="ShootType">类别（内景，外景）</param>
        /// <param name="ShootDepartment">摄影 部门（不是摄影地点）</param>
        /// <param name="ShootAddress">具体的摄影地点</param>
        /// <param name="ShootEmployeeNO">摄影师</param>
        /// <param name="PreShootDate">预摄影时间</param>
        /// <param name="ShootMemory">摄影备注</param>
        /// <param name="OpEmployee">操作人</param>
        /// <param name="OpDepartment">操作部门</param>
        /// <param name="OpDateTime">操作时间</param>
        /// <returns></returns>
        [WebMethod]
        public bool Insert_PreShoot_Delay(string OrderNO, string ShootType, string ShootDepartment, string ShootAddress, string ShootAddressName, string ShootEmployeeNO, string ShootEmployeeName, string PreShootDate, string ShootMemory, string OpEmployee, string OpDepartment, DateTime OpDateTime)
        {
            // 先将对应类型的摄影记录设置失效
            string strSql = @"UPDATE OrderShoot SET [RecordState] = 2 WHERE OrderNO='" + OrderNO + "' AND RecordState = 0 AND ShootType='" + ShootType + @"' and IsDelete=0";
            bool bOk = ExecuteSql(strSql);

            string sSql = @"insert into OrderShoot (OrderNO,shootState,ShootType,shootDepartment,ShootAddress,ShootEmployeeNO,PreShootDate,ShootMemory,OpEmployee,OpDepartment,OpDateTime)
                            values ('" + OrderNO + "','补拍','" + ShootType + "','" + ShootDepartment + "','" + ShootAddress + "','" + ShootEmployeeNO + "','" + PreShootDate + "','" + ShootMemory + "','" + OpEmployee + "','" + OpDepartment + "','" + OpDateTime.ToString("yyyy-MM-dd HH:mm:ss") + @"')";
            if (ShootType == "内景")
            {
                sSql += "if exists(select 1 from OrdersSub where OrderNO='" + OrderNO + "') ";
                sSql += "Update OrdersSub set ShootAddressNameN='" + ShootAddressName + "', ShootEmployeeNameN='" + ShootEmployeeName + "' where OrderNO='" + OrderNO + "' ";
                sSql += "else ";
                sSql += "Insert into OrdersSub (OrderNO, ShootAddressNameN, ShootEmployeeNameN) values ('" + OrderNO + "','" + ShootAddressName + "','" + ShootEmployeeName + "') ";
                sSql += string.Format("   update Orders set PreShootDateN ='{0}', ShootAddressN ='{1}' where OrderNO = '{2}'", PreShootDate, ShootAddress, OrderNO);
            }
            else if (ShootType == "外景")
            {
                sSql += "if exists(select 1 from OrdersSub where OrderNO='" + OrderNO + "') ";
                sSql += "Update OrdersSub set ShootAddressNameW='" + ShootAddressName + "', ShootEmployeeNameW='" + ShootEmployeeName + "' where OrderNO='" + OrderNO + "' ";
                sSql += "else ";
                sSql += "Insert into OrdersSub (OrderNO, ShootAddressNameW, ShootEmployeeNameW) values ('" + OrderNO + "','" + ShootAddressName + "','" + ShootEmployeeName + "') ";
                sSql += string.Format("   update Orders set PreShootDateW ='{0}', ShootAddressW ='{1}' where OrderNO = '{2}'", PreShootDate, ShootAddress, OrderNO);
            }

            return bOk && ExecuteSql(sSql);
        }
        /// <summary>
        /// 重拍
        /// </summary>
        /// <param name="OrderNO">订单号</param>
        /// <param name="ShootType">类别（内景，外景）</param>
        /// <param name="ShootDepartment">摄影 部门（不是摄影地点）</param>
        /// <param name="ShootAddress">具体的摄影地点</param>
        /// <param name="ShootEmployeeNO">摄影师</param>
        /// <param name="PreShootDate">预摄影时间</param>
        /// <param name="ShootMemory">摄影备注</param>
        /// <param name="OpEmployee">操作人</param>
        /// <param name="OpDepartment">操作部门</param>
        /// <param name="OpDateTime">操作时间</param>
        /// <returns></returns>
        [WebMethod]
        public bool Insert_PreShoot_ReShoot(string OrderNO, string ShootType, string ShootDepartment, string ShootAddress, string ShootAddressName, string ShootEmployeeNO, string ShootEmployeeName, string PreShootDate, string ShootMemory, string OpEmployee, string OpDepartment, DateTime OpDateTime)
        {
            // 先将对应类型的摄影记录设置失效
            string strSql = @"UPDATE OrderShoot SET [RecordState] = 2 WHERE OrderNO='" + OrderNO + "' AND RecordState = 0 AND ShootType='" + ShootType + @"' and IsDelete=0";
            bool bOk = ExecuteSql(strSql);

            string sSql = @"insert into OrderShoot (OrderNO,shootState,ShootType,shootDepartment,ShootAddress,ShootEmployeeNO,PreShootDate,ShootMemory,OpEmployee,OpDepartment,OpDateTime)
                            values ('" + OrderNO + "','重拍','" + ShootType + "','" + ShootDepartment + "','" + ShootAddress + "','" + ShootEmployeeNO + "','" + PreShootDate + "','" + ShootMemory + "','" + OpEmployee + "','" + OpDepartment + "','" + OpDateTime.ToString("yyyy-MM-dd HH:mm:ss") + @"')";
            if (ShootType == "内景")
            {
                sSql += "if exists(select 1 from OrdersSub where OrderNO='" + OrderNO + "') ";
                sSql += "Update OrdersSub set ShootAddressNameN='" + ShootAddressName + "', ShootEmployeeNameN='" + ShootEmployeeName + "' where OrderNO='" + OrderNO + "' ";
                sSql += "else ";
                sSql += "Insert into OrdersSub (OrderNO, ShootAddressNameN, ShootEmployeeNameN) values ('" + OrderNO + "','" + ShootAddressName + "','" + ShootEmployeeName + "') ";
                sSql += string.Format("   update Orders set PreShootDateN ='{0}', ShootAddressN ='{1}' where OrderNO = '{2}'", PreShootDate, ShootAddress, OrderNO);
            }
            else if (ShootType == "外景")
            {
                sSql += "if exists(select 1 from OrdersSub where OrderNO='" + OrderNO + "') ";
                sSql += "Update OrdersSub set ShootAddressNameW='" + ShootAddressName + "', ShootEmployeeNameW='" + ShootEmployeeName + "' where OrderNO='" + OrderNO + "' ";
                sSql += "else ";
                sSql += "Insert into OrdersSub (OrderNO, ShootAddressNameW, ShootEmployeeNameW) values ('" + OrderNO + "','" + ShootAddressName + "','" + ShootEmployeeName + "') ";
                sSql += string.Format("   update Orders set PreShootDateW ='{0}', ShootAddressW ='{1}' where OrderNO = '{2}'", PreShootDate, ShootAddress, OrderNO);
            }

            return bOk && ExecuteSql(sSql);
        }
        /// <summary>
        /// 改期
        /// </summary>
        /// <param name="OrderNO">订单号</param>
        /// <param name="ShootType">类别（内景，外景）</param>
        /// <param name="ShootDepartment">摄影 部门（不是摄影地点）</param>
        /// <param name="ShootAddress">具体的摄影地点</param>
        /// <param name="ShootEmployeeNO">摄影师</param>
        /// <param name="PreShootDate">预摄影时间</param>
        /// <param name="ShootMemory">摄影备注</param>
        /// <param name="OpEmployee">操作人</param>
        /// <param name="OpDepartment">操作部门</param>
        /// <param name="OpDateTime">操作时间</param>
        /// <returns></returns>
        [WebMethod]
        public bool Change_PreShoot(string OrderNO, string ShootType, string ShootDepartment, string ShootAddress, string ShootAddressName, string ShootEmployeeNO, string ShootEmployeeName, string PreShootDate, string ShootMemory, string OpEmployee, string OpDepartment, DateTime OpDateTime)
        {
            string sSql = @"update OrderShoot set shootDepartment='" + ShootDepartment + "',ShootAddress='" + ShootAddress + "',ShootEmployeeNO='" + ShootEmployeeNO + "',PreShootDate='" + PreShootDate + "',ShootMemory='" + ShootMemory + "',OpEmployee='" + OpEmployee + "',OpDepartment='" + OpDepartment + "',OpDateTime='" + OpDateTime + @"', 
                            ShootDate = NULL where  OrderNO='" + OrderNO + "' and ShootType='" + ShootType + @"' and IsDelete=0 AND RecordState = 0";
            if (ShootType == "内景")
            {
                sSql += "if exists(select 1 from OrdersSub where OrderNO='" + OrderNO + "') ";
                sSql += "Update OrdersSub set ShootAddressNameN='" + ShootAddressName + "', ShootEmployeeNameN='" + ShootEmployeeName + "' where OrderNO='" + OrderNO + "' ";
                sSql += "else ";
                sSql += "Insert into OrdersSub (OrderNO, ShootAddressNameN, ShootEmployeeNameN) values ('" + OrderNO + "','" + ShootAddressName + "','" + ShootEmployeeName + "') ";
                sSql += string.Format("   update Orders set PreShootDateN ='{0}', ShootAddressN ='{1}' where OrderNO = '{2}'", PreShootDate, ShootAddress, OrderNO);
            }
            else if (ShootType == "外景")
            {
                sSql += "if exists(select 1 from OrdersSub where OrderNO='" + OrderNO + "') ";
                sSql += "Update OrdersSub set ShootAddressNameW='" + ShootAddressName + "', ShootEmployeeNameW='" + ShootEmployeeName + "' where OrderNO='" + OrderNO + "' ";
                sSql += "else ";
                sSql += "Insert into OrdersSub (OrderNO, ShootAddressNameW, ShootEmployeeNameW) values ('" + OrderNO + "','" + ShootAddressName + "','" + ShootEmployeeName + "') ";
                sSql += string.Format("   update Orders set PreShootDateW ='{0}', ShootAddressW ='{1}' where OrderNO = '{2}'", PreShootDate, ShootAddress, OrderNO);
            }

            return ExecuteSql(sSql);
        }

        /// <summary>
        /// Add by Caijinsong 2014-11-28
        /// </summary>
        /// <param name="ID"></param>
        /// <param name="OrderNO"></param>
        /// <param name="PreShootDate"></param>
        /// <param name="ShootEmployeeNO"></param>
        /// <param name="LightEmployeeNO"></param>
        /// <param name="DressEmployeeNO"></param>
        /// <param name="DressAssistantEmployeeNO"></param>
        /// <param name="sCreate"></param>
        /// <param name="sCreateDate"></param>
        /// <param name="sProcess"></param>
        /// <returns></returns>
        public bool Update_PreShootTimeAndEmployee(string OrderNO, string ShootState, string ShootType, string[] PreShootDate, string[] ShootEmployeeNO, string[] ShootEmployeeName, string[] LightEmployeeNO, string[] LightEmployeeName, string[] DressEmployeeNO, string[] DressEmployeeName, string[] DressAssistantEmployeeNO, string[] DressAssistantEmployeeName, string sCreate, string sCreateDate, string[] sProcess)
        {
            string strSql = "";
            if (ShootType == "全套")
            {
                strSql = "update OrderShoot set PreShootDate='" + PreShootDate[0] + "', ShootEmployeeNO='" + ShootEmployeeNO[0] + "', LightEmployeeNO='" + LightEmployeeNO[0] + "', DressEmployeeNO='" + DressEmployeeNO[0] + "', DressAssistantEmployeeNO='" + DressAssistantEmployeeNO[0] + "', OpDateTime=GetDate() where OrderNO='" + OrderNO + "' and shootState='" + ShootState + "' and ShootType='内景' and IsDelete=0 ";
                strSql += "\r\n";
                strSql += "update OrderShoot set PreShootDate='" + PreShootDate[1] + "', ShootEmployeeNO='" + ShootEmployeeNO[1] + "', LightEmployeeNO='" + LightEmployeeNO[1] + "', DressEmployeeNO='" + DressEmployeeNO[1] + "', DressAssistantEmployeeNO='" + DressAssistantEmployeeNO[1] + "', OpDateTime=GetDate() where OrderNO='" + OrderNO + "' and shootState='" + ShootState + "' and ShootType='外景' and IsDelete=0 ";
                strSql += "if exists(select 1 from OrdersSub where OrderNO='" + OrderNO + "') ";
                strSql += "Update OrdersSub set ShootEmployeeNameN='" + ShootEmployeeName[0] + "', LightEmployeeNameN='" + LightEmployeeName[0] + "', DressEmployeeNameN='" + DressEmployeeName[0] + "', DressAssistantEmployeeNameN='" + DressAssistantEmployeeName[0] + "', ShootEmployeeNameW='" + ShootEmployeeName[1] + "', LightEmployeeNameW='" + LightEmployeeName[1] + "', DressEmployeeNameW='" + DressEmployeeName[1] + "', DressAssistantEmployeeNameW='" + DressAssistantEmployeeName[1] + "' where OrderNO='" + OrderNO + "' ";
                strSql += "else ";
                strSql += "Insert into OrdersSub (OrderNO, ShootEmployeeNameN, LightEmployeeNameN, DressEmployeeNameN, DressAssistantEmployeeNameN, ShootEmployeeNameW, LightEmployeeNameW, DressEmployeeNameW, DressAssistantEmployeeNameW) values ('" + OrderNO + "','" + ShootEmployeeName[0] + "', '" + LightEmployeeName[0] + "', '" + DressEmployeeName[0] + "', '" + DressAssistantEmployeeName[0] + "', '" + ShootEmployeeName[1] + "', '" + LightEmployeeName[1] + "', '" + DressEmployeeName[1] + "', '" + DressAssistantEmployeeName[1] + "') ";
                InsertOrderLogoBatZ(OrderNO, sProcess[0], "", sCreate, sCreateDate);
                InsertOrderLogoBatZ(OrderNO, sProcess[1], "", sCreate, sCreateDate);
            }
            else if (ShootType == "内景")
            {
                strSql = "update OrderShoot set PreShootDate='" + PreShootDate[0] + "', ShootEmployeeNO='" + ShootEmployeeNO[0] + "', LightEmployeeNO='" + LightEmployeeNO[0] + "', DressEmployeeNO='" + DressEmployeeNO[0] + "', DressAssistantEmployeeNO='" + DressAssistantEmployeeNO[0] + "', OpDateTime=GetDate() where OrderNO='" + OrderNO + "' and shootState='" + ShootState + "' and ShootType='内景' and IsDelete=0 ";
                strSql += "if exists(select 1 from OrdersSub where OrderNO='" + OrderNO + "') ";
                strSql += "Update OrdersSub set ShootEmployeeNameN='" + ShootEmployeeName[0] + "', LightEmployeeNameN='" + LightEmployeeName[0] + "', DressEmployeeNameN='" + DressEmployeeName[0] + "', DressAssistantEmployeeNameN='" + DressAssistantEmployeeName[0] + "' where OrderNO='" + OrderNO + "' ";
                strSql += "else ";
                strSql += "Insert into OrdersSub (OrderNO, ShootEmployeeNameN, LightEmployeeNameN, DressEmployeeNameN, DressAssistantEmployeeNameN) values ('" + OrderNO + "','" + ShootEmployeeName[0] + "', '" + LightEmployeeName[0] + "', '" + DressEmployeeName[0] + "', '" + DressAssistantEmployeeName[0] + "') ";
                InsertOrderLogoBatZ(OrderNO, sProcess[0], "", sCreate, sCreateDate);
            }
            else if (ShootType == "外景")
            {
                strSql = "update OrderShoot set PreShootDate='" + PreShootDate[1] + "', ShootEmployeeNO='" + ShootEmployeeNO[1] + "', LightEmployeeNO='" + LightEmployeeNO[1] + "', DressEmployeeNO='" + DressEmployeeNO[1] + "', DressAssistantEmployeeNO='" + DressAssistantEmployeeNO[1] + "', OpDateTime=GetDate() where OrderNO='" + OrderNO + "' and shootState='" + ShootState + "' and ShootType='外景' and IsDelete=0 ";
                strSql += "if exists(select 1 from OrdersSub where OrderNO='" + OrderNO + "') ";
                strSql += "Update OrdersSub set ShootEmployeeNameW='" + ShootEmployeeName[1] + "', LightEmployeeNameW='" + LightEmployeeName[1] + "', DressEmployeeNameW='" + DressEmployeeName[1] + "', DressAssistantEmployeeNameW='" + DressAssistantEmployeeName[1] + "' where OrderNO='" + OrderNO + "' ";
                strSql += "else ";
                strSql += "Insert into OrdersSub (OrderNO, ShootEmployeeNameW, LightEmployeeNameW, DressEmployeeNameW, DressAssistantEmployeeNameW) values ('" + OrderNO + "', '" + ShootEmployeeName[1] + "', '" + LightEmployeeName[1] + "', '" + DressEmployeeName[1] + "', '" + DressAssistantEmployeeName[1] + "')";
                InsertOrderLogoBatZ(OrderNO, sProcess[1], "", sCreate, sCreateDate);
            }
            //InsertOrderLogoBatZ(OrderNO, sProcess, "", sCreate, sCreateDate);
            return ExecuteSql(strSql);
        }

        /// <summary>
        /// 高级查询出的安排外景
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sShootTimeN"></param>
        /// <param name="sShootAddress"></param>
        /// <param name="sShootEmployeeNO"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateN_PreShootW(string sOrderNO, string sShootTime, string sShootAddress, string sShootEmployeeNO, string sShootMemory)
        {
            string sSql = "Update Orders Set PreShootDateW='" + sShootTime + "',ShootEmployeeNOW='" + sShootEmployeeNO + "',ShootMemoryW='" + sShootMemory + "',ShootDateW=null,ShootAddressW='" + sShootAddress + "' where OrderNO='" + sOrderNO + "' ";//ShootAddressW='" + sShootAddress + "',
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 删除摄控 Modified by Liuhaiyang 2017.1.10
        /// </summary>
        /// <param name="OrderNO"></param>
        /// <param name="ShootType"></param>
        /// <param name="ShootDepartment"></param>
        /// <param name="PreShootDate"></param>
        /// <returns></returns>
        public bool Delete_PreShoot(string OrderNO, string ShootState, string ShootType)
        {
            //string sSql = "Delete dbo.ControlTableFormat  where OrderNO='" + OrderNO + "' and OrderIndex='001' and SeparateNO='" + sOption + "' ";
            string strSql = "";
            if (ShootType == "全套")
            {
                strSql = "update OrderShoot set PreShootDate=null, ShootDate=null, RecordState = 1 where OrderNO='" + OrderNO + "' and shootState='" + ShootState + "' AND RecordState = 0";
                //strSql += "  update Orders set PreShootDateN = null, PreShootDateW =null,ShootAddressN = null,ShootMeMoryN = null,ShootAddressW = null,ShootMeMoryW = null where OrderNO='" + OrderNO + "' and shootState='" + shootState + "' and (ShootDate is null or DateDiff(DD,ShootDate,'1900-01-01')=0 or DateDiff(DD,ShootDate,dateadd(DD,2,PreShootDate))>=0) ";
            }
            else
            {
                strSql = "update OrderShoot set PreShootDate=null, ShootDate=null, RecordState = 1 where OrderNO='" + OrderNO + "' and shootState='" + ShootState + "' and ShootType='" + ShootType + "' AND RecordState = 0";
                //strSql += "  update Orders set PreShootDateN = null, PreShootDateW =null,ShootAddressN = null,ShootMeMoryN = null,ShootAddressW = null,ShootMeMoryW = null where OrderNO='" + OrderNO + "' and shootState='" + shootState + "' and (ShootDate is null or DateDiff(DD,ShootDate,'1900-01-01')=0 or DateDiff(DD,ShootDate,dateadd(DD,2,PreShootDate))>=0) ";
            }
            bool bOk = ExecuteSql(strSql);
            if (bOk)
            {
                // 恢复上一条置为失效的记录，更新Orders对应日期
                switch (ShootType)
                {
                    case "内景":
                        strSql = string.Format(@"SELECT * FROM OrderShoot WHERE OrderNO = '{0}' AND ShootType = '{1}' AND RecordState = 2 ORDER BY OpDateTime DESC", OrderNO, ShootType);
                        using (DataSet ds = ExecuteDataSet(strSql, "table"))
                        {
                            if (ds.IsEmpty())
                            {
                                // 直接更新Order
                                string strUpdateOrder = "update Orders set PreShootDateN = null, ShootDateN = null, ShootAddressN = null where OrderNO='" + OrderNO + "'";
                                return ExecuteSql(strUpdateOrder);
                            }
                            else
                            {
                                // 恢复记录，再对应更新Order
                                DataRow dr = ds.Tables[0].Rows[0];
                                DateTime dtPreShoot = dr["PreShootDate"].SafeDbDateTime();
                                DateTime dtShoot = dr["ShootDate"].SafeDbDateTime();
                                string strUpdateOrder = string.Format(@"update Orders set PreShootDateN = '{0}', ShootDateN = '{1}', ShootAddressN = '{2}' where OrderNO='{3}'", dtPreShoot.Equals(DateTime.MinValue) ? "1900-01-01" : dtPreShoot.ToString(CultureInfo.CurrentCulture), dtShoot.Equals(DateTime.MinValue) ? "1900-01-01" : dtShoot.ToString(CultureInfo.CurrentCulture), dr["ShootAddress"].SafeDbString(), OrderNO);
                                string strUpdateOrderShoot = string.Format(@"UPDATE OrderShoot SET RecordState = 0 WHERE ID = {0}", dr["ID"].SafeDbInt32());
                                return ExecuteSql(string.Format(@"{0} {1}", strUpdateOrder, strUpdateOrderShoot));
                            }
                        }
                    case "外景":
                        strSql = string.Format(@"SELECT * FROM OrderShoot WHERE OrderNO = '{0}' AND ShootType = '{1}' AND RecordState = 2 ORDER BY OpDateTime DESC", OrderNO, ShootType);
                        using (DataSet ds = ExecuteDataSet(strSql, "table"))
                        {
                            if (ds.IsEmpty())
                            {
                                // 直接更新Order
                                string strUpdateOrder = "update Orders set PreShootDateW = null, ShootDateW = null, ShootAddressW = null where OrderNO='" + OrderNO + "'";
                                return ExecuteSql(strUpdateOrder);
                            }
                            else
                            {
                                // 恢复记录，再对应更新Order
                                DataRow dr = ds.Tables[0].Rows[0];
                                DateTime dtPreShoot = dr["PreShootDate"].SafeDbDateTime();
                                DateTime dtShoot = dr["ShootDate"].SafeDbDateTime();
                                string strUpdateOrder = string.Format(@"update Orders set PreShootDateW = '{0}', ShootDateW = '{1}', ShootAddressW = '{2}' where OrderNO='{3}'", dtPreShoot.Equals(DateTime.MinValue) ? "1900-01-01" : dtPreShoot.ToString(CultureInfo.CurrentCulture), dtShoot.Equals(DateTime.MinValue) ? "1900-01-01" : dtShoot.ToString(CultureInfo.CurrentCulture), dr["ShootAddress"].SafeDbString(), OrderNO);
                                string strUpdateOrderShoot = string.Format(@"UPDATE OrderShoot SET RecordState = 0 WHERE ID = {0}", dr["ID"].SafeDbInt32());
                                return ExecuteSql(string.Format(@"{0} {1}", strUpdateOrder, strUpdateOrderShoot));
                            }
                        }
                    case "全套":
                        string strSqlN = string.Format(@"SELECT * FROM OrderShoot WHERE OrderNO = '{0}' AND ShootType = '内景' AND RecordState = 2 ORDER BY OpDateTime DESC", OrderNO);
                        string strSqlW = string.Format(@"SELECT * FROM OrderShoot WHERE OrderNO = '{0}' AND ShootType = '外景' AND RecordState = 2 ORDER BY OpDateTime DESC", OrderNO);
                        bool bOkN, bOkW;
                        using (DataSet dsN = ExecuteDataSet(strSqlN, "table"), dsW = ExecuteDataSet(strSqlW, "table"))
                        {
                            if (dsN.IsEmpty())
                            {
                                // 直接更新Order
                                string strUpdateOrder = "update Orders set PreShootDateN = null, ShootDateN = null, ShootAddressN = null where OrderNO='" + OrderNO + "'";
                                bOkN = ExecuteSql(strUpdateOrder);
                            }
                            else
                            {
                                // 恢复记录，再对应更新Order
                                DataRow dr = dsN.Tables[0].Rows[0];
                                DateTime dtPreShoot = dr["PreShootDate"].SafeDbDateTime();
                                DateTime dtShoot = dr["ShootDate"].SafeDbDateTime();
                                string strUpdateOrder = string.Format(@"update Orders set PreShootDateN = '{0}', ShootDateN = '{1}', ShootAddressN = '{2}' where OrderNO='{3}'", dtPreShoot.Equals(DateTime.MinValue) ? "1900-01-01" : dtPreShoot.ToString(CultureInfo.CurrentCulture), dtShoot.Equals(DateTime.MinValue) ? "1900-01-01" : dtShoot.ToString(CultureInfo.CurrentCulture), dr["ShootAddress"].SafeDbString(), OrderNO);
                                string strUpdateOrderShoot = string.Format(@"UPDATE OrderShoot SET RecordState = 0 WHERE ID = {0}", dr["ID"].SafeDbInt32());
                                bOkN = ExecuteSql(string.Format(@"{0} {1}", strUpdateOrder, strUpdateOrderShoot));
                            }

                            if (dsW.IsEmpty())
                            {
                                // 直接更新Order
                                string strUpdateOrder = "update Orders set PreShootDateW = null, ShootDateW = null, ShootAddressW = null where OrderNO='" + OrderNO + "'";
                                bOkW = ExecuteSql(strUpdateOrder);
                            }
                            else
                            {
                                // 恢复记录，再对应更新Order
                                DataRow dr = dsW.Tables[0].Rows[0];
                                DateTime dtPreShoot = dr["PreShootDate"].SafeDbDateTime();
                                DateTime dtShoot = dr["ShootDate"].SafeDbDateTime();
                                string strUpdateOrder = string.Format(@"update Orders set PreShootDateW = '{0}', ShootDateW = '{1}', ShootAddressW = '{2}' where OrderNO='{3}'", dtPreShoot.Equals(DateTime.MinValue) ? "1900-01-01" : dtPreShoot.ToString(CultureInfo.CurrentCulture), dtShoot.Equals(DateTime.MinValue) ? "1900-01-01" : dtShoot.ToString(CultureInfo.CurrentCulture), dr["ShootAddress"].SafeDbString(), OrderNO);
                                string strUpdateOrderShoot = string.Format(@"UPDATE OrderShoot SET RecordState = 0 WHERE ID = {0}", dr["ID"].SafeDbInt32());
                                bOkW = ExecuteSql(string.Format(@"{0} {1}", strUpdateOrder, strUpdateOrderShoot));
                            }
                        }
                        return bOkW && bOkN;
                }
            }
            return false;
        }
        /// <summary>
        /// 变更摄影状态-外景
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sShootDate"></param>
        /// <param name="sCreate"></param>
        /// <param name="sCreateDate"></param>
        /// <param name="sProcess"></param>
        /// <returns></returns>
        [WebMethod]
        public bool ChangeShootW(string sOrderNO, string sShootDate, string sCreate, string sCreateDate, string sProcess)
        {
            string sSql = "Update Orders Set ShootDateW='" + sShootDate + "' where OrderNO='" + sOrderNO + "' ";
            if (!ExecuteSql(sSql))
                return false;
            InsertOrderLogoBatZ(sOrderNO, sProcess, "", sCreate, sCreateDate);
            return true;
        }

        /// <summary>
        /// 进棚时间
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sShootTimeN1"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateShootTimeN1(string sOrderNO, string sShootTitle, string sShootTimeN1, string sShootMemory)
        {
            string sSql = "Update Orders set ShootTitle='" + sShootTitle + "',ShootTimeN1='" + sShootTimeN1 + "',ShootTimeN2=NULL,ShootMemory='" + sShootMemory + "' where OrderNO='" + sOrderNO + "' ";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 出棚时间
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sShootTimeN2"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateShootTimeN2(string sOrderNO, string sShootTitle, string sShootTime1, string sShootTime2, string sShootMemory, string sCreate)
        {
            string sSql = "Update Orders set ShootTimeN2='" + sShootTime2 + "' where OrderNO='" + sOrderNO + "' ";
            sSql += "Insert into ShootTime ([OrderNO],[ShootTitle],[ShootTime1],[ShootTime2],[ShootMemory],[Create]) Values ('" + sOrderNO + "','" + sShootTitle + "','" + sShootTime1 + "','" + sShootTime2 + "','" + sShootMemory + "','" + sCreate + "')";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 预约看样
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sChooseAddress"></param>
        /// <param name="sChooseEmployeeNO"></param>
        /// <param name="sChooseDate"></param>
        /// <returns></returns>
        //[WebMethod]
        //public bool UpdatePreChoose(string sOrderNo, string sChooseAddress, string sChooseEmployeeNO, string sChooseDate, string sChooseMeMory, string sCreate, string sCreateDate, string sProcess)
        //{
        //    string sSql = "Update Orders Set PreChooseDate='" + sChooseDate + "',ChooseAddress='" + sChooseAddress + "',ChooseEmployeeNO='" + sChooseEmployeeNO + "',ChooseMeMory='" + sChooseMeMory + "' where OrderNO='" + sOrderNo + "' ";
        //    if (!ExecuteSql(sSql))
        //        return false;
        //    InsertOrderLogoBat(sOrderNo, sProcess, "", sCreate, sCreateDate);
        //    return true;
        //}

        /// <summary>
        /// 实际看样
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sChooseAddress"></param>
        /// <param name="sChooseEmployeeNO"></param>
        /// <param name="sChooseDate"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateChoose(string sOrderNO, string sChooseAddress, string sChooseEmployeeNO, string sChooseDate, string sCreate, string sCreateDate, string sProcess)
        {
            string sSql = "Update Orders Set ChooseDate='" + sChooseDate + "',ChooseAddress='" + sChooseAddress + "',ChooseEmployeeNO='" + sChooseEmployeeNO + "' where OrderNO='" + sOrderNO + "' ";
            if (!ExecuteSql(sSql))
                return false;
            InsertOrderLogoBat(sOrderNO, sProcess, "", sCreate, sCreateDate);
            return true;
        }

        /// <summary>
        /// 查询看样控制
        /// </summary>
        /// <param name="sSql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchChoose(string sql)
        {
            string sSql = "select distinct CardNO, CustomerNO, OrderNO, FPH, CustomerName1, CustomerName2, MobilePhone1, MobilePhone2, SuiteName, SuitePrice, PreChooseDate, ChooseAddress, ChooseEmployee, ChooseDate, ChooseMeMory, ShootEmployeeN,OrderEmployee, OrderDate, Process, OrderLogoEmployee from  VIEW_Orders where 1=1 " + sql;
            return ExecuteDataSet(sSql, "SearchChoose");
        }

        /// <summary>
        /// 预约看版
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sLookAddress"></param>
        /// <param name="sLookEmployeeNO"></param>
        /// <param name="sLookDate"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdatePreLook(string sOrderNO, string sLookAddress, string sLookEmployeeNO, string sLookDate, string sCreate, string sCreateDate, string sLookMemory, string sProcess, string[] sOrderIndex, string[] sSeparateNO)
        {
            string sSql = "Update Orders Set PreLookDate='" + sLookDate + "',LookAddress='" + sLookAddress + "',LookEmployeeNO='" + sLookEmployeeNO + "',LookMemory='" + sLookMemory + "' where OrderNO='" + sOrderNO + "' ";
            if (!ExecuteSql(sSql))
                return false;
            //InsertOrderLogoBat(sOrderNo, sProcess, "", sCreate, sCreateDate);
            for (int i = 0; i < sOrderIndex.Length; i++)
            {
                InsertOrderLogo(sOrderNO, sOrderIndex[i], sSeparateNO[i], "", sProcess, "", sCreate, sCreateDate);
            }
            return true;
        }

        /// <summary>
        /// 查询当前流程的订单产品
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sProcess"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchCurrentProcessOrderProduct(string sOrderNO, string sProcess)
        {
            string sSql = "SELECT OrderNO, ProductNO, OrderIndex, SeparateNO, ProductName, ProductSize, ProductTypeNO, ProductTypeName, PageQuantity, NegativeQuantity, ProductQuantity, ProductMemory, ProductSellingPrice, ProduceState, [Create], CreateDate,Process FROM dbo.VIEW_CurrentProcessOrderProduct where OrderNO='" + sOrderNO + "' ";
            if (sProcess != "全部")
                sSql += "and Process='" + sProcess + "' ";
            return ExecuteDataSet(sSql, "OrderProducts");
        }


        /// <summary>
        /// 查询当前日期的看版产品
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sPreLookDate"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchLookProduct(string sOrderNO, string sPreLookDate)
        {

            string sSql = "select OrderNO, OrderIndex, SeparateNO, ProductNO, ProductName, ProductTypeName,ProductSize=(ProductSizeA+ '*'+ ProductSizeB), Fram, Box, Unit, Paper, film, InsidePage, Biao, Ban, Diao, PageQuantity, NegativeQuantity, ProductQuantity, ProductSellingPrice, ProductMemory, ProduceState, PreLookDate, LookAddress, LookEmployeeNO, LookDate, LookMemory, LookState, PreGetGoodsDate, GetGoodsAddress, GetGoodsEmployeeNO, GetGoodsDate, GetGoodsMemory, GetGoodsState from dbo.VIEW_LookAndGetGoodsProducts where OrderNO='" + sOrderNO + "' and datediff(dd,PreLookDate,'" + sPreLookDate + "')=0 ";
            return ExecuteDataSet(sSql, "OrderProducts");
        }

        /// <summary>
        /// 查询当前日期的看版产品
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sPreLookDate"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchLookProducts(string sOrderNO, string sPreLookDate, string[] SelectedOrdersIndex)
        {
            //现在的 QQQ:20120324
            StringBuilder strsql = new StringBuilder();
            strsql.Append(@"select OrderNO, OrderIndex, SeparateNO, ProductNO, ProductName, ProductTypeName,ProductSize=(ProductSizeA+ '*'+ ProductSizeB), Fram, Box, Unit, Paper, film, InsidePage, Biao, Ban, Diao, PageQuantity, NegativeQuantity, ProductQuantity, ProductSellingPrice, ProductMemory, ProduceState, PreLookDate, LookAddress, LookEmployeeNO, LookDate, LookMemory, LookState, PreGetGoodsDate, GetGoodsAddress, GetGoodsEmployeeNO, GetGoodsDate, GetGoodsMemory, GetGoodsState from dbo.VIEW_LookAndGetGoodsProducts where OrderNO='" + sOrderNO + "' and datediff(dd,PreLookDate,'" + sPreLookDate + "')=0 ");

            //如果用户选择的位置没有产品
            if (SelectedOrdersIndex.Length == 0)
            {
                strsql.Append(" ");
            }
            else if (SelectedOrdersIndex.Length > 0)
            {
                strsql.Append(" and (");
            }


            if (SelectedOrdersIndex.Length > 0)
            {
                for (int i = 0; i < SelectedOrdersIndex.Length; i++)
                {

                    if (i < (SelectedOrdersIndex.Length - 1))
                    {
                        strsql.Append(" OrderIndex='" + SelectedOrdersIndex[i] + "' or");
                    }
                    else
                    {
                        strsql.Append(" OrderIndex='" + SelectedOrdersIndex[i] + "' ");
                    }

                }
                strsql.Append(" )");
            }
            return ExecuteDataSet(strsql.ToString(), "SearchLookProduct");
        }

        /// <summary>
        /// 查询当前日期的取件产品和订单编号和用户索引则的取控的位置的索引
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sPreGetGoodsDate"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchGetGoodsProduct(string sOrderNO, string sPreGetGoodsDate, string[] OrderIndexs)
        {
            //以前的
            //string sSql = "select OrderNO, OrderIndex, SeparateNO, ProductNO, ProductName, ProductTypeName,ProductSize=(ProductSizeA+ '*'+ ProductSizeB), Fram, Box, Unit, Paper, film, InsidePage, Biao, Ban, Diao, PageQuantity, NegativeQuantity, ProductQuantity, ProductSellingPrice, ProductMemory, ProduceState, PreLookDate, LookAddress, LookEmployeeNO, LookDate, LookMemory, LookState, PreGetGoodsDate, GetGoodsAddress, GetGoodsEmployeeNO, GetGoodsDate, GetGoodsMemory, GetGoodsState from dbo.VIEW_LookAndGetGoodsProducts where OrderNO='" + sOrderNo + "' and PreGetGoodsDate='" + sPreGetGoodsDate + "' ";


            //201203修改以前的---(string sOrderNo, string sPreGetGoodsDate)
            //string sSql = "select OrderNO, OrderIndex, SeparateNO, ProductNO, ProductName, ProductTypeName,ProductSize=(ProductSizeA+ '*'+ ProductSizeB), Fram, Box, Unit, Paper, film, InsidePage, Biao, Ban, Diao, PageQuantity, NegativeQuantity, ProductQuantity, ProductSellingPrice, ProductMemory, ProduceState, PreLookDate, LookAddress, LookEmployeeNO, LookDate, LookMemory, LookState, PreGetGoodsDate, GetGoodsAddress, GetGoodsEmployeeNO, GetGoodsDate, GetGoodsMemory, GetGoodsState from dbo.VIEW_LookAndGetGoodsProducts where OrderNO='" + sOrderNo + "' and datediff(dd,PreGetGoodsDate,'" + sPreGetGoodsDate + "')=0 ";
            //现在修改的 ---(string sOrderNo, string sPreGetGoodsDate ,string [] OrderIndex)
            //and (OrderIndex='005' or OrderIndex='007')
            StringBuilder strsql = new StringBuilder();
            strsql.Append(@"select OrderNO, OrderIndex, SeparateNO, ProductNO, ProductName, ProductTypeName,ProductSize=(ProductSizeA+ '*'+ ProductSizeB), Fram, Box, Unit, Paper, film, InsidePage, Biao, Ban, Diao, PageQuantity, NegativeQuantity, ProductQuantity, ProductSellingPrice, ProductMemory, ProduceState, PreLookDate, LookAddress, LookEmployeeNO, LookDate, LookMemory, LookState, PreGetGoodsDate, GetGoodsAddress, GetGoodsEmployeeNO, GetGoodsDate, GetGoodsMemory, GetGoodsState from dbo.VIEW_LookAndGetGoodsProducts where OrderNO='" + sOrderNO + "' and datediff(dd,PreGetGoodsDate,'" + sPreGetGoodsDate + "')=0 ");

            //如果用户选择的位置没有产品
            if (OrderIndexs.Length == 0)
            {
                strsql.Append(" ");
            }
            else if (OrderIndexs.Length > 0)
            {
                strsql.Append(" and (");
            }


            if (OrderIndexs.Length > 0)
            {
                for (int i = 0; i < OrderIndexs.Length; i++)
                {

                    if (i < (OrderIndexs.Length - 1))
                    {
                        strsql.Append(" OrderIndex='" + OrderIndexs[i] + "' or");
                    }
                    else
                    {
                        strsql.Append(" OrderIndex='" + OrderIndexs[i] + "' ");
                    }

                }
                strsql.Append(" )");
            }

            return ExecuteDataSet(strsql.ToString(), "OrderProducts");
        }

        [WebMethod]
        public DataSet SerarchGetGoodsProductJiTiTimers(string ordersno, string xPreGetGoodsDatetimers)
        {
            StringBuilder strsql = new StringBuilder();
            strsql.Append(@"select DISTINCT PreGetGoodsDate  from OrderProducts where OrderNO='" + ordersno + "' and datediff(dd,PreGetGoodsDate,'" + xPreGetGoodsDatetimers + "')=0 ");
            //strsql.Append(@"select DISTINCT OrderIndex  from OrderProducts where OrderNO='" + ordersno + "' and datediff(dd,PreGetGoodsDate,'" + xPreGetGoodsDatetimers + "')=0 ");
            strsql.Append(@"select GetGoodsRow,GetGoodsCol from ControlTableFormat where OrderNO='" + ordersno + "'");
            return ExecuteDataSet(strsql.ToString(), "SerarchGetGoodsProductJiTiTimers");
        }
        /// <summary>
        /// 获取看样消费金额
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public string GetChooseCash(string sOrderNO)
        {
            string sSql = "select CashNumber from VIEW_ChooseCash where OrderNO='" + sOrderNO + "'";
            return ExecuteSqlToString(sSql);
        }

        /// <summary>
        /// 实际看版
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sLookAddress"></param>
        /// <param name="sLookEmployeeNO"></param>
        /// <param name="sLookDate"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateLook(string sOrderNO, string sLookAddress, string sLookEmployeeNO, string sLookDate, string sCreate, string sCreateDate, string sProcess)
        {
            string sSql = "Update Orders Set LookDate='" + sLookDate + "',LookAddress='" + sLookAddress + "',LookEmployeeNO='" + sLookEmployeeNO + "' where OrderNO='" + sOrderNO + "' ";
            if (!ExecuteSql(sSql))
                return false;
            InsertOrderLogoBat(sOrderNO, sProcess, "", sCreate, sCreateDate);
            return true;
        }

        /// <summary>
        /// 查询看版控制
        /// </summary>
        /// <param name="sSql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchLook(string sql)
        {
            string sSql = "select distinct CardNO, CustomerNO, OrderNO, FPH, CustomerName1, CustomerName2, MobilePhone1, MobilePhone2, SuiteName, SuitePrice, PreLookDate, LookAddress, LookEmployee, LookDate, LookMemory,OrderEmployee, OrderDate, Process, OrderLogoEmployee from  VIEW_Orders  where 1=1 " + sql;
            return ExecuteDataSet(sSql, "SearchLook");
        }

        /// <summary>
        /// 预约取件
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sGetGoodsAddress"></param>
        /// <param name="sGetGoodsEmployeeNO"></param>
        /// <param name="sGetGoodsDate"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdatePreGetGoods(string sOrderNO, string sGetGoodsAddress, string sGetGoodsEmployeeNO, string sGetGoodsDate, string sCreate, string sCreateDate, string sGetGoodsMemory, string sProcess)
        {
            string sSql = "Update Orders Set PreGetGoodsDate='" + sGetGoodsDate + "',GetGoodsAddress='" + sGetGoodsAddress + "',GetGoodsEmployeeNO='" + sGetGoodsEmployeeNO + "',GetGoodsMemory='" + sGetGoodsMemory + "' where OrderNO='" + sOrderNO + "' ";
            if (!ExecuteSql(sSql))
                return false;
            InsertOrderLogoBat(sOrderNO, sProcess, "", sCreate, sCreateDate);
            return true;
        }

        /// <summary>
        /// 实际取件
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sGetGoodsAddress"></param>
        /// <param name="sGetGoodsEmployeeNO"></param>
        /// <param name="sGetGoodsDate"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateGetGoods(string sOrderNO, string sGetGoodsAddress, string sGetGoodsEmployeeNO, string sGetGoodsDate, string sCreate, string sCreateDate, string sProcess)
        {
            string sSql = "Update Orders Set GetGoodsDate='" + sGetGoodsDate + "',GetGoodsAddress='" + sGetGoodsAddress + "',GetGoodsEmployeeNO='" + sGetGoodsEmployeeNO + "' where OrderNO='" + sOrderNO + "' ";
            if (!ExecuteSql(sSql))
                return false;
            InsertOrderLogoBat(sOrderNO, sProcess, "", sCreate, sCreateDate);
            return true;
        }

        /// <summary>
        /// 查询看版控制
        /// </summary>
        /// <param name="sSql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchGetGoods(string sql)
        {
            string sSql = "select CardNO, CustomerNO, OrderNO, FPH, CustomerName1, CustomerName2, MobilePhone1, MobilePhone2, SuiteName, SuitePrice, PreGetGoodsDate, GetGoodsAddress, GetGoodsEmployee, GetGoodsDate, GetGoodsMemory,OrderEmployee, OrderDate, Process, OrderLogoEmployee from dbo.VIEW_Orders where 1=1 " + sql;
            return ExecuteDataSet(sSql, "SearchGetGoods");
        }

        /// <summary>
        /// 得到当天摄影、看样、看版、取件客人对数
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public int[] SearchContrl()
        {
            int[] iContrl = new int[4];
            DataSet myds = new DataSet();
            try
            {
                OpenConn();
                string Sql = "select ShootNum=dbo.GetShootNum(getdate()),ChooseNum=dbo.GetChooseNum(getdate()),LookNum=dbo.GetLookNum(getdate()),GetGoodsNum=dbo.GetGetGoodsNum(getdate())";
                SqlDataAdapter myda = new SqlDataAdapter(Sql, Conn);
                myda.Fill(myds, "SearchGetGoods");
                CloseConn();
                iContrl[0] = Int32.Parse(myds.Tables[0].Rows[0]["ShootNum"].ToString());
                iContrl[1] = Int32.Parse(myds.Tables[0].Rows[0]["ChooseNum"].ToString());
                iContrl[2] = Int32.Parse(myds.Tables[0].Rows[0]["LookNum"].ToString());
                iContrl[3] = Int32.Parse(myds.Tables[0].Rows[0]["GetGoodsNum"].ToString());
                return iContrl;
            }
            catch
            {
                return iContrl;
            }
        }

        /// <summary>
        /// 得到当天可使用时间
        /// </summary>
        /// <param name="sElementType">要素类别,如:"取件地点"</param>
        /// <param name="sElementName">要素名称,如:"取件部"</param>
        /// <param name="sSubDate">查询日期</param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchContrlTime(string sElementType, string sElementName, string sSubDate)
        {
            string sSql = "select * from dbo.Element_SubTime where SubDateID=dbo.GetElement_SubDateID(dbo.GetElementID('" + sElementType + "','" + sElementName + "'),'" + sSubDate + "')";
            return ExecuteDataSet(sSql, "SearchContrlTime");
        }

        /// <summary>
        /// 得到当前时间已排对数
        /// </summary>
        /// <param name="sContrlType">要素类别,如:"取件地点"</param>
        /// <param name="sContrlTime">查询时间</param>
        /// <returns></returns>
        [WebMethod]
        public string SearchCurrentContrlNumber(string sContrlType, string sContrlTime)
        {
            try
            {
                string sSql = "select ContrlNumber=count(*) from dbo.v_SearchOrders where 1=1 ";
                switch (sContrlType)
                {
                    case "选衣地点":
                        sSql += "and datediff(mi,PreClothesDate,'" + sContrlTime + "')=0 ";
                        break;
                    case "化妆地点":
                        sSql += "and datediff(mi,PreDressDate,'" + sContrlTime + "')=0 ";
                        break;
                    case "摄影地点":
                        sSql += "and (datediff(mi,PreShootDateN,'" + sContrlTime + "')=0 or datediff(mi,PreShootDateW,'" + sContrlTime + "')=0)";
                        break;
                    case "看样地点":
                        sSql += "and datediff(mi,PreLookDate,'" + sContrlTime + "')=0 ";
                        break;
                    case "看版地点":
                        sSql += "and datediff(mi,PreLookDate,'" + sContrlTime + "')=0 ";
                        break;
                    case "取件地点":
                        sSql += "and datediff(mi,PreGetGoodsDate,'" + sContrlTime + "')=0 ";
                        break;
                }
                DataSet myds = ExecuteDataSet(sSql, "SearchCurrentContrlNumber");
                return myds.Tables[0].Rows[0][0].ToString();
            }
            catch { return "0"; }
        }
        #endregion

        #region 流程控制表设置

        /// <summary>
        /// 流程控制表-用于那几大控
        /// </summary>
        /// <param name="sAddress"></param>
        /// <param name="sDate1"></param>
        /// <param name="sDate2"></param>
        /// <param name="sColTitle"></param>
        /// <param name="sRowTime"></param>
        /// <param name="sCreater"></param>
        /// <param name="sCreateDate"></param>
        /// <param name="sRowIndex"></param>
        /// <param name="sColIndex"></param>
        /// <param name="sOperaterEmployee"></param>
        /// <param name="sIsReadOnly"></param>
        /// <returns></returns>
        [WebMethod]
        public bool SaveControlTable(
            string sControlTableType, string sAddress, string sDate1, string sDate2, string sColTitle, string sRowTime, string sCreater, string sCreateDate,
            string[] sRowIndex, string[] sColIndex, string[] sOperaterEmployee, string[] sIsReadOnly, string[] sControlMemory)
        {
            string sSql = "Insert into dbo.ControlTable (ControlTableType, [Address], Date1, Date2, ColTitle, RowTime, Creater, CreateDate) values ('" + sControlTableType + "','" + sAddress + "', '" + sDate1 + "', '" + sDate2 + "', '" + sColTitle + "', '" + sRowTime + "', '" + sCreater + "', '" + sCreateDate + "') ";
            sSql += "declare @ControlTableID varchar(50) select top 1 @ControlTableID=ID from ControlTable order by ID desc ";
            for (int i = 0; i < sRowIndex.Length; i++)
            {
                sSql += "insert into dbo.ControlTableSub (ControlTableID, RowIndex, ColIndex, OperaterEmployee, IsReadOnly,ControlMemory) values (@ControlTableID,'" + sRowIndex[i] + "', '" + sColIndex[i] + "', '" + sOperaterEmployee[i] + "', '" + sIsReadOnly[i] + "','" + sControlMemory[i] + "') ";
            }
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 更新流程控制表
        /// </summary>
        /// <param name="sControlTableID"></param>
        /// <param name="sRowIndex"></param>
        /// <param name="sColIndex"></param>
        /// <param name="sOperaterEmployee"></param>
        /// <param name="sIsReadOnly"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateControlTable(string sControlTableID, string sColTitle, string sRowTime, string[] sRowIndex, string[] sColIndex, string[] sOperaterEmployee, string[] sIsReadOnly, string[] sControlMemory)
        {
            string sSql = "Update ControlTable set ColTitle='" + sColTitle + "', RowTime='" + sRowTime + "' where ID='" + sControlTableID + "' ";
            sSql += "Delete dbo.ControlTableSub where ControlTableID='" + sControlTableID + "' ";
            for (int i = 0; i < sRowIndex.Length; i++)
            {
                sSql += "insert into dbo.ControlTableSub (ControlTableID, RowIndex, ColIndex, OperaterEmployee, IsReadOnly, ControlMemory) values('" + sControlTableID + "','" + sRowIndex[i] + "', '" + sColIndex[i] + "', '" + sOperaterEmployee[i] + "', '" + sIsReadOnly[i] + "','" + sControlMemory[i] + "') ";
            }
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 删除流程控制表
        /// </summary>
        /// <param name="sControlTableID"></param>
        /// <returns></returns>
        [WebMethod]
        public bool DeleteControlTable(string sControlTableID)
        {
            string sSql = "Delete ControlTable where ID='" + sControlTableID + "' ";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 查询流程控制表
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchControlTable(string sql)
        {
            string sSql = "SELECT top 100 [ID], ControlTableType, [Address], AddressName, Date1,  Date2, ColTitle, RowTime, Creater, CreateDate FROM VIEW_ControlTable where 1=1 " + sql + " order by CreateDate desc";
            return ExecuteDataSet(sSql, "ControlTable");
        }

        /// <summary>
        /// 查询流程控制子表
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchControlTableSub(string sql)
        {
            string sSql = "select RowIndex, ColIndex, OperaterEmployee, IsReadOnly,ControlMemory from dbo.ControlTableSub where 1=1 " + sql;
            return ExecuteDataSet(sSql, "SearchControlTableSub");
        }

        /// <summary>
        /// 预约摄控表
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sShootAddress"></param>
        /// <param name="sShootEmployeeNO"></param>
        /// <param name="sShootDate"></param>
        /// <param name="sShootMemory"></param>
        /// <param name="sCreate"></param>
        /// <param name="sCreateDate"></param>
        /// <param name="sProcess"></param>
        /// <param name="sShootTableFormatRowIndex"></param>
        /// <param name="sShootTableFormatColIndex"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdatePreShootAndControlTableFormat(string sOrderNO, string sShootAddress, string sShootEmployeeNO, string sShootDate, string sShootMemory, string sCreate, string sCreateDate, string sProcess, string sShootTableFormatRowIndex, string sShootTableFormatColIndex, string sOption)
        {
            string sSql = "";
            if (sOption == "内景")
            {
                sSql = "Update Orders Set PreShootDateN='" + sShootDate + "',ShootAddressN='" + sShootAddress + "',ShootMeMoryN='" + sShootMemory + "' where OrderNO='" + sOrderNO + "' ";

                sSql += "if not Exists(select OrderNO from dbo.ControlTableFormat where OrderNO='" + sOrderNO + "' and OrderIndex='001' and SeparateNO='内景') Insert into dbo.ControlTableFormat (OrderNO, OrderIndex, SeparateNO, ShootRow1, ShootCol1, Shoot_Create1, Shoot_CreateDate1, ShootState1) values ('" + sOrderNO + "', '001', '内景','" + sShootTableFormatRowIndex + "','" + sShootTableFormatColIndex + "','" + sCreate + "','" + sCreateDate + "','未预约') else Update dbo.ControlTableFormat set ShootRow1='" + sShootTableFormatRowIndex + "',ShootCol1='" + sShootTableFormatColIndex + "',Shoot_Create1='" + sCreate + "',Shoot_CreateDate1='" + sCreateDate + "', ShootState1='未预约' where OrderNO='" + sOrderNO + "' and OrderIndex='001' and SeparateNO='内景' ";

            }
            else if (sOption == "外景")
            {
                sSql = "Update Orders Set PreShootDateW='" + sShootDate + "',ShootAddressW='" + sShootAddress + "',ShootMeMoryW='" + sShootMemory + "' where OrderNO='" + sOrderNO + "' ";

                sSql += "if not Exists(select OrderNO from dbo.ControlTableFormat where OrderNO='" + sOrderNO + "' and OrderIndex='001' and SeparateNO='外景') Insert into dbo.ControlTableFormat (OrderNO, OrderIndex, SeparateNO, ShootRow2, ShootCol2, Shoot_Create2, Shoot_CreateDate2, ShootState2) values ('" + sOrderNO + "', '001', '外景','" + sShootTableFormatRowIndex + "','" + sShootTableFormatColIndex + "','" + sCreate + "','" + sCreateDate + "','未预约') else Update dbo.ControlTableFormat set ShootRow2='" + sShootTableFormatRowIndex + "',ShootCol2='" + sShootTableFormatColIndex + "',Shoot_Create2='" + sCreate + "',Shoot_CreateDate2='" + sCreateDate + "', ShootState2='未预约' where OrderNO='" + sOrderNO + "' and OrderIndex='001' and SeparateNO='外景' ";

            }

            if (!ExecuteSql(sSql))
                return false;

            InsertOrderLogoBatZ(sOrderNO, sProcess, "", sCreate, sCreateDate);
            return true;
        }


        /// <summary>
        /// 查询摄控
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchPreShootNAndControlTableFormat(string sql, string sOption)
        {
            string sSql = "";
            if (sOption == "内景")
            {
                sSql = "Select distinct CustomerNO, OrderNO, CustomerName1, CustomerName2, MobilePhone1, MobilePhone2, SuiteName, SuitePrice, LF, FPH, ShootRow1 as ShootRow, ShootCol1 as ShootCol, ShootState1 as shootState, PreShootDateN as PreShootDate, ShootAddressNON as ShootAddressNO, ShootAddressN as ShootAddress, ShootEmployeeN as ShootEmployee, ShootMemoryN as ShootMemory, ShootTitle, ShootTimeN1, ShootTimeN2, ShootMemory_Title, MarryDate, OrderDepartment, OrderEmployee, OrderDate, DressEmployee, DressMemory, PreDressDate,Shoot_Create1 as Shoot_Create from dbo.VIEW_SearchPreShoot_N where (ShootState1 is not null and ShootState1<>'') and SeparateNO='" + sOption + "' " + sql;
            }
            else if (sOption == "外景")
            {
                sSql = "Select distinct CustomerNO, OrderNO, CustomerName1, CustomerName2, MobilePhone1, MobilePhone2, SuiteName, SuitePrice, LF, FPH, ShootRow2 as ShootRow, ShootCol2 as ShootCol, ShootState2 as shootState, PreShootDateW as PreShootDate, ShootAddressNOW as ShootAddressNO, ShootAddressW as ShootAddress, ShootEmployeeW as ShootEmployee, ShootMemoryW as ShootMemory, ShootTitle, ShootTimeN1, ShootTimeN2, ShootMemory_Title, MarryDate, OrderDepartment, OrderEmployee, OrderDate, DressEmployee, DressMemory, PreDressDate,Shoot_Create2 as Shoot_Create from dbo.VIEW_SearchPreShoot_N where (ShootState2 is not null and ShootState2<>'') and SeparateNO='" + sOption + "' " + sql;
            }
            return ExecuteDataSet(sSql, "SearchPreChoose");
        }

        /// <summary>
        /// 查询摄控表-新
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet Search_PreShoot(string sql)
        {
            //string sSql = "select CustomerNO, OrderNO, FPH, CustomerName1, CustomerName2, MobilePhone1, MobilePhone2, PreShootDateN, ShootDateN, ShootAddressNNO, ShootAddressN, ShootEmployeeN,LightEmployeeN, DressEmployeeN,DressAssistantEmployeeN, ShootMemoryN, PreShootDateW, ShootDateW, ShootEmployeeNOW,LightEmployeeW, ShootAddressW, ShootEmployeeW, DressEmployeeW,DressAssistantEmployeeW, ShootAddressWNO, ShootMemoryW, SuiteName, SuitePrice, LF, OrderEmployee, orderDepartmentNo, OrderDepartmentName, MarryDate, Process,OrderMemory,CheckN=isnull(CheckN,0), SuiteNOPayable from VIEW_SearchPreShoot where 1=1 " + sql;
            string sSql = @"select  dv.ID as VenueID,vs.CheckN,vs.Process,shootState, shootState AS OldShootState, vs.OrderNO,vs.OrderDate,vs.FPH,CustomerName1,CustomerName2,MobilePhone1,MobilePhone2,SuiteName,vs.orderDepartmentNo,
OrderDepartment,vs.OrderEmployeeNO,vs.OrderEmployeeNO2,OrderEmployee,OrderEmployee2,ShootType,ShootDepartmentNO,shootDepartment,ShootAddressNO,ShootAddress,
ShootEmployeeNO,ShootEmployee,LightEmployeeNO,LightEmployee,vs.DressEmployeeNO,DressEmployee,DressAssistantEmployeeNO,DressAssistantEmployee,
PreShootDate,vs.ShootMemory,ShootDate,vs.SuitePrice,LF,MarryDate,vs.OrderMemory,SuiteNOPayable,ActualSuite,vs.OrderSuitePrice,Address2,o.CustomerNO
from VIEW_SearchOrderShoot  vs 
left join  D_Venue dv on dv.DepartmentNo = vs.ShootDepartmentNO 
left join  Orders o on o.OrderNO = vs.OrderNO
where vs.IsDelete=0   " + sql;//Update by Caijinsong 2014-11-26
            return ExecuteDataSet(sSql, "SearchPreChoose");
        }
        /// <summary>
        /// VIEW_SearchPreShoot
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        public DataSet SearchPreShoot(string sql)
        {
            string sSql = @"select [CustomerNO] ,[OrderNO],[FPH],[CustomerName1],[CustomerName2] ,[MobilePhone1],[MobilePhone2],[PreShootDateN],
[ShootDateN],[ShootAddressNNO] ,[ShootAddressN],[ShootEmployeeN],[DressEmployeeN],[ShootMemoryN],[PreShootDateW],[ShootDateW],[ShootEmployeeNOW],[ShootAddressW] ,
[ShootEmployeeW] ,[ShootAddressWNO],[DressEmployeeW],[ShootMemoryW],[SuiteName],[SuitePrice],[LF] ,[OrderEmployee],[orderDepartmentNo],[OrderDepartmentName],
[Process],[MarryDate],[ProcessCode],[OrderMemory],[CheckN],[CheckW],[IsDelete] ,[LightEmployeeN],[DressEmployeeN],[DressAssistantEmployeeN],[LightEmployeeW],[DressEmployeeW],[DressAssistantEmployeeW],[SuiteNOPayable],dv.ID as VenueID
from [VIEW_SearchPreShoot] vs  left join  D_Venue dv on dv.DepartmentNo = vs.ShootAddressNNO where IsDelete=0  " + sql;//Update by Caijinsong 2014-11-26
            return ExecuteDataSet(sSql, "SearchPreDress");
        }

        public DataSet SearchShoot_Order(DateTime dtBegin, DateTime dtEnd, string orderDepartmentNo, string shootDepartment, string shootState)
        {
            DataSet ds = null;
            string strSql = @"select os.OrderNO,o.Process,shootState,ShootType,PreShootDate,os.ShootDate,SuiteType.SuiteTypeName,o.SuitePrice,
dbo.Fn_GetDepartmentName(shootDepartment) shootDepartment,
dbo.Fn_GetDepartmentName(o.orderDepartmentNo) OrderDepartment,
dbo.Fn_GetEmployeeName(o.OrderEmployeeNO) OrderEmployee,
orderCash.CashNumber
from OrderShoot os join Orders o on os.OrderNO=o.OrderNO and os.IsDelete=0
left outer join SuiteType on SuiteType.SuiteTypeNO=o.SuiteTypeNO
join (
select OrderNO,SUM(CashDetail.CashNumber) as CashNumber 
from CashSub join CashDetail on CashSub.CashNO=CashDetail.CashNO and datediff(DD,CashSub.CashDate,'2015-1-1')<=0 and datediff(DD,CashSub.CashDate,'2015-5-31')>=0  and CashDetail.CashPretext in ('001','002','003','SKSY_6DP')
group by OrderNO
) orderCash on orderCash.OrderNO=os.OrderNO
where DATEDIFF(DD,PreShootDate,'" + dtBegin + "')<=0 and DATEDIFF(DD,PreShootDate,'" + dtEnd + "')>=0 ";
            if (!string.IsNullOrEmpty(orderDepartmentNo))
            {
                strSql += " and o.orderDepartmentNo='" + orderDepartmentNo + "' ";
            }
            if (!string.IsNullOrEmpty(shootDepartment))
            {
                strSql += " and os.shootDepartment='" + shootDepartment + "' ";
            }
            if (!string.IsNullOrEmpty(shootState))
            {
                strSql += " and os.shootState='" + shootState + "' ";
            }
            strSql += " order by os.OrderNO ";
            ds = ExecuteDataSet(strSql, "cao");
            return ds;
        }
        public DataSet Check_PreShoot(string OrderNO, string ShootState, string ShootType)
        {
            string strSql = "select top 1 PreShootDate,shootDepartment,ShootAddress,IsDelete from VIEW_SearchOrderShoot where OrderNO='" + OrderNO + "' and shootState='" + ShootState + "' and ShootType='" + ShootType + "' order by OpDateTime desc ";
            return ExecuteDataSet(strSql, "Check_PreShoot");
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="OrderNO"></param>
        /// <param name="ShootState"></param>
        /// <param name="ShootType"></param>
        /// <returns></returns>
        public DataSet GetOrderShoot(string OrderNO, string ShootState, string ShootType)
        {
            string strSql = "select * from OrderShoot where OrderNO='" + OrderNO + "' and shootState='" + ShootState + "' and ShootType='" + ShootType + "' and IsDelete=0 ";
            return ExecuteDataSet(strSql, "OrderShoot");
        }
        /// <summary>
        /// 拍摄销号
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sState"></param>
        /// <param name="sOption"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdatePreShootAndControlTableFormat_State(string sOrderNO, string sState, string sOption)
        {
            string sSql = "";
            if (sOption == "内景")
            {
                if (sState == "未预约")
                {
                    sSql += "Update Orders set ShootDateN=null where OrderNO='" + sOrderNO + "' ";

                }
                else if (sState == "拍摄完成")
                {
                    sSql += "Update Orders set ShootDateN='" + DateTime.Now.ToString() + "' where OrderNO='" + sOrderNO + "' ";
                }
                sSql += "Update dbo.ControlTableFormat set ShootState1='" + sState + "' where OrderNO='" + sOrderNO + "' and OrderIndex='001' and SeparateNO='" + sOption + "' ";
            }
            else if (sOption == "外景")
            {
                if (sState == "未预约")
                {
                    sSql += "Update Orders set ShootDateW=null where OrderNO='" + sOrderNO + "' ";

                }
                else if (sState == "拍摄完成")
                {
                    sSql += "Update Orders set ShootDateW='" + DateTime.Now.ToString() + "' where OrderNO='" + sOrderNO + "' ";
                }
                sSql += "Update dbo.ControlTableFormat set ShootState2='" + sState + "' where OrderNO='" + sOrderNO + "' and OrderIndex='001' and SeparateNO='" + sOption + "' ";
            }
            return ExecuteSql(sSql);
        }
        /// <summary>
        /// 拍摄完成
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sState"></param>
        /// <param name="sOption"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateShootFNL(string sOrderNO, string sState, string sOption)
        {
            string sSql = "";
            if (sOption == "全套")
            {
                if (sState == "未预约")
                {
                    sSql += "Update Orders set PreShootDateN=null,ShootDateN=null,PreShootDateW=null,ShootDateW=null where OrderNO='" + sOrderNO + "' ";

                }
                else if (sState == "拍摄完成")
                {
                    sSql += "Update Orders set ShootDateN='" + DateTime.Now.ToString() + "',ShootDateW='" + DateTime.Now.ToString() + "' where OrderNO='" + sOrderNO + "' ";
                }
            }
            else if (sOption == "内景")
            {
                if (sState == "未预约")
                {
                    sSql += "Update Orders set PreShootDateN=null,ShootDateN=null where OrderNO='" + sOrderNO + "' ";

                }
                else if (sState == "拍摄完成")
                {
                    sSql += "Update Orders set ShootDateN='" + DateTime.Now.ToString() + "' where OrderNO='" + sOrderNO + "' ";
                }
            }
            else if (sOption == "外景")
            {
                if (sState == "未预约")
                {
                    sSql += "Update Orders set PreShootDateW=null,ShootDateW=null where OrderNO='" + sOrderNO + "' ";

                }
                else if (sState == "拍摄完成")
                {
                    sSql += "Update Orders set ShootDateW='" + DateTime.Now.ToString() + "' where OrderNO='" + sOrderNO + "' ";
                }
            }
            return ExecuteSql(sSql);

        }
        /// <summary>
        /// 新拍摄完成
        /// Add by Caijinsong 2014-11-28
        /// </summary>
        /// <param name="ID"></param>
        /// <param name="dateTime"></param>
        /// <returns></returns>
        public bool CompleteShoot(string OrderNO, string ShootState, string ShootType, DateTime dateTime)
        {
            string strSql = "";
            if (ShootType == "全套")
            {
                strSql = "update OrderShoot set ShootDate='" + dateTime.ToString("yyyy-MM-dd HH:mm:ss") + "' where OrderNO='" + OrderNO + "' AND RecordState = 0";
            }
            else
            {
                strSql = "update OrderShoot set ShootDate='" + dateTime.ToString("yyyy-MM-dd HH:mm:ss") + "' where OrderNO='" + OrderNO + "' AND RecordState = 0 and ShootType='" + ShootType + "'";
            }
            return ExecuteSql(strSql);
        }

        /// <summary>
        /// 删除摄控
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sOption"></param>
        /// <returns></returns>
        [WebMethod]
        public bool DeletePreShootAndControlTableFormat(string sOrderNO, string sOption)
        {
            string sSql = "Delete dbo.ControlTableFormat  where OrderNO='" + sOrderNO + "' and OrderIndex='001' and SeparateNO='" + sOption + "' ";
            if (sOption == "内景")
            {
                sSql = "update Orders set PreShootDateN = null,ShootAddressN = null,ShootMeMoryN = null where  OrderNO='" + sOrderNO + "' ";
            }
            else if (sOption == "外景")
            {
                sSql = "update Orders set PreShootDateW = null,ShootAddressW = null,ShootMeMoryW = null  where OrderNO='" + sOrderNO + "' ";
            }
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 摄影调度对单销号（内）
        /// </summary>
        /// <param name="sOrderNO">订单号</param>
        /// <param name="sCheckN">状态：True或False</param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateShoot_CheckN(string sOrderNO, string sCheckN, string ShootState)
        {
            string sSql = "if exists(select OrderNO from OtherInfo where OrderNO='" + sOrderNO + "') Update OtherInfo set CheckN='" + sCheckN + "' where OrderNO='" + sOrderNO + "' else Insert into OtherInfo (OrderNO,CheckN) values ('" + sOrderNO + "','" + sCheckN + "') ;";
            sSql += " Update OrderShoot set CheckN='" + sCheckN + "' where OrderNO='" + sOrderNO + "' and shootState='" + ShootState + "' and IsDelete=0";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 预约看样
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sChooseAddress"></param>
        /// <param name="sChooseEmployeeNO"></param>
        /// <param name="sChooseDate"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdatePreChooseAndControlTableFormat(string sOrderNO, string sChooseAddress, string sChooseAddressName, string sChooseEmployeeNO, string sChooseEmployeeName, string sChooseDate, string sChooseMeMory, string sCreate, string sCreateDate, string sProcess, string sChooseTableFormatRowIndex, string sChooseTableFormatColIndex)
        {
            string sSql = "Update Orders Set PreChooseDate='" + sChooseDate + "',ChooseAddress='" + sChooseAddress + "',ChooseMeMory='" + sChooseMeMory + "' where OrderNO='" + sOrderNO + "' ";
            sSql += "if exists(select 1 from OrdersSub where OrderNO='" + sOrderNO + "') ";
            sSql += "Update OrdersSub set ChooseAddressName='" + sChooseAddressName + "', ChooseEmployeeName='" + sChooseEmployeeName + "' where OrderNO='" + sOrderNO + "' ";
            sSql += "else ";
            sSql += "insert into OrdersSub (OrderNO, ChooseAddressName, ChooseEmployeeName) values('" + sOrderNO + "', '" + sChooseAddressName + "', '" + sChooseEmployeeName + "') ";
            //读取产品序号
            DataSet myds = new DataSet();
            try
            {
                OpenConn();
                string Sql = "select OrderNO, OrderIndex, SeparateNO from OrderProducts where OrderNO='" + sOrderNO + "' ";
                SqlDataAdapter myda = new SqlDataAdapter(Sql, Conn);
                myda.Fill(myds, "OrderProducts");
                CloseConn();
            }
            catch { return false; }
            if (myds.Tables[0].Rows.Count > 0)
            {
                DataRow[] dr = myds.Tables[0].Select("1=1");
                for (int i = 0; i < dr.Length; i++)
                {
                    sSql += string.Format(@"
IF NOT EXISTS (
	SELECT OrderNO 
	FROM dbo.ControlTableFormat_Choose 
	WHERE OrderNO='{0}'
) 
BEGIN
	INSERT INTO dbo.ControlTableFormat_Choose (OrderNO, ChooseRow, ChooseCol, Choose_Create, Choose_CreateDate, ChooseState) 
	VALUES ('{0}', {1}, {2}, '{3}', '{4}', '未预约') 
END
ELSE BEGIN
	UPDATE dbo.ControlTableFormat_Choose 
	SET
	ChooseRow={1},
	ChooseCol={2},
	Choose_Create='{3}',
	Choose_CreateDate='{4}', 
	ChooseState='未预约' 
	WHERE OrderNO='{0}' 
END ", sOrderNO, sChooseTableFormatRowIndex, sChooseTableFormatColIndex, sCreate, sCreateDate);
                    //sSql += "if not Exists(select OrderNO from dbo.ControlTableFormat where OrderNO='" + sOrderNo + "' and OrderIndex='" + dr[i]["OrderIndex"].ToString() + "' and SeparateNO='" + dr[i]["SeparateNO"].ToString() + "') Insert into dbo.ControlTableFormat (OrderNO, OrderIndex, SeparateNO, ChooseRow, ChooseCol, Choose_Create, Choose_CreateDate, ChooseState) values ('" + sOrderNo + "', '" + dr[i]["OrderIndex"].ToString() + "', '" + dr[i]["SeparateNO"].ToString() + "','" + sChooseTableFormatRowIndex + "','" + sChooseTableFormatColIndex + "','" + sCreate + "','" + sCreateDate + "','未预约') else Update dbo.ControlTableFormat set ChooseRow='" + sChooseTableFormatRowIndex + "',ChooseCol='" + sChooseTableFormatColIndex + "',Choose_Create='" + sCreate + "',Choose_CreateDate='" + sCreateDate + "', ChooseState='未预约' where OrderNO='" + sOrderNo + "' and SeparateNO='" + dr[i]["SeparateNO"].ToString() + "' ";
                }
            }

            if (!ExecuteSql(sSql))
                return false;
            InsertOrderLogoBatZ(sOrderNO, sProcess, "", sCreate, sCreateDate);
            return true;
        }

        /// <summary>
        /// 变更预约看样状态-未预约,已预约,看样完成
        /// </summary>
        /// <param name="sOrderNO">订单号</param>
        /// <param name="sChooseAddress">看样地点</param>
        /// <param name="sChooseEmployee">看样时间</param>
        /// <param name="sState">状态</param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdatePreChooseAndControlTableFormat_State(string sOrderNO, string sChooseAddress, string sChooseEmployee, string sChooseEmployeeName, string sState)
        {
            DataSet myds = new DataSet();
            try
            {
                OpenConn();
                string Sql = "select OrderNO, OrderIndex, SeparateNO from OrderProducts where OrderNO='" + sOrderNO + "' ";
                SqlDataAdapter myda = new SqlDataAdapter(Sql, Conn);
                myda.Fill(myds, "OrderProducts");
                CloseConn();
            }
            catch { return false; }
            string sSql = "";
            sSql += "Update Orders set ChooseEmployeeNO='" + sChooseEmployee + "',ChooseDate='" + DateTime.Now.ToString() + "' where OrderNO='" + sOrderNO + "' ";
            sSql += "if exists(select 1 from OrdersSub where OrderNO='" + sOrderNO + "') ";
            sSql += "Update OrdersSub set ChooseEmployeeName='" + sChooseEmployeeName + "' where OrderNO='" + sOrderNO + "' ";
            sSql += "else ";
            sSql += "Insert into OrdersSub (OrderNO, ChooseEmployeeName) values ('" + sOrderNO + "','" + sChooseEmployeeName + "') ";
            if (myds.Tables[0].Rows.Count > 0)
            {
                DataRow[] dr = myds.Tables[0].Select("1=1");
                for (int i = 0; i < dr.Length; i++)
                {
                    sSql += string.Format(@" UPDATE dbo.ControlTableFormat_Choose SET ChooseState='{0}' WHERE OrderNO='{1}' ", sState, sOrderNO);
                    //sSql += "Update dbo.ControlTableFormat set ChooseState='" + sState + "' where OrderNO='" + sOrderNo + "' and OrderIndex='" + dr[i]["OrderIndex"].ToString() + "' and SeparateNO='" + dr[i]["SeparateNO"].ToString() + "' ";
                }
            }
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 删除看样控
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sCreate"></param>
        /// <param name="sCreateDate"></param>
        /// <param name="sProcess"></param>
        /// <returns></returns>
        [WebMethod]
        public bool DeletePreChooseAndControlTableFormat(string sOrderNO, string sCreate, string sCreateDate, string sProcess)
        {
            string sSql = "Update Orders Set PreChooseDate='',ChooseAddress='',ChooseEmployeeNO='' where OrderNO='" + sOrderNO + "' ";
            sSql += "Update OrdersSub set ChooseAddressName='', ChooseEmployeeName='' where OrderNO='" + sOrderNO + "' ";
            //sSql += "delete dbo.ControlTableFormat where OrderNO='" + sOrderNo + "' ";
            if (!ExecuteSql(sSql))
                return false;
            InsertOrderLogoBatZ(sOrderNO, sProcess, "", sCreate, sCreateDate);
            return true;
        }

        /// <summary>
        /// 查询看样控制表
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchPreChooseAndControlTableFormat(string sql)
        {
            string sSql = "Select distinct CustomerNO, OrderNO, CustomerName1, CustomerName2, MobilePhone1, MobilePhone2, SuiteName, SuitePrice, ChooseCash, ChooseRow, ChooseCol, ChooseState, PreChooseDate, ChooseAddressNO, ChooseAddress, ChooseEmployee, ChooseMeMory, ShootEmployeeN,Choose_Create from dbo.VIEW_SearchPreChoose where (ChooseState is not null and ChooseState<>'') " + sql;
            return ExecuteDataSet(sSql, "SearchPreChoose");
        }

        /// <summary>
        /// 预约看版控
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sGetGoodsAddress"></param>
        /// <param name="sGetGoodsEmployeeNO"></param>
        /// <param name="sGetGoodsDate"></param>
        /// <param name="sGetGoodsMeMory"></param>
        /// <param name="sCreate"></param>
        /// <param name="sCreateDate"></param>
        /// <param name="sProcess"></param>
        /// <param name="sOrderIndex"></param>
        /// <param name="sSeparateNO"></param>
        /// <param name="sGetGoodsTableFormatRowIndex"></param>
        /// <param name="sGetGoodsTableFormatColIndex"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdatePreLookAndControlTableFormat(string sOrderNO, string sLookAddress, string sLookAddressName, string sLookEmployeeNO, string sLookEmployeeName, string sLookDate, string sLookMeMory, string sCreate, string sCreateDate, string sProcess, string[] sOrderIndex, string[] sSeparateNO, string sLookTableFormatRowIndex, string sLookTableFormatColIndex)
        {

            string sSql = "Update Orders Set PreLookDate='" + sLookDate + "',LookAddress='" + sLookAddress + "',LookMeMory='" + sLookMeMory + "' where OrderNO='" + sOrderNO + "' ";
            sSql += "if exists(select 1 from OrdersSub where OrderNO='" + sOrderNO + "') ";
            sSql += "Update OrdersSub set LookAddressName='" + sLookAddressName + "', LookEmployeeName='" + sLookEmployeeName + "' where OrderNO='" + sOrderNO + "' ";
            sSql += "else ";
            sSql += "Insert into OrdersSub (OrderNO, LookAddressName, LookEmployeeName) values ('" + sOrderNO + "','" + sLookAddressName + "','" + sLookEmployeeName + "') ";
            for (int i = 0; i < sOrderIndex.Length; i++)
            {
                sSql += "Update OrderProducts Set PreLookDate='" + sLookDate + "',LookAddress='" + sLookAddress + "',LookMeMory='" + sLookMeMory + "' where OrderNO='" + sOrderNO + "' and ParentProductNO='" + sOrderIndex[i] + "' and SeparateNO='" + sSeparateNO[i] + "' ";
                sSql += "if not Exists(select OrderNO from dbo.ControlTableFormat where OrderNO='" + sOrderNO + "' and OrderIndex='" + sOrderIndex[i] + "' and SeparateNO='" + sSeparateNO[i] + "') Insert into dbo.ControlTableFormat (OrderNO, OrderIndex, SeparateNO, LookRow, LookCol, Look_Create, Look_CreateDate, LookState) values ('" + sOrderNO + "','" + sOrderIndex[i] + "','" + sSeparateNO[i] + "','" + sLookTableFormatRowIndex + "','" + sLookTableFormatColIndex + "','" + sCreate + "','" + sCreateDate + "','未预约') else Update dbo.ControlTableFormat set LookRow='" + sLookTableFormatRowIndex + "',LookCol='" + sLookTableFormatColIndex + "',Look_Create='" + sCreate + "',Look_CreateDate='" + sCreateDate + "', LookState='未预约' where OrderNO='" + sOrderNO + "' and OrderIndex='" + sOrderIndex[i] + "' and SeparateNO='" + sSeparateNO[i] + "' ";
            }
            if (!ExecuteSql(sSql))
                return false;
            for (int i = 0; i < sOrderIndex.Length; i++)
                InsertOrderLogoZ(sOrderNO, sOrderIndex[i], sSeparateNO[i], "", sProcess, "", sCreate, sCreateDate);
            #region MyRegion
            //QiuQianQuan 20120204  看版时，将主产品想对应的子产品的时间改为相同
            //string PreLookDate1 = string.Format(@"select ProductNO from OrderProducts  where OrderNO='" + sOrderNo + "' and ProductNO like '%_sub%'  group by ProductNO");

            //DataSet ds = ExecuteDataSet(PreLookDate1, "PreLookDateUpdate");
            //if (ds.Tables[0].Rows.Count > 0)
            //{
            //    string date;
            //    for (int i = 0, k = 0; i < ds.Tables[0].Rows.Count; i++, k = 0)
            //    {
            //        date = ds.Tables[0].Rows[i]["ProductNO"].ToString();
            //        string[] t = date.Split('_');
            //        string onew = @"select PreLookDate from OrderProducts  where ProductNO= '" + t[k] + "' and OrderNO='" + sOrderNo + "'";
            //        DataSet ds1 = ExecuteDataSet(onew, "PreLookDateUpdate");
            //        string twow = @"update OrderProducts set PreLookDate='" + ds1.Tables[0].Rows[0]["PreLookDate"] + "' where ProductNO='" + date + "' and OrderNO='" + sOrderNo + "'";
            //        ExecuteDataSet(twow, "PreLookDateUpdate");
            //    }
            //} 
            #endregion
            return true;
        }

        /// <summary>
        /// 查询看版控制表
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchPreLookAndControlTableFormat(string sql)
        {
            string sSql = "Select distinct CustomerNO, OrderNO, CustomerName1, CustomerName2, MobilePhone1, MobilePhone2, SuiteName, LookAddress, LookEmployee, LookRow, LookCol, LookState, SuitePrice, ChooseCash, Look_Create, Look_CreateDate, Look_CreateEmployee, Look_Department, LookAddressNO, LookDate, LookMemory, PreLookDate, ShootEmployeeN from dbo.VIEW_SearchPreLook where (LookState is not null and LookState<>'') " + sql + "order by Look_CreateDate";
            return ExecuteDataSet(sSql, "SearchPreLook");
        }

        [WebMethod]
        public DataSet GetLookProducts(string sOrderNO, string sPreLookDate)
        {
            string sSql = "select ";
            return ExecuteDataSet(sSql, "LookProducts");
        }

        /// <summary>
        /// 变更预约看版状态-未预约,已预约,看版完成
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sOrderIndex"></param>
        /// <param name="sProductNO"></param>
        /// <param name="sState"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdatePreLookAndControlTableFormat_State(string sOrderNO, string sPreLookDate, string sLookEmployee, string sLookEmployeeName, string sState)
        {
            try
            {
                string tLookEmployeeName = "";
                string sSql = "select * from OrderProducts where OrderNO='" + sOrderNO + "' and datediff(dd,PreLookDate,'" + sPreLookDate + "')=0 ";
                DataSet myds = ExecuteDataSet(sSql, "ControlTableFormat");
                sSql = "";
                string sLookDate = DateTime.Now.ToString();
                for (int i = 0; i < myds.Tables[0].Rows.Count; i++)
                {
                    sSql += "Update dbo.ControlTableFormat set LookState='" + sState + "' where OrderNO='" + sOrderNO + "' and OrderIndex='" + myds.Tables[0].Rows[i]["OrderIndex"].ToString() + "' and SeparateNO='" + myds.Tables[0].Rows[i]["SeparateNO"].ToString() + "' ";
                    if (sState == "未预约")
                    {
                        sSql += "Update dbo.OrderProducts set LookDate='',LookEmployeeNO='' where OrderNO='" + sOrderNO + "' and OrderIndex='" + myds.Tables[0].Rows[i]["OrderIndex"].ToString() + "' and SeparateNO='" + myds.Tables[0].Rows[i]["SeparateNO"].ToString() + "' ";
                    }
                    else if (sState == "已预约")
                    {
                        tLookEmployeeName = sLookEmployeeName;
                        sSql += "Update dbo.OrderProducts set LookDate='',LookEmployeeNO='" + sLookEmployee + "' where OrderNO='" + sOrderNO + "' and OrderIndex='" + myds.Tables[0].Rows[i]["OrderIndex"].ToString() + "' and SeparateNO='" + myds.Tables[0].Rows[i]["SeparateNO"].ToString() + "' ";
                    }
                    else if (sState == "看版完成")
                    {
                        tLookEmployeeName = sLookEmployeeName;
                        InsertOrderLogo(sOrderNO, myds.Tables[0].Rows[i]["OrderIndex"].ToString(), myds.Tables[0].Rows[i]["SeparateNO"].ToString(), "", "P_65", "", "", "");
                        sSql += "Update dbo.OrderProducts set LookDate='" + sLookDate + "',LookEmployeeNO='" + sLookEmployee + "' where OrderNO='" + sOrderNO + "' and OrderIndex='" + myds.Tables[0].Rows[i]["OrderIndex"].ToString() + "' and SeparateNO='" + myds.Tables[0].Rows[i]["SeparateNO"].ToString() + "' ";
                    }
                }
                sSql += "if exists(select 1 from OrdersSub where OrderNO='" + sOrderNO + "') ";
                sSql += "Update OrdersSub set LookEmployeeName='" + tLookEmployeeName + "' where OrderNO='" + sOrderNO + "' ";
                sSql += "else ";
                sSql += "Insert into OrdersSub (OrderNO, LookEmployeeName) values ('" + sOrderNO + "','" + tLookEmployeeName + "')";
                return ExecuteSql(sSql);
            }
            catch { return false; }
        }

        /// <summary>
        /// 删除看版控
        /// </summary>
        /// <param name="sOrderNO">订单号</param>
        /// <param name="sLookDate">预约看版日期</param>
        /// <returns></returns>
        [WebMethod]
        public bool DeletePreLookAndControlTableFormat(string sOrderNO, string sLookDate, string[] userselectOrderIndexs)
        {
            //以前的
            //string sSql = "Update OrderProducts Set PreLookDate='',LookAddress='',LookEmployeeNO='' where OrderNO='" + sOrderNo + "' and datediff(dd,PreLookDate,'" + sLookDate + "')=0 ";
            //return ExecuteSql(sSql);
            //现在的QQQ2012 03 24 
            StringBuilder strsql = new StringBuilder();
            strsql.Append(@"Update OrderProducts Set PreLookDate='',LookAddress='',LookEmployeeNO='' where OrderNO='" + sOrderNO + "' and datediff(dd,PreLookDate,'" + sLookDate + "')=0 ");
            //如果用户选择的位置没有产品
            if (userselectOrderIndexs.Length == 0)
            {
                strsql.Append(" ");
            }
            else if (userselectOrderIndexs.Length > 0)
            {
                strsql.Append(" and (");
            }


            if (userselectOrderIndexs.Length > 0)
            {
                for (int i = 0; i < userselectOrderIndexs.Length; i++)
                {

                    if (i < (userselectOrderIndexs.Length - 1))
                    {
                        strsql.Append(" OrderIndex='" + userselectOrderIndexs[i] + "' or");
                    }
                    else
                    {
                        strsql.Append(" OrderIndex='" + userselectOrderIndexs[i] + "' ");
                    }

                }
                strsql.Append(" )");
            }
            strsql.Append(" Update OrdersSub set LookAddressName='', LookEmployeeName='' where OrderNO='" + sOrderNO + "' ");
            return ExecuteSql(strsql.ToString());
        }

        /// <summary>
        /// 摄影控是否可用
        /// </summary>
        /// <param name="sShootAddress"></param>
        /// <param name="sShootDate"></param>
        /// <param name="sRow"></param>
        /// <param name="sCol"></param>
        /// <returns></returns>
        [WebMethod]
        public int IsEnable_Shoot(string sShootAddress, string sShootDate, string sRow, string sCol)
        {
            string sSql = "SELECT top 1 [ID], ControlTableType, [Address], AddressName, Date1,  Date2, ColTitle, RowTime, Creater, CreateDate FROM VIEW_ControlTable where ControlTableType='摄影地点' and Address='" + sShootAddress + "' and datediff(dd,'" + sShootDate + "',Date1)<=0 and datediff(dd,'" + sShootDate + "',Date2)>=0 order by CreateDate desc";
            string sID = ExecuteSqlToString(sSql);
            if (sID.Trim() == "")
                return -1;
            sSql = "select IsReadOnly from ControlTableSub where ControlTableID='" + sID + "' and RowIndex='" + sRow + "' and ColIndex='" + sCol + "' ";
            return ExecuteSqlToString(sSql).ToUpper() == "TRUE" ? 1 : 0;
        }

        /// <summary>
        /// 摄控是否被用
        /// </summary>
        /// <param name="sShootAddress"></param>
        /// <param name="sShootDate"></param>
        /// <param name="sRow"></param>
        /// <param name="sCol"></param>
        /// <returns></returns>
        [WebMethod]
        public bool IsUsed_Shoot(string sShootAddress, string sShootDate, string sRow, string sCol, string soption)
        {
            string sSql = "Select top 1 OrderNO from dbo.VIEW_SearchPreShoot_N where 1=1 ";
            if (soption == "内景")
                sSql += "and (ShootState1 is not null and ShootState1 <>'') and ShootAddressNON='" + sShootAddress + "' and datediff(dd,PreShootDateN,'" + sShootDate + "')=0 and ShootRow1='" + sRow + "' and ShootCol1='" + sCol + "' ";
            else
                sSql += "and (ShootState1 is not null and ShootState2 <>'') and ShootAddressNOW='" + sShootAddress + "' and datediff(dd,PreShootDateW,'" + sShootDate + "')=0 and ShootRow2='" + sRow + "' and ShootCol2='" + sCol + "' ";
            return ExecuteSqlToString(sSql).Trim() != "" ? true : false;
        }

        /// <summary>
        /// 修改内景备注
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sMemory"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateShootMemoryN(string sOrderNO, string sMemory)
        {
            string sSql = "Update Orders Set ShootMemoryN='" + sMemory + "' where OrderNO='" + sOrderNO + "' ";
            return ExecuteSql(sSql);
        }
        /// <summary>
        /// 修改内景备注
        /// Add by Caijinsong 2014-11-28
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sMemory"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateShootMemory(string OrderNO, string ShootState, string ShootType, string ShootMemory)
        {
            string sSql = "";
            if (ShootType == "全套")
            {
                sSql = "Update OrderShoot Set ShootMemory='" + ShootMemory + "' where OrderNO='" + OrderNO + "' and shootState='" + ShootState + "' and IsDelete=0";
            }
            else
            {
                sSql = "Update OrderShoot Set ShootMemory='" + ShootMemory + "' where OrderNO='" + OrderNO + "' and shootState='" + ShootState + "' and ShootType='" + ShootType + "' and IsDelete=0";
            }
            return ExecuteSql(sSql);
        }
        /// <summary>
        /// 修改外景备注
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sMemory"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateShootMemoryW(string sOrderNO, string sMemory)
        {
            string sSql = "Update Orders Set ShootMemoryW='" + sMemory + "' where OrderNO='" + sOrderNO + "' ";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 预约取控
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sGetGoodsAddress"></param>
        /// <param name="sGetGoodsEmployeeNO"></param>
        /// <param name="sGetGoodsDate"></param>
        /// <param name="sGetGoodsMeMory"></param>
        /// <param name="sCreate"></param>
        /// <param name="sCreateDate"></param>
        /// <param name="sProcess"></param>
        /// <param name="sOrderIndex"></param>
        /// <param name="sSeparateNO"></param>
        /// <param name="sGetGoodsTableFormatRowIndex"></param>
        /// <param name="sGetGoodsTableFormatColIndex"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdatePreGetGoodsAndControlTableFormat(string sOrderNO, string sGetGoodsAddress, string sGetGoodsAddressName, string sGetGoodsEmployeeNO, string sGetGoodsEmployeeName, string sGetGoodsDate, string sGetGoodsMeMory, string sCreate, string sCreateDate, string sProcess, string[] sOrderIndex, string[] sSeparateNO, string sGetGoodsTableFormatRowIndex, string sGetGoodsTableFormatColIndex)
        {
            string sSql = "Update Orders Set PreGetGoodsDate='" + sGetGoodsDate + "',GetGoodsAddress='" + sGetGoodsAddress + "',GetGoodsEmployeeNO='" + sGetGoodsEmployeeNO + "',GetGoodsMeMory='" + sGetGoodsMeMory + "' where OrderNO='" + sOrderNO + "' ";
            sSql += "if exists(select 1 from OrdersSub where OrderNO='" + sOrderNO + "') ";
            sSql += "Update OrdersSub set GetGoodsAddressName='" + sGetGoodsAddressName + "', GetGoodsEmployeeName='" + sGetGoodsEmployeeName + "' where OrderNO='" + sOrderNO + "' ";
            sSql += "else ";
            sSql += "Insert into OrdersSub (OrderNO, GetGoodsAddressName, GetGoodsEmployeeName) values ('" + sOrderNO + "', '" + sGetGoodsAddressName + "', '" + sGetGoodsEmployeeName + "')";
            for (int i = 0; i < sOrderIndex.Length; i++)
            {
                sSql += "Update OrderProducts Set PreGetGoodsDate='" + sGetGoodsDate + "',GetGoodsAddress='" + sGetGoodsAddress + "',GetGoodsEmployeeNO='" + sGetGoodsEmployeeNO + "',GetGoodsMeMory='" + sGetGoodsMeMory + "' where OrderNO='" + sOrderNO + "' and ParentProductNO='" + sOrderIndex[i] + "' and SeparateNO='" + sSeparateNO[i] + "' ";
                sSql += "if not Exists(select OrderNO from dbo.ControlTableFormat where OrderNO='" + sOrderNO + "' and OrderIndex='" + sOrderIndex[i] + "' and SeparateNO='" + sSeparateNO[i] + "') Insert into dbo.ControlTableFormat (OrderNO, OrderIndex, SeparateNO, GetGoodsRow, GetGoodsCol, GetGoods_Create, GetGoods_CreateDate, GetGoodsState) values ('" + sOrderNO + "','" + sOrderIndex[i] + "','" + sSeparateNO[i] + "','" + sGetGoodsTableFormatRowIndex + "','" + sGetGoodsTableFormatColIndex + "','" + sCreate + "','" + sCreateDate + "','未预约') else BEGIN if not Exists(select OrderNO from dbo.OrderProducts where OrderNO='" + sOrderNO + "' and OrderIndex='" + sOrderIndex[i] + "' and SeparateNO='" + sSeparateNO[i] + "' and datediff(dd,PreGetGoodsDate,'" + sGetGoodsDate + "')=0) Update dbo.ControlTableFormat set GetGoodsRow='" + sGetGoodsTableFormatRowIndex + "',GetGoodsCol='" + sGetGoodsTableFormatColIndex + "', GetGoodsState='未预约' where OrderNO='" + sOrderNO + "' and OrderIndex='" + sOrderIndex[i] + "' and SeparateNO='" + sSeparateNO[i] + "' else Update dbo.ControlTableFormat set GetGoodsRow='" + sGetGoodsTableFormatRowIndex + "',GetGoodsCol='" + sGetGoodsTableFormatColIndex + "', GetGoods_Create='" + sCreate + "', GetGoods_CreateDate='" + sCreateDate + "', GetGoodsState='未预约' where OrderNO='" + sOrderNO + "' and OrderIndex='" + sOrderIndex[i] + "' and SeparateNO='" + sSeparateNO[i] + "' END ";
            }
            if (!ExecuteSql(sSql))
                return false;
            for (int i = 0; i < sOrderIndex.Length; i++)
                InsertOrderLogoZ(sOrderNO, sOrderIndex[i], sSeparateNO[i], "", sProcess, "", sCreate, sCreateDate);
            #region MyRegion
            //QiuQianQuan 20120204 ：取件时，将主产品想对应的子产品的时间改为相同
            //string PreLookDate1 = string.Format(@"select ProductNO from OrderProducts  where OrderNO='" + sOrderNo + "' and ProductNO like '%_sub%'  group by ProductNO");
            //DataSet ds = ExecuteDataSet(PreLookDate1, "PreLookDateUpdate");
            //if (ds.Tables[0].Rows.Count > 0)
            //{
            //    string date;
            //    for (int i = 0, k = 0; i < ds.Tables[0].Rows.Count; i++, k = 0)
            //    {
            //        date = ds.Tables[0].Rows[i]["ProductNO"].ToString();
            //        string[] t = date.Split('_');
            //        string onew = @"select PreGetGoodsDate from OrderProducts  where ProductNO= '" + t[k] + "' and OrderNO='" + sOrderNo + "'";
            //        DataSet ds1 = ExecuteDataSet(onew, "PreLookDateUpdate");
            //        string twow = @"update OrderProducts set PreGetGoodsDate='" + ds1.Tables[0].Rows[0]["PreGetGoodsDate"] + "' where ProductNO='" + date + "' and OrderNO='" + sOrderNo + "'";
            //        ExecuteDataSet(twow, "PreLookDateUpdate");
            //    }
            //} 
            #endregion

            return true;
        }



        /// <summary>
        /// 设计部看版完成
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sOrderIndex"></param>
        /// <param name="sSeparateNO"></param>
        /// <param name="sLookDate"></param>
        /// <param name="sLookEmployee"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateLookAndControlTableFormat_State(string sOrderNO, string sOrderIndex, string sSeparateNO, string sLookDate, string sLookEmployee)
        {
            string sSql = "";
            if (InsertOrderLogo(sOrderNO, sOrderIndex, sSeparateNO, "", "P_65", "", "", ""))
            {
                sSql = "Update dbo.ControlTableFormat set LookState='看版完成' where OrderNO='" + sOrderNO + "' and OrderIndex='" + sOrderIndex + "' and SeparateNO='" + sSeparateNO + "' ";
                sSql += "Update dbo.OrderProducts set LookDate='" + sLookDate + "',LookEmployeeNO='" + sLookEmployee + "' where OrderNO='" + sOrderNO + "' and OrderIndex='" + sOrderIndex + "' and SeparateNO='" + sSeparateNO + "' ";
            }
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 查询取件控制表
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchPreGetGoodsAndControlTableFormat(string sql)
        //public ControlTable[] SearchPreGetGoodsAndControlTableFormat(string sql)
        {
            //string sSql = "Select distinct dbo.VIEW_SearchPreGetGoods.CustomerNO, OrderNO, FPH, CustomerName1, CustomerName2, MobilePhone1, MobilePhone2, SuiteName, SuitePrice, ChooseCash, GetGoodsRow, GetGoodsCol, GetGoodsState, PreGetGoodsDate, GetGoodsAddressNO, GetGoodsAddress, GetGoods_CreateEmployeeNO, GetGoodsEmployee, GetGoodsMeMory, GetGoods_Create, GetGoods_CreateDepartment, GetGoods_CreateDate,OrderDate,dbo.Letters.[Address]  from dbo.VIEW_SearchPreGetGoods left join dbo.Letters on dbo.VIEW_SearchPreGetGoods.CustomerNO=dbo.Letters.CustomerNO where (GetGoodsState is not null and GetGoodsState <>'') " + sql + " and dbo.Letters.IsEnableAddress=0 order by GetGoods_CreateDate,OrderNO";
            string sSql = "Select distinct vs.CustomerNO, OrderNO, FPH, CustomerName1, CustomerName2, MobilePhone1, MobilePhone2, SuiteName, SuitePrice, ChooseCash, GetGoodsRow, GetGoodsCol, GetGoodsState, PreGetGoodsDate, GetGoodsAddressNO, GetGoodsAddress,GetGoods_CreateEmployeeNO, GetGoodsEmployee, GetGoodsMeMory, GetGoods_Create, GetGoods_CreateDepartment, GetGoods_CreateDate,OrderDate,L.[Address]  from dbo.VIEW_SearchPreGetGoods vs left join Letters L on vs.CustomerNO=L.CustomerNO and L.IsEnableAddress=0 where (GetGoodsState is not null and GetGoodsState <>'') " + sql + "  order by GetGoods_CreateDate,OrderNO";
            //1
            return ExecuteDataSet(sSql, "SearchPreGetGoods");

            //2
            //DataRow[] dr = ExecuteDataSet(sSql, "SearchPreGetGoods").Tables[0].Select();
            //ControlTable[] ct = new ControlTable[dr.Length];
            //for (int i = 0; i < dr.Length; i++)
            //{
            //    ct[i].CustomerNO = dr[i]["CustomerNO"].ToString();
            //    ct[i].OrderNO = dr[i]["OrderNO"].ToString();
            //    ct[i].FPH = dr[i]["FPH"].ToString();
            //    ct[i].CustomerName1 = dr[i]["CustomerName1"].ToString();
            //    ct[i].CustomerName2 = dr[i]["CustomerName2"].ToString();
            //    ct[i].MobilePhone1 = dr[i]["MobilePhone1"].ToString();
            //    ct[i].MobilePhone2 = dr[i]["MobilePhone2"].ToString();
            //    ct[i].SuiteName = dr[i]["SuiteName"].ToString();
            //    ct[i].SuitePrice = dr[i]["SuitePrice"].ToString();
            //    ct[i].ChooseCash = dr[i]["ChooseCash"].ToString();
            //    ct[i].GetGoodsRow = dr[i]["GetGoodsRow"].ToString();
            //    ct[i].GetGoodsCol = dr[i]["GetGoodsCol"].ToString();
            //    ct[i].GetGoodsState = dr[i]["GetGoodsState"].ToString();
            //    ct[i].PreGetGoodsDate = dr[i]["PreGetGoodsDate"].ToString();
            //    ct[i].GetGoodsAddressNO = dr[i]["GetGoodsAddressNO"].ToString();
            //    ct[i].GetGoodsAddress = dr[i]["GetGoodsAddress"].ToString();
            //    ct[i].GetGoodsEmployee = dr[i]["GetGoodsEmployee"].ToString();
            //    ct[i].GetGoodsMeMory = dr[i]["GetGoodsMeMory"].ToString();
            //    ct[i].GetGoods_Create = dr[i]["GetGoods_Create"].ToString();
            //    ct[i].GetGoods_CreateDepartment = dr[i]["GetGoods_CreateDepartment"].ToString();
            //    ct[i].GetGoods_CreateDate = dr[i]["GetGoods_CreateDate"].ToString();
            //    ct[i].OrderDate = dr[i]["OrderDate"].ToString();
            //}
            //return ct;
        }

        /// <summary>
        /// 变更预约取件状态-未预约,已预约,取件完成
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sState"></param>
        /// <param name="sGetGoodsDate"></param>
        /// <param name="sGetGoodsEmployee"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdatePreGetGoodsAndControlTableFormat_StateALL(string sOrderNO, ref string sState, string sGetGoodsDate, string sGetGoodsEmployee)
        {
            try
            {

                InsertOrderLogoBat(sOrderNO, "P_80", "", sGetGoodsEmployee, sGetGoodsDate);
                string sSql = "Update dbo.ControlTableFormat set GetGoodsState='" + sState + "' where OrderNO='" + sOrderNO + "' ";
                sSql += "Update dbo.OrderProducts set GetGoodsDate='" + sGetGoodsDate + "',GetGoodsEmployeeNO='" + sGetGoodsEmployee + "' where OrderNO='" + sOrderNO + "' ";

                bool bOK = ExecuteSql(sSql);

                // 更新取件完成时间到Orders表中的GetGoodsDate字段 Add by LiuHaiyang 2016.11.18
                if (bOK && (sState == @"取件完成"))
                    ExecuteSql(string.Format(@"UPDATE Orders SET GetGoodsDate = '{0}' WHERE OrderNO = '{1}'", sGetGoodsDate, sOrderNO));

                return bOK;
            }
            catch { return false; }
        }

        /// <summary>
        /// 变更预约取件状态-未预约,已预约,取件完成
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sOrderIndex"></param>
        /// <param name="sProductNO"></param>
        /// <param name="sState"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdatePreGetGoodsAndControlTableFormat_State(string sOrderNO, string sPreGetGoodsDate, ref string sState, string sGetGoodsDate, string sGetGoodsEmployee)
        {
            try
            {
                string sql = "select * from OrderProducts where OrderNO = '" + sOrderNO + "' and ProduceState = '正常' and PreGetGoodsDate = '1900-01-01' and GetGoodsDate = '1900-01-01'";
                DataSet dsProduct = ExecuteDataSet(sql, "OrderProducts");

                string sSql = "select * from OrderProducts where OrderNO='" + sOrderNO + "' and datediff(dd,PreGetGoodsDate,'" + sPreGetGoodsDate + "')=0 ";
                DataSet myds = ExecuteDataSet(sSql, "ControlTableFormat");

                if (dsProduct.Tables[0].Rows.Count > 0)
                {
                    sState = "部分取件";
                }
                sSql = "";
                for (int i = 0; i < myds.Tables[0].Rows.Count; i++)
                {
                    sSql += "Update dbo.ControlTableFormat set GetGoodsState='" + sState + "' where OrderNO='" + sOrderNO + "' and OrderIndex='" + myds.Tables[0].Rows[i]["OrderIndex"].ToString() + "' and SeparateNO='" + myds.Tables[0].Rows[i]["SeparateNO"].ToString() + "' ";
                    if (sState == "取件完成")
                    {
                        InsertOrderLogo(sOrderNO, myds.Tables[0].Rows[i]["OrderIndex"].ToString(), myds.Tables[0].Rows[i]["SeparateNO"].ToString(), "", "P_80", "", sGetGoodsEmployee, sGetGoodsDate);
                        sSql += "Update dbo.OrderProducts set GetGoodsDate='" + sGetGoodsDate + "',GetGoodsEmployeeNO='" + sGetGoodsEmployee + "' where OrderNO='" + sOrderNO + "' and OrderIndex='" + myds.Tables[0].Rows[i]["OrderIndex"].ToString() + "' and SeparateNO='" + myds.Tables[0].Rows[i]["SeparateNO"].ToString() + "' ";
                    }
                    if (sState == "部分取件")
                    {
                        InsertOrderLogo(sOrderNO, myds.Tables[0].Rows[i]["OrderIndex"].ToString(), myds.Tables[0].Rows[i]["SeparateNO"].ToString(), "", "P_75", "", sGetGoodsEmployee, sGetGoodsDate);
                        sSql += "Update dbo.OrderProducts set GetGoodsDate='" + sGetGoodsDate + "',GetGoodsEmployeeNO='" + sGetGoodsEmployee + "' where OrderNO='" + sOrderNO + "' and OrderIndex='" + myds.Tables[0].Rows[i]["OrderIndex"].ToString() + "' and SeparateNO='" + myds.Tables[0].Rows[i]["SeparateNO"].ToString() + "' ";
                    }
                }
                bool bOK = ExecuteSql(sSql);

                // 更新取件完成时间到Orders表中的GetGoodsDate字段 Add by LiuHaiyang 2016.11.18
                if (bOK && (sState == @"取件完成"))
                    ExecuteSql(string.Format(@"UPDATE Orders SET GetGoodsDate = '{0}' WHERE OrderNO = '{1}'", sGetGoodsDate, sOrderNO));

                return bOK;
            }
            catch { return false; }
        }

        /// <summary>
        /// 取件部取件完成
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sOrderIndex"></param>
        /// <param name="sSeparateNO"></param>
        /// <param name="sGetGoodsDate"></param>
        /// <param name="sGetGoodsEmployee"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateGetGoodsAndControlTableFormat_State(string sOrderNO, string sOrderIndex, string sSeparateNO, string sGetGoodsDate, string sGetGoodsEmployee)
        {
            string sSql = "";
            if (InsertOrderLogo(sOrderNO, sOrderIndex, sSeparateNO, "", "P_80", "", "", ""))
            {
                sSql = "Update dbo.ControlTableFormat set GetGoodsState='取件完成' where OrderNO='" + sOrderNO + "' and OrderIndex='" + sOrderIndex + "' and SeparateNO='" + sSeparateNO + "' ";
                sSql += "Update dbo.OrderProducts set GetGoodsDate='" + sGetGoodsDate + "',GetGoodsEmployeeNO='" + sGetGoodsEmployee + "' where OrderNO='" + sOrderNO + "' and OrderIndex='" + sOrderIndex + "' and SeparateNO='" + sSeparateNO + "' ";
            }
            bool bOK = ExecuteSql(sSql);

            // 更新取件完成时间到Orders表中的GetGoodsDate字段 Add by LiuHaiyang 2016.11.18
            if (bOK)
                ExecuteSql(string.Format(@"UPDATE Orders SET GetGoodsDate = '{0}' WHERE OrderNO = '{1}'", sGetGoodsDate, sOrderNO));

            return bOK;
        }

        /// <summary>
        /// 删除取控
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <returns></returns>
        [WebMethod]
        public bool DeletePreGetGoodsAndControlTableFormat(string sOrderNO, string sGetGoodsDate, string[] userselectOrderIndexs)
        {
            //以前的
            //string sSql = "Update OrderProducts Set PreGetGoodsDate='',GetGoodsAddress='',GetGoodsEmployeeNO='' where OrderNO='" + sOrderNo + "' and datediff(dd,PreGetGoodsDate,'" + sGetGoodsDate + "')=0 ";
            //string sSql = "Update OrderProducts Set PreGetGoodsDate='',GetGoodsAddress='',GetGoodsEmployeeNO='' where OrderNO='" + sOrderNo + "' and PreGetGoodsDate='" + sGetGoodsDate + "'";
            //return ExecuteSql(sSql);
            //现在的QiuQianQuan: 20120324 
            StringBuilder strsql = new StringBuilder();
            strsql.Append(@"Update OrderProducts Set PreGetGoodsDate='',GetGoodsAddress='',GetGoodsEmployeeNO='' where OrderNO='" + sOrderNO + "' and PreGetGoodsDate='" + sGetGoodsDate + "'");

            //如果用户选择的位置没有产品
            if (userselectOrderIndexs.Length == 0)
            {
                strsql.Append(" ");
            }
            else if (userselectOrderIndexs.Length > 0)
            {
                strsql.Append(" and (");
            }


            if (userselectOrderIndexs.Length > 0)
            {
                for (int i = 0; i < userselectOrderIndexs.Length; i++)
                {

                    if (i < (userselectOrderIndexs.Length - 1))
                    {
                        strsql.Append(" OrderIndex='" + userselectOrderIndexs[i] + "' or");
                    }
                    else
                    {
                        strsql.Append(" OrderIndex='" + userselectOrderIndexs[i] + "' ");
                    }

                }
                strsql.Append(" )");
            }

            bool bRet = ExecuteSql(strsql.ToString());

            // 同时把信息更新到Orders表的记录中去 Add by LiuHaiyang 2016.12.2
            ExecuteSql(string.Format(@"UPDATE Orders SET PreGetGoodsDate = '' WHERE OrderNO = '{0}'", sOrderNO));

            return bRet;
        }

        /// <summary>
        /// 修改取件备注
        /// </summary>
        /// <param name="sOrderNO">订单号</param>
        /// <param name="sMemory">备注</param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateGetGoodsMemory(string sOrderNO, string sMemory)
        {
            string sSql = "Update OrderProducts set GetGoodsMemory='" + sMemory + "' where OrderNO='" + sOrderNO + "' ";
            sSql += "Update Orders Set GetGoodsMeMory='" + sMemory + "' where OrderNO='" + sOrderNO + "' ";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 选片单元格是否可用
        /// </summary>
        /// <param name="sGetGoodsAddress">取件地点</param>
        /// <param name="sGetGoodsDate">取件日期</param>
        /// <param name="sRow">单元格-行</param>
        /// <param name="sCol">单元格-列</param>
        /// <returns>-1表示异常,1表示不可用,0表示可用</returns>
        [WebMethod]
        public int IsEnable_Choose(string sChooseAddress, string sChooseDate, string sRow, string sCol)
        {
            string sSql = "SELECT top 1 [ID], ControlTableType, [Address], AddressName, Date1,  Date2, ColTitle, RowTime, Creater, CreateDate FROM VIEW_ControlTable where ControlTableType='看样地点' and Address='" + sChooseAddress + "' and datediff(dd,'" + sChooseDate + "',Date1)<=0 and datediff(dd,'" + sChooseDate + "',Date2)>=0 order by CreateDate desc";
            string sID = ExecuteSqlToString(sSql);
            if (sID.Trim() == "")
                return -1;
            sSql = "select IsReadOnly from ControlTableSub where ControlTableID='" + sID + "' and RowIndex='" + sRow + "' and ColIndex='" + sCol + "' ";
            return ExecuteSqlToString(sSql).ToUpper() == "TRUE" ? 1 : 0;
        }

        /// <summary>
        /// 取控单元格是否可用
        /// </summary>
        /// <param name="sGetGoodsAddress">取件地点</param>
        /// <param name="sGetGoodsDate">取件日期</param>
        /// <param name="sRow">单元格-行</param>
        /// <param name="sCol">单元格-列</param>
        /// <returns>-1表示异常,1表示不可用,0表示可用</returns>
        [WebMethod]
        public int IsEnable_GetGoods(string sGetGoodsAddress, string sGetGoodsDate, string sRow, string sCol)
        {
            string sSql = "SELECT top 1 [ID], ControlTableType, [Address], AddressName, Date1,  Date2, ColTitle, RowTime, Creater, CreateDate FROM VIEW_ControlTable where ControlTableType='取件地点' and Address='" + sGetGoodsAddress + "' and datediff(dd,'" + sGetGoodsDate + "',Date1)<=0 and datediff(dd,'" + sGetGoodsDate + "',Date2)>=0 order by CreateDate desc";
            string sID = ExecuteSqlToString(sSql);
            if (sID.Trim() == "")
                return -1;
            sSql = "select IsReadOnly from ControlTableSub where ControlTableID='" + sID + "' and RowIndex='" + sRow + "' and ColIndex='" + sCol + "' ";
            return ExecuteSqlToString(sSql).ToUpper() == "TRUE" ? 1 : 0;
        }
        /// <summary>
        /// 看板控单元格是否可用
        /// </summary>
        /// <param name="sGetGoodsAddress">看板地点</param>
        /// <param name="sGetGoodsDate">看板日期</param>
        /// <param name="sRow">单元格-行</param>
        /// <param name="sCol">单元格-列</param>
        /// <returns>-1表示异常,1表示不可用,0表示可用</returns>
        [WebMethod]
        public int IsEnable_Look(string sLookAddress, string sLookDate, string sRow, string sCol)
        {
            string sSql = "SELECT top 1 [ID], ControlTableType, [Address], AddressName, Date1,  Date2, ColTitle, RowTime, Creater, CreateDate FROM VIEW_ControlTable where ControlTableType='看版地点' and Address='" + sLookAddress + "' and datediff(dd,'" + sLookDate + "',Date1)<=0 and datediff(dd,'" + sLookDate + "',Date2)>=0 order by CreateDate desc";
            string sID = ExecuteSqlToString(sSql);
            if (sID.Trim() == "")
                return -1;
            sSql = "select IsReadOnly from ControlTableSub where ControlTableID='" + sID + "' and RowIndex='" + sRow + "' and ColIndex='" + sCol + "' ";
            return ExecuteSqlToString(sSql).ToUpper() == "TRUE" ? 1 : 0;
        }

        /// <summary>
        /// 取控单元格是否已排
        /// </summary>
        /// <param name="sGetGoodsAddress">取件地点</param>
        /// <param name="sGetGoodsDate">取件日期</param>
        /// <param name="sRow">单元格-行</param>
        /// <param name="sCol">单元格-列</param>
        /// <returns>false表示未排,true表示已排</returns>
        [WebMethod]
        public string IsUsed_GetGoods(string sGetGoodsAddress, string sGetGoodsDate, string sRow, string sCol)
        {
            string sSql = "Select top 1 OrderNO from dbo.VIEW_SearchPreGetGoods where (GetGoodsState is not null and GetGoodsState <>'') and GetGoodsAddressNO='" + sGetGoodsAddress + "' and datediff(dd,PreGetGoodsDate,'" + sGetGoodsDate + "')=0 and GetGoodsRow='" + sRow + "' and GetGoodsCol='" + sCol + "' ";
            return ExecuteSqlToString(sSql).Trim();
        }
        /// <summary>
        /// 看控单元格是否已排
        /// </summary>
        /// <param name="sGetGoodsAddress">选片地点</param>
        /// <param name="sGetGoodsDate">选片日期</param>
        /// <param name="sRow">单元格-行</param>
        /// <param name="sCol">单元格-列</param>
        /// <returns>false表示未排,true表示已排</returns>
        [WebMethod]
        public bool IsUsed_Choose(string sChooseAddress, string sChooseDate, string sRow, string sCol)
        {
            string sSql = "Select top 1 OrderNO from dbo.VIEW_SearchPreChoose where (ChooseState is not null and ChooseState <>'') and ChooseAddressNO='" + sChooseAddress + "' and datediff(dd,PreChooseDate,'" + sChooseDate + "')=0 and ChooseRow='" + sRow + "' and ChooseCol='" + sCol + "' ";
            return ExecuteSqlToString(sSql).Trim() != "" ? true : false;
        }
        /// <summary>
        /// 看板控单元格是否已排
        /// </summary>
        /// <param name="sGetGoodsAddress">看板地点</param>
        /// <param name="sGetGoodsDate">看板日期</param>
        /// <param name="sRow">单元格-行</param>
        /// <param name="sCol">单元格-列</param>
        /// <returns>false表示未排,true表示已排</returns>
        [WebMethod]
        public string IsUsed_Look(string sLookAddress, string sLookDate, string sRow, string sCol)
        {
            string sSql = "Select top 1 OrderNO from dbo.VIEW_SearchPreLook where (LookState is not null and LookState <>'') and LookAddressNO='" + sLookAddress + "' and datediff(dd,PreLookDate,'" + sLookDate + "')=0 and LookRow='" + sRow + "' and LookCol='" + sCol + "' ";
            return ExecuteSqlToString(sSql).Trim();
        }

        /// <summary>
        /// 修改看版备注
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sMemory"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateLookMemory(string sOrderNO, string sMemory)
        {
            string sSql = "Update OrderProducts set LookMemory='" + sMemory + "' where OrderNO='" + sOrderNO + "' ";
            sSql += "Update Orders Set LookMeMory='" + sMemory + "' where OrderNO='" + sOrderNO + "' ";
            return ExecuteSql(sSql);
        }
        #endregion


        #region 系统设置
        /// <summary>
        /// 读取系统配置
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet LoadSettings(string sql)
        {
            string sSql = "select * from Setting where 1=1" + sql;
            return ExecuteDataSet(sSql, "Settings");
        }

        /// <summary>
        /// 修改系统配置
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateSettings(string sql)
        {
            string sSql = "Update Setting " + sql;
            return ExecuteSql(sSql);


        }

        /// <summary>
        /// 系统设置增加
        /// </summary>
        /// <param name="sConfigNO"></param>
        /// <param name="sConfigType"></param>
        /// <param name="sConfigValue"></param>
        /// <param name="sCreate"></param>
        /// <param name="sCreateDate"></param>
        /// <returns></returns>
        [WebMethod]
        public bool SaveConfig(string sConfigNO, string sConfigType, string sConfigValue, string sCreate, string sCreateDate)
        {
            string sSql = "Insert into Config (ConfigNO,ConfigType,ConfigValue,[Create],CreateDate) values ('" + sConfigNO + "', '" + sConfigType + "', '" + sConfigValue + "','" + sCreate + "','" + sCreateDate + "')";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 系统设置更新
        /// </summary>
        /// <param name="sConfigNO"></param>
        /// <param name="sConfigType"></param>
        /// <param name="sConfigValue"></param>
        /// <param name="sCreate"></param>
        /// <param name="sCreateDate"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateConfig(string sConfigNO, string sConfigType, string sConfigValue)
        {
            string sSql = "Update Config set ConfigType='" + sConfigType + "',ConfigValue='" + sConfigValue + "' where ConfigNO='" + sConfigNO + "' ";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 系统设置删除
        /// </summary>
        /// <param name="sConfigNO"></param>
        /// <param name="sConfigType"></param>
        /// <param name="sConfigValue"></param>
        /// <param name="sCreate"></param>
        /// <param name="sCreateDate"></param>
        /// <returns></returns>
        [WebMethod]
        public bool DeleteConfig(string sConfigNO)
        {
            string sSql = "Delete Config where ConfigNO='" + sConfigNO + "' ";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 系统设置查询
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchConfig(string sql)
        {
            string sSql = "select ConfigType, ConfigValue, ConfigNO from Config where 1=1 " + sql + " ";
            return ExecuteDataSet(sSql, "Config");
        }

        /// <summary>
        /// 保存订单存储路径
        /// </summary>
        /// <param name="sPath">订单存储路径</param>
        /// <returns>True Or False</returns>
        [WebMethod]
        public bool SaveOrderPath(string sPath)
        {
            string sSql = "Insert into OrdersPath (Path,UserName,UserPwd) Values ('" + sPath + "','','')";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 删除订单存储路径
        /// </summary>
        /// <param name="sId">订单存储路径ID</param>
        /// <returns>True Or False</returns>
        [WebMethod]
        public bool DeleteOrderPath(string[] sId)
        {
            string sSql = "";
            for (int i = 0; i < sId.Length; i++)
            {
                sSql += "Delete OrdersPath where ID='" + sId[i] + "' ";
            }
            return ExecuteSql(sSql);

        }

        /// <summary>
        /// 查询订单存储路径
        /// </summary>
        /// <param name="sql">查询条件</param>
        /// <returns>数据集</returns>
        [WebMethod]
        public DataSet SearchOrdersPath(string sql)
        {
            string sSql = "Select ID,Path From OrdersPath where 1=1 " + sql;
            return ExecuteDataSet(sSql, "OrdersPath");
        }
        #endregion

        #region 产品管理

        /// XML读取产品大类信息
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public string GetBackProductTypeXML()
        {
            DataSet myds = new DataSet();
            string str = "";
            string queryString = "select ProductType,ProductTypeName,ParentProductType from ProductType where IsDelete <> 10";
            try
            {
                myds = SqlHelper.ExecuteDataset(SqlHelper.PMS_ConStr, CommandType.Text, queryString);
                if (myds.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; myds.Tables[0].Rows.Count > i; i++)
                    {
                        DataRow row = myds.Tables[0].Rows[i];
                        if (row["ProductTypeName"].ToString() != null)
                        {
                            string str4 = str;
                            str = str4 + "<" + row["ParentProductType"].ToString() + ">";
                            str = str + "<ProductType>" + row["ProductType"].ToString() + "</ProductType>";
                            str = str + "<ProductTypeName>" + row["ProductTypeName"].ToString() + "</ProductTypeName>";
                            str4 = str;
                            str = str4 + "</" + row["ParentProductType"].ToString() + ">";
                        }
                    }
                }
                return ("<ProductType>" + str + "</ProductType>");
            }
            catch (Exception)
            {
                return ("<ProductType>" + str + "</ProductType>");
            }
            finally
            {
                myds.Dispose();
            }
        }
        //[WebMethod]
        //public string GetBackProductTypeXML()
        //{
        //    return PMS_Service.GetProductTypeXML();
        //}

        /// <summary>
        /// 后期产品库
        /// </summary>
        /// <returns></returns>
        public string GetBackProductsXML()
        {
            DataSet myds = new DataSet();
            string str = "";
            string queryString = "select distinct a.ProductNO,a.ProductName,ProductType=(select ParentProductType from ProductType where ProductType=a.ProductType2),a.ProductType2 from Products as a,ProductType as b where a.IsDelete <> 10";
            try
            {
                myds = SqlHelper.ExecuteDataset(SqlHelper.PMS_ConStr, CommandType.Text, queryString);
                if (myds.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; myds.Tables[0].Rows.Count > i; i++)
                    {
                        DataRow row = myds.Tables[0].Rows[i];
                        if (row["ProductName"].ToString() != null)
                        {
                            string str4 = str;
                            str = str4 + "<" + row["ProductType"].ToString() + ">";
                            str = str + "<ProductType>" + row["ProductType2"].ToString() + "</ProductType>";
                            str = str + "<ProductNO>" + row["ProductNO"].ToString() + "</ProductNO>";
                            str = str + "<ProductName>" + row["ProductName"].ToString() + "</ProductName>";
                            str4 = str;
                            str = str4 + "</" + row["ProductType"].ToString() + ">";
                        }
                    }
                }
                return ("<Products>" + str + "</Products>");
            }
            catch (Exception)
            {
                return ("<Products>" + str + "</Products>");
            }
            finally
            {
                myds.Dispose();
            }
        }
        //[WebMethod]
        //public string GetBackProductsXML()
        //{
        //    return PMS_Service.GetProductsXML();
        //}


        /// <summary>
        /// 后期成品库
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchBackProduct(string sql)
        {
            string Sql = "select DISTINCT  pt.ProductTypeName,pa.BackProductTypeNO,pa.BackProductNO,pa.ProductNO, pa.ProductName, pa.Fram, ProductSize=(pa.ProductSizeA + '*' + pa.ProductSizeB), pa.Box, pa.Unit, pa.Page, pa.Paper, pa.film, pa.InsidePage, pa.Biao, pa.Ban, pa.Diao, pa.ProductCostPrice,pa.ProductSellingPrice,pa.ProductDescribe,pa.IsCountNumber, pa.ProductNumber, pa.NoticeNumber,pa.ProductDescribe,'' as ProductImage, pa.[Create], pa.CreateDate, pa.IsDelete FROM  Products_All pa left JOIN ProductType pt ON pa.BackProducttypeNO = pt.ProductType where 1 = 1 " + sql + " order by ProductNO ";
            return SqlHelper.ExecuteDataset(SqlHelper.PMS_ConStr, CommandType.Text, Sql);

            //return PMS_Service.SearchProduct(sql); //webService
        }

        /// <summary>
        /// 增加产品类别
        /// </summary>
        /// <param name="sProductTypeNO"></param>
        /// <param name="sProductTypeName"></param>
        /// <param name="sCreate"></param>
        /// <param name="sCreateDate"></param>
        /// <returns></returns>
        [WebMethod]
        public bool SaveProductType(string sProductTypeNO, string sProductTypeName, string sCreate, string sCreateDate)
        {
            string sSql = "Insert into ProductType (ProductTypeNO,ProductTypeName,[Create],CreateDate) Values ('" + sProductTypeNO + "','" + sProductTypeName + "','" + sCreate + "','" + sCreateDate + "')";
            return ExecuteSql(sSql);
        }
        /// <summary>
        /// 修改产品类别
        /// </summary>
        /// <param name="sProductTypeNO"></param>
        /// <param name="sProductTypeName"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateProductType(string sProductTypeNO, string sProductTypeName)
        {
            string sSql = "Update ProductType set ProductTypeName='" + sProductTypeName + "' where ProductTypeNO='" + sProductTypeNO + "' ";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 查询产品类别
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchProductType()
        {
            string sSql = "select ProductTypeNO, ProductTypeName, [Create], CreateDate from ProductType";
            return ExecuteDataSet(sSql, "ProductType");
        }

        /// <summary>
        /// 增加产品
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public bool SaveProduct(string sProductTypeNO, string sProductNO, string sProductName, string sProductSizeA, string sProductSizeB, string sProductCostPrice, string sProductSellingPrice, string sProductDescribe, string sIsCountNumber, string sProductNumber, string sNoticeNumber, string sUnit, string sCreate, string sCreateDate, string sIsDelete)
        {
            string sSql = "Insert into Products (ProductTypeNO, ProductNO, ProductName, ProductSizeA, ProductSizeB, ProductCostPrice, ProductSellingPrice, ProductDescribe, IsCountNumber, ProductNumber, NoticeNumber, Unit, [Create], CreateDate, IsDelete) values ('" + sProductTypeNO + "', '" + sProductNO + "', '" + sProductName + "', '" + sProductSizeA + "', '" + sProductSizeB + "', '" + sProductCostPrice + "', '" + sProductSellingPrice + "', '" + sProductDescribe + "','" + sIsCountNumber + "', '" + sProductNumber + "', '" + sNoticeNumber + "','" + sUnit + "','" + sCreate + "', '" + sCreateDate + "', '" + sIsDelete + "') ";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 更新产品图片
        /// </summary>
        /// <param name="sProductNO"></param>
        /// <param name="bProductPhoto"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateProductPhoto(string sProductNO, byte[] bProductPhoto)
        {
            try
            {
                OpenConn();
                string strSql = "Update Products set ProductImage=@ProductImage where ProductNO='" + sProductNO + "' ";
                SqlCommand cmd = new SqlCommand(strSql, Conn);
                cmd.Parameters.Add("@ProductImage", SqlDbType.Image);
                cmd.Parameters["@ProductImage"].Value = bProductPhoto;

                int ireturn = cmd.ExecuteNonQuery();
                CloseConn();
                if (ireturn > 0)
                    return true;
                else
                    return false;
            }
            catch { return false; }
        }

        /// <summary>
        /// 修改产品
        /// </summary>
        /// <param name="sProductTypeNO"></param>
        /// <param name="sProductNO"></param>
        /// <param name="sProductName"></param>
        /// <param name="sProductSizeA"></param>
        /// <param name="sProductSizeB"></param>
        /// <param name="sProductSellingPrice"></param>
        /// <param name="sProductDescribe"></param>
        /// <param name="sProductNumber"></param>
        /// <param name="sNoticeNumber"></param>
        /// <param name="sCreate"></param>
        /// <param name="sCreateDate"></param>
        /// <param name="sIsDelete"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateProduct(string sProductTypeNO, string sProductNO, string sProductName, string sProductSizeA, string sProductSizeB, string sProductCostPrice, string sProductSellingPrice, string sProductDescribe, string sIsCountNumber, string sProductNumber, string sNoticeNumber, string sUnit, string sCreate, string sCreateDate, string sIsDelete)
        {
            string sSql = "Update Products set ProductTypeNO='" + sProductTypeNO + "', ProductName='" + sProductName + "', ProductSizeA='" + sProductSizeA + "', ProductSizeB= '" + sProductSizeB + "', ProductCostPrice='" + sProductCostPrice + "', ProductSellingPrice='" + sProductSellingPrice + "', ProductDescribe='" + sProductDescribe + "',Unit='" + sUnit + "',IsCountNumber='" + sIsCountNumber + "', ProductNumber='" + sProductNumber + "', NoticeNumber='" + sNoticeNumber + "',  IsDelete='" + sIsDelete + "' where ProductNO='" + sProductNO + "' ";
            return ExecuteSql(sSql);
        }
        /// <summary>
        /// 产品删除或恢复删除
        /// </summary>
        /// <param name="sProductNO"></param>
        /// <param name="sIsDelete"></param>
        /// <returns></returns>
        [WebMethod]
        public bool IsDeleteProduct(string sProductNO, string sIsDelete)
        {
            string sSql = "Update Products set IsDelete='" + sIsDelete + "' where ProductNO='" + sProductNO + "' ";
            return ExecuteSql(sSql);
        }
        /// <summary>
        /// 产品查询
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchProduct(string sSql)
        {
            DataSet myds = new DataSet();
            try
            {
                OpenConn();
                string Sql = "select Products.ProductSizeA,Products.ProductSizeB,Products.BackProductCostPrice,ProductType.ProductTypeNO,ProductType.ProductTypeName, BackProductTypeNO, BackProductNO, Products.ProductNO, Products.ProductName, ProductSize=(Products.ProductSizeA + '*' + Products.ProductSizeB), Fram, Box, Unit, Page, Paper, film, InsidePage, Biao, Ban, Diao, ProductCostPrice, Products.ProductSellingPrice, Products.ProductDescribe,Products.IsCountNumber, Products.ProductNumber, Products.NoticeNumber, Products.ProductImage, Products.[Create], Products.CreateDate, Products.IsDelete from Products inner join ProductType on Products.ProductTypeNO=ProductType.ProductTypeNO where IsDelete='False' " + sSql;//update by wujianbo 20130203 增加后期成本价格字段
                //update by wujianbo 20130225 增加ProductSizeA与ProductSizeB
                SqlDataAdapter myda = new SqlDataAdapter(Sql, Conn);
                myda.Fill(myds, "Products");
                CloseConn();
                return myds;
            }
            catch
            {
                return myds;
            }
        }
        /// <summary>
        /// 产品名称查询
        /// creater njro
        /// createtime 2012-03-20
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchProductTwo(string sSql)
        {
            DataSet myds = new DataSet();
            try
            {
                OpenConn();
                string Sql = "select  Products.ProductName from Products inner join ProductType on Products.ProductTypeNO=ProductType.ProductTypeNO where IsDelete='False' " + sSql;
                SqlDataAdapter myda = new SqlDataAdapter(Sql, Conn);
                myda.Fill(myds, "Products");
                CloseConn();
                return myds;
            }
            catch
            {
                return myds;
            }
        }
        /// <summary>
        /// 复制后期产品到本地数据库
        /// </summary>
        /// <param name="sProductTypeNO"></param>
        /// <param name="sProductNO"></param>
        /// <param name="sProductName"></param>
        /// <param name="sProductSizeA"></param>
        /// <param name="sProductSizeB"></param>
        /// <param name="sProductSellingPrice"></param>
        /// <param name="sProductDescribe"></param>
        /// <param name="sIsCountNumber"></param>
        /// <param name="sProductNumber"></param>
        /// <param name="sNoticeNumber"></param>
        /// <param name="sProductImage"></param>
        /// <param name="sCreate"></param>
        /// <param name="sCreateDate"></param>
        /// <param name="sIsDelete"></param>
        /// <param name="sFram"></param>
        /// <param name="sBox"></param>
        /// <param name="sUnit"></param>
        /// <param name="sPage"></param>
        /// <param name="sPaper"></param>
        /// <param name="sfilm"></param>
        /// <param name="sInsidePage"></param>
        /// <param name="sBiao"></param>
        /// <param name="sBan"></param>
        /// <param name="sDiao"></param>
        /// <param name="sProductCostPrice"></param>
        /// <param name="sBackProductTypeNO"></param>
        /// <param name="sBackProductNO"></param>
        /// <param name="bReplace"></param>
        /// <returns></returns>
        [WebMethod]
        public bool CopyBackProducts(string[] sProductTypeNO, string[] sProductNO, string[] sProductName, string[] sProductSizeA, string[] sProductSizeB, string[] sProductSellingPrice, string[] sProductDescribe, string[] sIsCountNumber, string[] sProductNumber, string[] sNoticeNumber, string[] sProductImage, string[] sCreate, string[] sCreateDate, string[] sIsDelete, string[] sFram, string[] sBox, string[] sUnit, string[] sPage, string[] sPaper, string[] sfilm, string[] sInsidePage, string[] sBiao, string[] sBan, string[] sDiao, string[] sProductCostPrice, string[] sBackProductTypeNO, string[] sBackProductNO, bool bReplace)
        {
            string sSql = "";
            for (int i = 0; i < sProductNO.Length; i++)
            {
                sSql += "if exists(select ProductNO from Products where ProductNO='" + sProductNO[i] + "') ";
                sSql += "Update Products set ";
                if (bReplace)
                    sSql += "ProductName='" + sProductName[i] + "',";
                sSql += "ProductSizeA='" + sProductSizeA[i] + "', ProductSizeB='" + sProductSizeB[i] + "', ProductImage='" + sProductImage[i] + "', IsDelete='" + sIsDelete[i] + "', Fram='" + sFram[i] + "', Box='" + sBox[i] + "', Unit='" + sUnit[i] + "', Page='" + sPage[i] + "', Paper='" + sPaper[i] + "', film='" + sfilm[i] + "', InsidePage='" + sInsidePage[i] + "', Biao='" + sBiao[i] + "', Ban='" + sBan[i] + "', Diao='" + sDiao[i] + "', ProductCostPrice='" + sProductCostPrice[i] + "', BackProductTypeNO='" + sBackProductTypeNO[i] + "', BackProductNO='" + sBackProductNO[i] + "' where ProductNO='" + sProductNO[i] + "' else Insert into Products (ProductTypeNO, ProductNO, ProductName, ProductSizeA, ProductSizeB, ProductSellingPrice, ProductDescribe, IsCountNumber, ProductNumber, NoticeNumber, ProductImage, [Create], CreateDate, IsDelete, Fram, Box, Unit, Page, Paper, film, InsidePage, Biao, Ban, Diao, ProductCostPrice, BackProductTypeNO, BackProductNO) Values ('" + sProductTypeNO[i] + "', '" + sProductNO[i] + "', '" + sProductName[i] + "', '" + sProductSizeA[i] + "', '" + sProductSizeB[i] + "', '" + sProductSellingPrice[i] + "', '" + sProductDescribe[i] + "', '" + sIsCountNumber[i] + "', '" + sProductNumber[i] + "', '" + sNoticeNumber[i] + "', '" + sProductImage[i] + "', '" + sCreate[i] + "', '" + sCreateDate[i] + "', '" + sIsDelete[i] + "', '" + sFram[i] + "', '" + sBox[i] + "', '" + sUnit[i] + "', '" + sPage[i] + "', '" + sPaper[i] + "', '" + sfilm[i] + "', '" + sInsidePage[i] + "', '" + sBiao[i] + "', '" + sBan[i] + "', '" + sDiao[i] + "', '" + sProductCostPrice[i] + "', '" + sBackProductTypeNO[i] + "', '" + sBackProductNO[i] + "') ";
            }
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 套系类别保存
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public bool SaveSuiteType(string sSuiteTypeNO, string sSuiteTypeName, string sCreate, string sCreateDate)
        {
            string sSql = "Insert into SuiteType (SuiteTypeNO, SuiteTypeName, [Create], CreateDate) values ('" + sSuiteTypeNO + "', '" + sSuiteTypeName + "', '" + sCreate + "', '" + sCreateDate + "')";
            return ExecuteSql(sSql);
        }
        /// <summary>
        /// 套系类别更新
        /// </summary>
        /// <param name="sSuiteTypeNO"></param>
        /// <param name="sSuiteTypeName"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateSuiteType(string sSuiteTypeNO, string sSuiteTypeName)
        {
            string sSql = "Update SuiteType set SuiteTypeName='" + sSuiteTypeName + "' where SuiteTypeNO='" + sSuiteTypeNO + "' ";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 查询套系类别
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchSuiteType()
        {
            string sSql = "Select SuiteTypeNO, SuiteTypeName, [Create], CreateDate From SuiteType";
            return ExecuteDataSet(sSql, "SuiteType");
        }

        /// <summary>
        /// 保存套系
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public bool SaveSuite(string sSuiteTypeNO, string sSuiteNO, string sSuiteName, string sSuitePrice, string sSuiteDescribe, string sCreate, string sCreateDate, string sIsDelete, string sShootService, string sPrinkService, string sLookService, string sShootAddress, string sDressGoods, string sShootOut, string sTodayService)
        {
            string sSql = "Insert into Suite (SuiteTypeNO, SuiteNO, SuiteName, SuitePrice, SuiteDescribe, [Create], CreateDate, IsDelete,ShootService,PrinkService,LookService,ShootAddress,DressGoods,ShootOut,TodayService) values ('" + sSuiteTypeNO + "', '" + sSuiteNO + "', '" + sSuiteName + "', '" + sSuitePrice + "', '" + sSuiteDescribe + "', '" + sCreate + "', '" + sCreateDate + "', '" + sIsDelete + "','" + sShootService + "','" + sPrinkService + "','" + sLookService + "','" + sShootAddress + "','" + sDressGoods + "','" + sShootOut + "','" + sTodayService + "')";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 更改套系
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateSuite(string sSuiteTypeNO, string sSuiteNO, string sSuiteName, string sSuitePrice, string sSuiteDescribe, string sIsDelete, string sShootService, string sPrinkService, string sLookService, string sShootAddress, string sDressGoods, string sShootOut, string sTodayService)
        {
            string sSql = "Update Suite set SuiteTypeNO='" + sSuiteTypeNO + "', SuiteName='" + sSuiteName + "', SuitePrice='" + sSuitePrice + "', SuiteDescribe='" + sSuiteDescribe + "', IsDelete='" + sIsDelete + "',ShootService='" + sShootService + "', PrinkService='" + sPrinkService + "', LookService='" + sLookService + "', ShootAddress='" + sShootAddress + "', DressGoods='" + sDressGoods + "', ShootOut='" + sShootOut + "', TodayService='" + sTodayService + "' where  SuiteNO='" + sSuiteNO + "'";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 套系删除或恢复删除
        /// </summary>
        /// <param name="sSuiteNO"></param>
        /// <param name="sIsDelete"></param>
        /// <returns></returns>
        [WebMethod]
        public bool IsDeleteSuite(string sSuiteNO, string sIsDelete)
        {
            string sSql = "Update Suite set IsDelete='" + sIsDelete + "' where SuiteNO='" + sSuiteNO + "' ";
            return ExecuteSql(sSql);
        }
        /// <summary>
        /// 套系查询
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchSuite(string sSql)
        {
            DataSet myds = new DataSet();
            try
            {
                OpenConn();
                string Sql = "select SuiteType.SuiteTypeNO,SuiteType.SuiteTypeName, Suite.SuiteNO, Suite.SuiteName, Suite.SuitePrice, Suite.SuiteDescribe, Suite.[Create], Suite.CreateDate, Suite.IsDelete,Suite.[ShootService],Suite.[PrinkService],Suite.[LookService] ,Suite.[ShootAddress] ,Suite.[DressGoods] ,Suite.[ShootOut] ,Suite.[TodayService] from Suite inner join SuiteType on Suite.SuiteTypeNO=SuiteType.SuiteTypeNO where 1=1 " + sSql + "order by IsDelete";
                SqlDataAdapter myda = new SqlDataAdapter(Sql, Conn);
                myda.Fill(myds, "Suite");
                CloseConn();
                return myds;
            }
            catch
            {
                return myds;
            }
        }

        /// <summary>
        /// 保存套系产品
        /// </summary>
        /// <param name="sSuiteNO"></param>
        /// <param name="sProductNO"></param>
        /// <param name="sProductName"></param>
        /// <param name="sImageNumber"></param>
        /// <param name="sProductNumber"></param>
        /// <param name="sProductSellingPrice"></param>
        /// <param name="sCreate"></param>
        /// <param name="sCreateDate"></param>
        /// <returns></returns>
        [WebMethod]
        public bool SaveSuiteProduct(string sSuiteNO, string[] sProductNO, string[] sPageQuantity, string[] sNegativeQuantity, string[] sProductQuantity, string[] sProductSellingPrice, string sCreate, string sCreateDate)
        {
            if (!DeleteSuiteProduct(sSuiteNO))
                return false;

            string sSql = "";
            for (int i = 0; i < sProductNO.Length; i++)
            {
                sSql += "Insert into SuiteProduct (SuiteNO, ProductNO, PageQuantity, NegativeQuantity, ProductQuantity, ProductSellingPrice, [Create], CreateDate) Values ('" + sSuiteNO + "', '" + sProductNO[i] + "', '" + sPageQuantity[i] + "', '" + sNegativeQuantity[i] + "', '" + sProductQuantity[i] + "', '" + sProductSellingPrice[i] + "', '" + sCreate + "', '" + sCreateDate + "')";

            }
            return ExecuteSql(sSql);
        }
        /// <summary>
        /// 删除套系产品
        /// </summary>
        /// <param name="sSuiteNO"></param>
        /// <returns></returns>
        [WebMethod]
        public bool DeleteSuiteProduct(string sSuiteNO)
        {
            string sSql = "";
            sSql = "Delete SuiteProduct where SuiteNO='" + sSuiteNO + "' ";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 查询套系产品
        /// </summary>
        /// <param name="sSuiteNO"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchSuiteProducts(string sSuiteNO)
        {
            string sSql = "select SuiteNO, ProductTypeName, ProductNO, ProductName, ProductSizeA, ProductSizeB, Fram, Box, Unit, Page, Paper, film, InsidePage, Biao, Ban, Diao, PageQuantity,NegativeQuantity, ProductQuantity, ProductSellingPrice, ProductCostPrice, [Create], CreateDate,backProductTypeNO,backProductNO from dbo.V_SearchSuiteProduct where SuiteNO='" + sSuiteNO + "'";//update by wujianbo 20130125 添加backProductTypeNO、backProductNO两个字段
            return ExecuteDataSet(sSql, "V_SearchSuiteProduct");
        }

        /// <summary>
        /// 查询套系产品
        /// </summary>
        /// <param name="sSuiteNO"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchTopOneProducts(string sSuiteNO)
        {
            string sSql = "select top 1 SuiteNO, ProductTypeName, ProductNO, ProductName, ProductSizeA, ProductSizeB, Fram, Box, Unit, Page, Paper, film, InsidePage, Biao, Ban, Diao, PageQuantity,NegativeQuantity, ProductQuantity, ProductSellingPrice, [Create], CreateDate from dbo.V_SearchSuiteProduct ";
            return ExecuteDataSet(sSql, "V_SearchSuiteProduct");
        }
        #endregion

        #region 短信管理

        /// <summary>
        /// 注册短信平台
        /// </summary>
        /// <param name="sSN"></param>
        /// <param name="sPWD"></param>
        /// <param name="sEntName"></param>
        /// <param name="sLinkMan"></param>
        /// <param name="sPhone"></param>
        /// <param name="sMobile"></param>
        /// <param name="sEmail"></param>
        /// <param name="sFax"></param>
        /// <param name="sAddress"></param>
        /// <param name="sPostcode"></param>
        /// <returns></returns>
        [WebMethod]
        public bool SMS_Register(string sSN, string sPWD, string sEntName, string sLinkMan, string sPhone, string sMobile, string sEmail, string sFax, string sAddress, string sPostcode)
        {
            string sSql = "insert into SMSPlatform (SN,PWD,EntName,LinkMan,Phone,Mobile,Email,Fax,Address,Postcode,SMSDefault) Values ('" + sSN + "', '" + sPWD + "', '" + sEntName + "', '" + sLinkMan + "', '" + sPhone + "', '" + sMobile + "', '" + sEmail + "', '" + sFax + "', '" + sAddress + "', '" + sPostcode + "',0)";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 设置当前序列号为默认短信平台
        /// </summary>
        /// <param name="sSN"></param>
        /// <returns></returns>
        [WebMethod]
        public bool SMS_Default(string sSN)
        {
            string sSql = "Update SMSPlatform set SMSDefault=0 ";
            sSql += "Update SMSPlatform set SMSDefault=1 where SN='" + sSN + "' ";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 获取当前默认短信平台序列号信息
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchSMSPlatform()
        {
            string sSql = "select SN,PWD,EntName,LinkMan,Phone,Mobile,Email,Fax,Address,Postcode from SMSPlatform where SMSDefault=1";
            return ExecuteDataSet(sSql, "SMSPlatform");
        }

        /// <summary>
        /// 修改短信平台序列号密码
        /// </summary>
        /// <param name="sSN"></param>
        /// <param name="sPWD"></param>
        /// <returns></returns>
        [WebMethod]
        public bool ChangeSMSPassowrd(string sSN, string sPWD)
        {
            string sSql = "Update SMSPlatform set PWD='" + sPWD + "' where SN='" + sSN + "' ";
            return ExecuteSql(sSql);
        }

        /// <summary>                                  
        /// 短信类别增加                                 
        /// </summary>                                  
        /// <param name="sSendType"></param>             
        /// <param name="sSendContent"></param>            
        /// <returns></returns>                        
        [WebMethod]
        public bool SaveSmsSendType(string sSendType, string sSendContent)
        {
            string sSql = "Insert into SmsSendType (SendType, SendContent) values ('" + sSendType + "','" + sSendContent + "')";
            return ExecuteSql(sSql);
        }
        /// <summary>
        /// 短信类别修改
        /// </summary>
        /// <param name="sSendType"></param>
        /// <param name="sSendContent"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateSmsSendType(string sID, string sSendType, string sSendContent)
        {
            string sSql = "Update SmsSendType set SendType='" + sSendType + "', SendContent='" + sSendContent + "' where ID='" + sID + "'";
            return ExecuteSql(sSql);
        }
        /// <summary>
        /// 短信类别删除
        /// </summary>
        /// <param name="sSendType"></param>
        /// <param name="sSendContent"></param>
        /// <returns></returns>
        [WebMethod]
        public bool DeleteSmsSendType(string sID)
        {
            string sSql = "Delete SmsSendType where ID='" + sID + "'";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 查询短信类别
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchSmsSendType()
        {
            string sSql = "select [ID], SendType, SendContent from SmsSendType";
            return ExecuteDataSet(sSql, "SearchSmsSendType");
        }

        /// <summary>
        /// 将需要发送的短信提交到服务器
        /// </summary>
        /// <param name="sCustomerNO"></param>
        /// <param name="sPhoneNOa"></param>
        /// <param name="sPhoneNOb"></param>
        /// <param name="sSendState"></param>
        /// <param name="sSendType"></param>
        /// <param name="sSendContent"></param>
        /// <param name="sSendEmployee"></param>
        /// <param name="sSendDate"></param>
        /// <returns></returns>
        [WebMethod]
        public bool SendShortMessage(string[] sCustomerNO, string sPhoneNOa, string[] sPhoneNOb, string sSendState, string sSendType, string sSendContent, string sSendEmployee, string sSendDate)
        {
            string sSql = "";
            for (int i = 0; i < sCustomerNO.Length; i++)
            {
                sSql += "insert into SMS (CustomerNO, PhoneNOa, SendType, SendContent, PhoneNOb, SendState, OpDepartmentNO, OpEmployeeNO, OpDate) values ('" + sCustomerNO[i] + "','" + sPhoneNOa + "','" + sSendType + "','" + sSendContent + "','" + sPhoneNOb[i] + "','" + sSendState + "','','" + sSendEmployee + "','" + sSendDate + "') ";
            }
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 查询提交的短信
        /// </summary>
        /// <param name="sSql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchSMS(string sSql)
        {
            DataSet myds = new DataSet();
            try
            {
                OpenConn();
                string Sql = "select ID, CustomerNO, PhoneNOa, SendType, SendContent, PhoneNOb, SendState, OpEmployeeNO, OpDate From SMS where 1=1 " + sSql;
                SqlDataAdapter myda = new SqlDataAdapter(Sql, Conn);
                myda.Fill(myds, "SMS");
                CloseConn();
                return myds;
            }
            catch
            {
                return myds;
            }

        }

        /// <summary>
        /// 重新发送短信
        /// </summary>
        /// <param name="sID"></param>
        /// <param name="sSendState"></param>
        /// <returns></returns>
        [WebMethod]
        public bool ReSendSms(string[] sID, string[] sSendState)
        {
            string sSql = "";
            for (int i = 0; i < sID.Length; i++)
            {
                sSql += "Update SMS Set SendState='" + sSendState[i] + "' where ID='" + sID[i] + "' ";
            }
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 删除发送短信
        /// </summary>
        /// <param name="sID"></param>
        /// <returns></returns>
        [WebMethod]
        public bool DeleteSendSms(string[] sID)
        {
            string sSql = "";
            for (int i = 0; i < sID.Length; i++)
            {
                sSql += "Delete SMS where ID='" + sID[i] + "' ";
            }
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 清除发送完成的短信
        /// </summary>
        /// <param name="sID"></param>
        /// <returns></returns>
        [WebMethod]
        public bool ClearSendSms()
        {
            string sSql;
            sSql = "Delete SMS where SendState='发送成功' ";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 保存短信自动群发设置
        /// </summary>
        /// <param name="AutoSendType"></param>
        /// <param name="SendDate"></param>
        /// <param name="SendType"></param>
        /// <param name="InCustomer"></param>
        /// <param name="Confirm"></param>
        /// <returns></returns>
        [WebMethod]
        public bool SaveSMSAutoSend(string[] AutoSendType, string[] SendDate, string[] SendType, string[] InCustomer, string[] Confirm)
        {
            string sSql = "";
            for (int i = 0; i < AutoSendType.Length; i++)
            {
                sSql += "if exists (select AutoSendType from SMSAutoSend where AutoSendType='" + AutoSendType[i] + "') update SMSAutoSend set SendDate='" + SendDate[i] + "', SendType='" + SendType[i] + "', InCustomer='" + InCustomer[i] + "', Confirm='" + Confirm[i] + "' where AutoSendType='" + AutoSendType[i] + "' else Insert into SMSAutoSend (AutoSendType, SendDate, SendType, InCustomer, Confirm) values ('" + AutoSendType[i] + "', '" + SendDate[i] + "', '" + SendType[i] + "', '" + InCustomer[i] + "', '" + Confirm[i] + "') ";
            }
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 查询短信自动群发设置
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchSMSAutoSend(string sql)
        {
            string sSql = "select AutoSendType, SendDate, SendType, InCustomer, Confirm from SMSAutoSend where 1=1 " + sql;
            return ExecuteDataSet(sSql, "SMSAutoSend");
        }
        #endregion

        #region 活动管理
        /// <summary>
        /// 添加活动
        /// </summary>
        /// <param name="ItemTypeNO"></param>
        /// <param name="sItemName"></param>
        /// <param name="sItemContent"></param>
        /// <param name="sItemIsEnable"></param>
        /// <param name="sItemDate"></param>
        /// <param name="sEnableDays"></param>
        /// <param name="sCreateDepartment"></param>
        /// <param name="sCreate"></param>
        /// <param name="sCreateDate"></param>
        /// <returns></returns>
        [WebMethod]
        public bool SaveItem(string sItemTypeNO, string sItemName, string sItemContent, string sItemIsEnable, string sItemDate, string sEnableDays, string sCreateDepartment, string sCreate, string sCreateDate)
        {
            string sSql = "Insert into Item (ItemTypeNO, ItemName, ItemContent, ItemIsEnable, ItemDate, EnableDays, CreateDepartment, [Create], CreateDate) values ('" + sItemTypeNO + "', '" + sItemName + "', '" + sItemContent + "', '" + sItemIsEnable + "', '" + sItemDate + "', '" + sEnableDays + "', '" + sCreateDepartment + "', '" + sCreate + "', '" + sCreateDate + "') ";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 更新活动
        /// </summary>
        /// <param name="sID"></param>
        /// <param name="ItemTypeNO"></param>
        /// <param name="sItemName"></param>
        /// <param name="sItemContent"></param>
        /// <param name="sItemIsEnable"></param>
        /// <param name="sItemDate"></param>
        /// <param name="sEnableDays"></param>
        /// <param name="sCreateDepartment"></param>
        /// <param name="sCreate"></param>
        /// <param name="sCreateDate"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateItem(string sID, string sItemTypeNO, string sItemName, string sItemContent, string sItemIsEnable, string sItemDate, string sEnableDays)
        {
            string sSql = "Update Item set ItemTypeNO='" + sItemTypeNO + "', ItemName='" + sItemName + "', ItemContent='" + sItemContent + "', ItemIsEnable='" + sItemIsEnable + "', ItemDate='" + sItemDate + "', EnableDays='" + sEnableDays + "' where ID='" + sID + "' ";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 删除活动
        /// </summary>
        /// <param name="sID"></param>
        /// <returns></returns>
        [WebMethod]
        public bool DeleteItem(string sID)
        {
            string sSql = "Delete Item where ID='" + sID + "' ";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 查询活动
        /// </summary>
        /// <param name="sSql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchItem(string sSql)
        {
            DataSet myds = new DataSet();
            try
            {
                OpenConn();
                string Sql = "select Item.ID, ItemType.ItemTypeName, Item.ItemName, Item.ItemContent, Item.ItemIsEnable, Item.ItemDate, Item.EnableDays, Item.CreateDepartment, Item.[Create], Item.CreateDate from Item Inner join ItemType on Item.ItemTypeNO=ItemType.ItemTypeNO where 1=1 " + sSql;
                SqlDataAdapter myda = new SqlDataAdapter(Sql, Conn);
                myda.Fill(myds, "Item");
                CloseConn();
                return myds;
            }
            catch
            {
                return myds;
            }

        }

        /// <summary>
        /// 显示活动标题
        /// </summary>
        /// <param name="sSql"></param>
        /// <returns></returns>
        [WebMethod]
        public string[] SearchItemName(string sql)
        {
            string sSql = "select Item.ItemName from Item Inner join ItemType on Item.ItemTypeNO=ItemType.ItemTypeNO where 1=1 " + sql;
            DataSet myds = ExecuteDataSet(sSql, "Item");
            string[] ItemsName = new string[myds.Tables[0].Rows.Count];
            for (int i = 0; i < myds.Tables[0].Rows.Count; i++)
            {
                ItemsName[i] = myds.Tables[0].Rows[i]["ItemName"].ToString();
            }
            return ItemsName;
        }


        /// <summary>
        /// 添加活动类别
        /// </summary>
        /// <param name="sItemTypeNO"></param>
        /// <param name="sItemTypeName"></param>
        /// <param name="sCreate"></param>
        /// <param name="sCreateDate"></param>
        /// <returns></returns>
        [WebMethod]
        public bool SaveItemType(string sItemTypeNO, string sItemTypeName, string sCreate, string sCreateDate)
        {
            string sSql = "Insert into ItemType (ItemTypeNO, ItemTypeName, [Create], CreateDate) Values ('" + sItemTypeNO + "', '" + sItemTypeName + "', '" + sCreate + "', '" + sCreateDate + "')";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 更新活动类别
        /// </summary>
        /// <param name="sItemTypeNO"></param>
        /// <param name="sItemTypeName"></param>
        /// <param name="sCreate"></param>
        /// <param name="sCreateDate"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateItemType(string sItemTypeNO, string sItemTypeName)
        {
            string sSql = "Update ItemType set ItemTypeName='" + sItemTypeName + "' where ItemTypeNO='" + sItemTypeNO + "' ";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 删除活动类别
        /// </summary>
        /// <param name="sItemTypeNO"></param>
        /// <param name="sItemTypeName"></param>
        /// <param name="sCreate"></param>
        /// <param name="sCreateDate"></param>
        /// <returns></returns>
        [WebMethod]
        public bool DeleteItemType(string sItemTypeNO)
        {
            string sSql = "Delete ItemType where ItemTypeNO='" + sItemTypeNO + "' ";
            return ExecuteSql(sSql);
        }
        #endregion

        #region 一卡通管理
        /// <summary>
        /// 批量添加卡号
        /// </summary>
        /// <param name="sCardTypeNO"></param>
        /// <param name="sCardNO"></param>
        /// <param name="sEnableDate"></param>
        /// <param name="sCreate"></param>
        /// <param name="sCreateDate"></param>
        /// <returns></returns>
        [WebMethod]
        public bool SaveCard(string sCardTypeNO, string[] sCardNO, string sEnableDate, string sCreate, string sCreateDate)
        {
            string sSql = "";
            for (int i = 0; i < sCardNO.Length; i++)
            {
                sSql += "Insert into CardManage (CardTypeNO, CardNO, EnableDate, [Create], CreateDate) values ('" + sCardTypeNO + "', '" + sCardNO[i] + "', '" + sEnableDate + "', '" + sCreate + "', '" + sCreateDate + "') ";
            }
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 批量删除卡号
        /// </summary>
        /// <param name="sCardNO"></param>
        /// <returns></returns>
        [WebMethod]
        public bool DeleteCard(string[] sCardNO)
        {
            string sSql = "";
            for (int i = 0; i < sCardNO.Length; i++)
            {
                sSql += "delete CardManage where CardNO= '" + sCardNO[i] + "' ";
            }
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 查询会员卡
        /// </summary>
        /// <param name="sSql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchCard(string sql)
        {
            string sSql = "select CardManage.[ID] ,CardManage.CardTypeNO, Config.ConfigValue as CardType, CardManage.CardNO, IsUse=case CardManage.IsUse when 0 then '未使用' when 1 then '已使用' end, CardManage.EnableDate, CardManage.[Create], CardManage.CreateDate from CardManage inner join Config on CardManage.CardTypeNO=Config.ConfigNO where 1=1 " + sql;
            return ExecuteDataSet(sSql, "CardManage");
        }

        //发卡
        [WebMethod]
        public bool UseCardNO(string sCardNO)
        {
            string sSql = "Update CardManage set IsUse=1 where CardNO='" + sCardNO + "'";
            return ExecuteSql(sSql);
        }
        #endregion

        #region 流程要素管理
        /// <summary>
        /// 保存流程控制要素
        /// </summary>
        /// <param name="sElementType"></param>
        /// <param name="sElementNO"></param>
        /// <param name="sElementName"></param>
        /// <param name="sCreate"></param>
        /// <param name="CreateDate"></param>
        /// <returns></returns>
        [WebMethod]
        public bool SaveElement(string sElementType, string[] sElementNO, string[] sElementName, string sCreate, string sCreateDate)
        {
            if (!DeleteElement(sElementType))
                return false;
            string sSql = "";
            for (int i = 0; i < sElementNO.Length; i++)
            {
                sSql += "Insert into Element (ElementType, ElementNO, ElementName, [Create], CreateDate) values ('" + sElementType + "', '" + sElementNO[i] + "', '" + sElementName[i] + "', '" + sCreate + "', '" + sCreateDate + "')";
            }
            return ExecuteSql(sSql);
        }

        public bool DeleteElement(string sElementType)
        {
            string sSql = "Delete Element where ElementType='" + sElementType + "' ";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 保存流程日期控制
        /// </summary>
        /// <param name="sElementID"></param>
        /// <param name="sSubDate_Title"></param>
        /// <param name="sSubDate_Date1"></param>
        /// <param name="sSubDate_Date2"></param>
        /// <param name="sCreate"></param>
        /// <param name="sCreateDate"></param>
        /// <returns></returns>
        [WebMethod]
        public bool SaveElementSubDate(string sElementID, string sSubDate_Title, string sSubDate_Date1, string sSubDate_Date2, string sCreate, string sCreateDate)
        {
            string sSql = "Insert into Element_SubDate (ElementID, SubDate_Title, SubDate_Date1, SubDate_Date2, [Create], CreateDate) Values ('" + sElementID + "', '" + sSubDate_Title + "', '" + sSubDate_Date1 + "', '" + sSubDate_Date2 + "', '" + sCreate + "', '" + sCreateDate + "')";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 更新流程日期控制
        /// </summary>
        /// <param name="sSubDateID"></param>
        /// <param name="sSubDate_Title"></param>
        /// <param name="sSubDate_Date1"></param>
        /// <param name="sSubDate_Date2"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateElementSubDate(string sSubDateID, string sSubDate_Title, string sSubDate_Date1, string sSubDate_Date2)
        {
            string sSql = "Update Element_SubDate set SubDate_Title='" + sSubDate_Title + "', SubDate_Date1='" + sSubDate_Date1 + "', SubDate_Date2='" + sSubDate_Date2 + "' where ID='" + sSubDateID + "' ";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 保存流程时间控制
        /// </summary>
        /// <param name="sSubDateID"></param>
        /// <param name="sSubTime_Time"></param>
        /// <param name="sSubTime_Number"></param>
        /// <param name="sSubTime_Location"></param>
        /// <param name="sCreate"></param>
        /// <param name="sCreateDate"></param>
        /// <returns></returns>
        [WebMethod]
        public bool SaveElementSubTime(string sSubDateID, string sSubTime_Time, string sSubTime_Number, string sSubTime_Location, string sCreate, string sCreateDate)
        {
            string sSql = "Insert into Element_SubTime (SubDateID, SubTime_Time, SubTime_Number, SubTime_Location, [Create], CreateDate) Values ('" + sSubDateID + "','" + sSubTime_Time + "', '" + sSubTime_Number + "', '" + sSubTime_Location + "', '" + sCreate + "', '" + sCreateDate + "')";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 更新流程时间控制
        /// </summary>
        /// <param name="sSubTimeID"></param>
        /// <param name="sSubTime_Time"></param>
        /// <param name="sSubTime_Number"></param>
        /// <param name="sSubTime_Location"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateElementSubTime(string sSubTimeID, string sSubTime_Time, string sSubTime_Number, string sSubTime_Location)
        {
            string sSql = "Update Element_SubTime set SubTime_Time='" + sSubTime_Time + "', SubTime_Number='" + sSubTime_Number + "', SubTime_Location='" + sSubTime_Location + "' where ID='" + sSubTimeID + "' ";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 复制流程时间控制
        /// </summary>
        /// <param name="sSubDateID1">源ID</param>
        /// <param name="sSubDateID2">目标ID</param>
        /// <param name="sCreate"></param>
        /// <param name="sCreateDate"></param>
        /// <returns></returns>
        [WebMethod]
        public bool CopyElementSubTime(string sSubDateID1, string sSubDateID2, string sCreate, string sCreateDate)
        {
            string sSql = "select SubDateID, SubTime_Time, SubTime_Number, SubTime_Location, [Create], CreateDate from  Element_SubTime where SubDateID='" + sSubDateID1 + "' ";
            DataRow[] dr = ExecuteDataSet(sSql, "Temp").Tables[0].Select();
            sSql = "delete Element_SubTime where SubDateID='" + sSubDateID2 + "' ";
            for (int i = 0; i < dr.Length; i++)
            {
                sSql += "Insert into Element_SubTime (SubDateID, SubTime_Time, SubTime_Number, SubTime_Location, [Create], CreateDate) Values ('" + sSubDateID2 + "','" + dr[i]["SubTime_Time"].ToString() + "', '" + dr[i]["SubTime_Number"].ToString() + "', '" + dr[i]["SubTime_Location"].ToString() + "', '" + sCreate + "', '" + sCreateDate + "')";
            }
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 查询系统要素
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchElement()
        {
            //string sSql = "select e.ID,ElementType, ElementNO, d.DepartmentName, e.[Create], e.CreateDate from Element e left join Department d on e.ElementNO = d.DepartmentNO";
            string sSql = "select e.ID,ElementType,ElementNO,(case ElementNO when 'G' then '集团总部结构图' else d.DepartmentName end) as ElementName, e.[Create], e.CreateDate from Element e left join Department d on e.ElementNO = d.DepartmentNO";
            return ExecuteDataSet(sSql, "Element");
        }

        /// <summary>
        /// 查询系统要素
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchElements(string sql)//add by wujianbo 20111005
        {
            string sSql = "select ID,ElementType, ElementNO, ElementName, [Create], CreateDate from Element where 1=1 " + sql;
            return ExecuteDataSet(sSql, "Element");
        }
        #endregion

        #region 公司注册信息
        /// <summary>
        /// 设置文件共享路径与备份路径
        /// </summary>
        /// <param name="sCompanyBM"></param>
        /// <param name="sSharePath"></param>
        /// <param name="sBackupPath"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdatePath(string sCompanyBM, string sSharePath, string sBackupPath)
        {
            string sSql = "Update CompanyRegisterInformation Set SharePath='" + sSharePath + "',BackupPath='" + sBackupPath + "' where CompanyBM='" + sCompanyBM + "' ";
            return ExecuteSql(sSql);
        }
        #endregion

        #region 导卡

        /// <summary>
        /// 保存订单共享路径与备份路径
        /// </summary>
        /// <param name="sSharePath"></param>
        /// <param name="sBackupPath"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateOrderImagePath(string sOrderNO, string sSharePath, string sBackupPath)
        {
            string sSql = "";
            if (sBackupPath.Trim() == "")
                sSql = "Update Orders set ImagePath='" + sSharePath + "' where OrderNO='" + sOrderNO + "' ";
            else
                sSql = "Update Orders set ImagePath='" + sSharePath + "',BackupPath='" + sBackupPath + "' where OrderNO='" + sOrderNO + "' ";
            return ExecuteSql(sSql);
        }
        /// <summary>
        /// 查询业务部门
        /// creater njro
        /// createtime 2012-03-21
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchBusinessDepartment()//add by wujianbo 20111005
        {
            string sSql = @"select BusinessDepartment from CashSub where 1=1 
group by BusinessDepartment";
            return ExecuteDataSet(sSql, "SearchBusinessDepartment");
        }
        /// <summary>
        /// 查询业务人员
        /// creater njro
        /// createtime 2012-03-21
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchBusinessEmployeeNO(string sql)//add by wujianbo 20111005
        {
            string sSql = @"select BusinessEmployeeNO from CashSub where 1=1" + sql + @"
group by BusinessEmployeeNO";
            return ExecuteDataSet(sSql, "SearchBusinessEmployeeNO");
        }
        /// <summary>
        /// 保存订单照片
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sFiles"></param>
        /// <param name="sCreate"></param>
        /// <param name="sCreateDate"></param>
        /// <returns></returns>
        [WebMethod]
        public bool SaveOrderImageFiles(string sOrderNO, string[] sFiles, string sCreate, string sCreateDate)
        {
            string sSql = "";
            for (int i = 0; i < sFiles.Length; i++)
            {
                sSql += "Insert into OrderFiles (OrderNO,SelectType,FileName,CreateDepartmentNO,[Create],CreateDate) Values ('" + sOrderNO + "','未选','" + sFiles[i] + "','','" + sCreate + "','" + sCreateDate + "') ";
            }
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 保存(更新)订单照片
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sFiles"></param>
        /// <param name="sCreate"></param>
        /// <param name="sCreateDate"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateOrderImageFiles(string sOrderNO, string[] sFiles, string sDesign, string sCreate, string sCreateDate)
        {
            string sSql = "";
            for (int i = 0; i < sFiles.Length; i++)
            {
                sSql += "if not exists(select OrderNO from OrderFiles where OrderNO='" + sOrderNO + "' and FileName='" + sFiles[i] + "') Insert into OrderFiles (OrderNO,SelectType,FileName,Design,CreateDepartmentNO,[Create],CreateDate) Values ('" + sOrderNO + "','未选','" + sFiles[i] + "','" + sDesign + "','','" + sCreate + "','" + sCreateDate + "') else Update OrderFiles set Design='" + sDesign + "' where OrderNO='" + sOrderNO + "' and FileName='" + sFiles[i] + "' ";
            }
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 查询订单照片
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchOrderImageFiles(string sOrderNO)
        {
            string sSql = "select* from OrderFiles where OrderNO='" + sOrderNO + "' ";
            return ExecuteDataSet(sSql, "OrderFiles");
        }

        /// <summary>
        /// 删除订单单张照片
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sFiles"></param>
        /// <returns></returns>
        [WebMethod]
        public bool DeleteOrderImageFiles(string sOrderNO, string sFiles)
        {
            string sSql = "Delete from OrderFiles where OrderNO='" + sOrderNO + "' and FileName='" + sFiles + "' ";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 删除订单所有文件
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <returns></returns>
        [WebMethod]
        public bool DeleteOrderImageAllFiles(string sOrderNO)
        {
            string sSql = "Delete from OrderFiles where OrderNO='" + sOrderNO + "' ";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 获取所有共享路径
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public DataSet GetPath()
        {
            string sSql = "select * from OrdersPath ";
            return ExecuteDataSet(sSql, "OrdersPath");
        }

        /// <summary>
        /// 获取所有共享路径
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public DataSet GetPathS(string sql)
        {
            string sSql = "select * from OrdersPath  where 1=1" + sql;
            return ExecuteDataSet(sSql, "OrdersPath");
        }
        #endregion

        #region 看样
        /// <summary>
        /// 下载看样图片文件
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <returns></returns>
        //[WebMethod]
        //public string DownloadOrderImage(string sOrderNo)
        //{
        //    string str = "";
        //    string queryString = "SELECT dbo.OrderFiles.OrderNO, dbo.OrderFiles.SelectType, dbo.OrderFiles.[FileName],dbo.OrderFiles.PNumber, dbo.OrderFiles.[Create], dbo.OrderFiles.CreateDate,COUNT(dbo.ImageAnnotate.[FileName]) AS AnnotateCount,COUNT(dbo.ImageCut.[FileName]) AS CutCount FROM dbo.OrderFiles LEFT OUTER JOIN dbo.ImageCut ON dbo.OrderFiles.OrderNO = dbo.ImageCut.OrderNO AND dbo.OrderFiles.[FileName] = dbo.ImageCut.[FileName] LEFT OUTER JOIN dbo.ImageAnnotate ON dbo.OrderFiles.OrderNO = dbo.ImageAnnotate.OrderNO AND dbo.OrderFiles.[FileName] = dbo.ImageAnnotate.[FileName] where OrderFiles.OrderNO='" + sOrderNo + "' GROUP BY dbo.ImageCut.[FileName], dbo.OrderFiles.OrderNO, dbo.OrderFiles.SelectType, dbo.OrderFiles.[FileName], dbo.OrderFiles.PNumber, dbo.OrderFiles.[Create], dbo.OrderFiles.CreateDate ";
        //    OpenConn();
        //    try
        //    {
        //        DataSet myds = new DataSet();
        //        SqlDataAdapter myda = new SqlDataAdapter(queryString, Conn);
        //        myda.Fill(myds, "OrderFiles");
        //        if (myds.Tables[0].Rows.Count > 0)
        //        {
        //            for (int i = 0; myds.Tables[0].Rows.Count > i; i++)
        //            {
        //                DataRow row = myds.Tables[0].Rows[i];
        //                if (row["FileName"].ToString() != null)
        //                {
        //                    string str4 = str;
        //                    str = str4 + "<" + row["OrderNO"].ToString() + ">";
        //                    str = str + "<OrderNO>" + row["OrderNO"].ToString() + "</OrderNO>";
        //                    str = str + "<SelectType>" + row["SelectType"].ToString() + "</SelectType>";
        //                    str = str + "<FileName>" + row["FileName"].ToString() + "</FileName>";
        //                    str = str + "<PNumber>" + row["PNumber"].ToString() + "</PNumber>";
        //                    str = str + "<Create>" + row["Create"].ToString() + "</Create>";
        //                    str = str + "<CreateDate>" + row["CreateDate"].ToString() + "</CreateDate>";
        //                    str = str + "<AnnotateCount>" + row["AnnotateCount"].ToString() + "</AnnotateCount>";
        //                    str = str + "<CutCount>" + row["CutCount"].ToString() + "</CutCount>";
        //                    str4 = str;
        //                    str = str4 + "</" + row["OrderNO"].ToString() + ">";
        //                }
        //            }
        //        }
        //        CloseConn();
        //        return ("<OrderFiles>" + str + "</OrderFiles>");
        //    }
        //    catch (Exception)
        //    {
        //        CloseConn();
        //        return ("<OrderFiles>" + str + "</OrderFiles>");
        //    }
        //}

        /// <summary>
        /// 保存订单产品备注
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sOrderIndex"></param>
        /// <param name="sSeparateNO"></param>
        /// <param name="sProductNO"></param>
        /// <param name="sProductMemory"></param>
        /// <returns></returns>
        [WebMethod]
        public bool SaveOrderProductMemroy(string sOrderNO, string sOrderIndex, string sSeparateNO, string sProductNO, string sProductMemory)
        {
            string sSql = "";
            sSql = "Update OrderProducts set ProductMemory='" + sProductMemory + "' where OrderNO='" + sOrderNO + "' and ParentProductNO='" + sOrderIndex + "' and SeparateNO='" + sSeparateNO + "' and ProductNO like '" + sProductNO + "%' ";
            return ExecuteSql(sSql);
        }
        public bool SaveOrderProductElement(string OrderNO, string OrderIndex, string ProductElement)
        {
            string strSql = "update OrderProducts set ProductElement='" + ProductElement + "' where OrderNO='" + OrderNO + "' and OrderIndex='" + OrderIndex + "'";
            return ExecuteSql(strSql);
        }

        /// <summary>
        /// 更新订单产品表中的产品生产要素（从产品库读取）
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sProductNO"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateOrderProductsElement(string sOrderNO, string[] sProductNO)
        {
            string sSql = "";
            for (int i = 0; i < sProductNO.Length; i++)
            {
                sSql += "update OrderProducts set OrderProducts.Fram=Products.Fram, OrderProducts.Box=Products.Box, OrderProducts.Unit=Products.Unit, OrderProducts.Paper=Products.Paper, OrderProducts.film=Products.film, OrderProducts.InsidePage=Products.InsidePage, OrderProducts.Biao=Products.Biao, OrderProducts.Ban=Products.Ban, OrderProducts.Diao=Products.Diao from Products where OrderProducts.ProductNO=Products.ProductNO and OrderProducts.OrderNO='" + sOrderNO + "' and OrderProducts.ProductNO='" + sProductNO[i] + "' ";
            }
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 修改产品的框条型号
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sOrderIndex"></param>
        /// <param name="sSeparateNO"></param>
        /// <param name="sProductNO"></param>
        /// <param name="sFram"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateOrderProductFram(string sOrderNO, string sOrderIndex, string sSeparateNO, string sProductNO, string sFram)
        {
            string sSql = "declare @sFram as varchar(50) " +
            "if '" + sFram + "'='' " +
            "select @sFram=[Fram] from Products where [ProductNO]='" + sProductNO + "' " +
            "else " +
            "select @sFram='" + sFram + "' " +
            "Update OrderProducts set Fram=@sFram where OrderNO='" + sOrderNO + "' and OrderIndex='" + sOrderIndex + "' and SeparateNO='" + sSeparateNO + "' and ProductNO='" + sProductNO + "' ";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 修改产品的相纸
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sOrderIndex"></param>
        /// <param name="sSeparateNO"></param>
        /// <param name="sProductNO"></param>
        /// <param name="sPaper"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateOrderProductPaper(string sOrderNO, string sOrderIndex, string sSeparateNO, string sProductNO, string sPaper)
        {
            string sSql = "declare @sPaper as varchar(50) " +
            "if '" + sPaper + "'='' " +
            "select @sPaper=[Paper] from Products where [ProductNO]='" + sProductNO + "' " +
            "else " +
            "select @sPaper='" + sPaper + "' " +
            "Update OrderProducts set Paper=@sPaper where OrderNO='" + sOrderNO + "' and OrderIndex='" + sOrderIndex + "' and SeparateNO='" + sSeparateNO + "' and ProductNO='" + sProductNO + "' ";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 修改产品的膜
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sOrderIndex"></param>
        /// <param name="sSeparateNO"></param>
        /// <param name="sProductNO"></param>
        /// <param name="sFilm"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateOrderProductFilm(string sOrderNO, string sOrderIndex, string sSeparateNO, string sProductNO, string sFilm)
        {
            string sSql = "declare @sFilm as varchar(50) " +
            "if '" + sFilm + "'='' " +
            "select @sFilm=[film] from Products where [ProductNO]='" + sProductNO + "' " +
            "else " +
            "select @sFilm='" + sFilm + "' " +
            "Update OrderProducts set film=@sFilm where OrderNO='" + sOrderNO + "' and OrderIndex='" + sOrderIndex + "' and SeparateNO='" + sSeparateNO + "' and ProductNO='" + sProductNO + "' ";
            return ExecuteSql(sSql);
        }



        /// <summary>
        /// 修改产品的包装
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sOrderIndex"></param>
        /// <param name="sSeparateNO"></param>
        /// <param name="sProductNO"></param>
        /// <param name="sFilm"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateOrderProductBox(string sOrderNO, string sOrderIndex, string sSeparateNO, string sProductNO, string sBox)
        {
            string sSql = "declare @sBox as varchar(50) " +
            "if '" + sBox + "'='' " +
            "select @sBox=[Box] from Products where [ProductNO]='" + sProductNO + "' " +
            "else " +
            "select @sBox='" + sBox + "' " +
            "Update OrderProducts set Box=@sBox where OrderNO='" + sOrderNO + "' and OrderIndex='" + sOrderIndex + "' and SeparateNO='" + sSeparateNO + "' and ProductNO='" + sProductNO + "' ";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 修改产品的内页
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sOrderIndex"></param>
        /// <param name="sSeparateNO"></param>
        /// <param name="sProductNO"></param>
        /// <param name="sInsidePage"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateOrderProductInsidePage(string sOrderNO, string sOrderIndex, string sSeparateNO, string sProductNO, string sInsidePage)
        {
            string sSql = "declare @sInsidePage as varchar(50) " +
            "if '" + sInsidePage + "'='' " +
            "select @sInsidePage=[InsidePage] from Products where [ProductNO]='" + sProductNO + "' " +
            "else " +
            "select @sInsidePage='" + sInsidePage + "' " +
            "Update OrderProducts set InsidePage=@sInsidePage where OrderNO='" + sOrderNO + "' and OrderIndex='" + sOrderIndex + "' and SeparateNO='" + sSeparateNO + "' and ProductNO='" + sProductNO + "' ";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 修改订单产品底片数量
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sOrderIndex"></param>
        /// <param name="sSeparateNO"></param>
        /// <param name="sProductNO"></param>
        /// <param name="sNegativeQuantity"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateOrderProductNegativeQuantity(string sOrderNO, string sOrderIndex, string sSeparateNO, string sProductNO, string sNegativeQuantity)
        {
            string sSql = "Update OrderProducts set NegativeQuantity='" + sNegativeQuantity + "' where OrderNO='" + sOrderNO + "' and OrderIndex='" + sOrderIndex + "' and SeparateNO='" + sSeparateNO + "' and ProductNO='" + sProductNO + "' ";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 修改订单产品对页数量
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sOrderIndex"></param>
        /// <param name="sSeparateNO"></param>
        /// <param name="sProductNO"></param>
        /// <param name="sPageQuantity"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateOrderProductPageQuantity(string sOrderNO, string sOrderIndex, string sSeparateNO, string sProductNO, string sPageQuantity)
        {
            string sSql = "Update OrderProducts set PageQuantity='" + sPageQuantity + "' where OrderNO='" + sOrderNO + "' and OrderIndex='" + sOrderIndex + "' and SeparateNO='" + sSeparateNO + "' and ProductNO='" + sProductNO + "' ";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 修改订单产品产品数量
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sOrderIndex"></param>
        /// <param name="sSeparateNO"></param>
        /// <param name="sProductNO"></param>
        /// <param name="sProductQuantity"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateOrderProductProductQuantity(string sOrderNO, string sOrderIndex, string sSeparateNO, string sProductNO, string sProductQuantity)
        {
            string sSql = "Update OrderProducts set ProductQuantity='" + sProductQuantity + "' where OrderNO='" + sOrderNO + "' and OrderIndex='" + sOrderIndex + "' and SeparateNO='" + sSeparateNO + "' and ProductNO='" + sProductNO + "' ";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 查询订单图片
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchOrderImages(string sql)
        {
            string sSql = "select OrderNO, SelectType, [FileName], PNumber, Design, [Create], CreateDate, AnnotateCount, CutCount from dbo.VIEW_OrderImages where 1=1 " + sql;
            return ExecuteDataSet(sSql, "VIEW_OrderImages");
        }

        /// <summary>
        /// 查询订单照片及照片入册产品
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchOrderImages_N(string sql)
        {
            string sSql = "select * from (SELECT dbo.Orders.OrderNO, dbo.OrderFiles.SelectType, dbo.OrderFiles.FileName, dbo.OrderProductImage.ProductNO, dbo.OrderProductImage.OrderIndex, dbo.OrderProductImage.SeparateNO, dbo.Products.ProductName, (dbo.Products.ProductSizeA +'x'+ dbo.Products.ProductSizeB) as ProductSize FROM dbo.Products INNER JOIN dbo.OrderProductImage ON dbo.Products.ProductNO = dbo.OrderProductImage.ProductNO RIGHT OUTER JOIN dbo.OrderFiles INNER JOIN dbo.Orders ON dbo.OrderFiles.OrderNO = dbo.Orders.OrderNO ON dbo.OrderProductImage.OrderNO = dbo.OrderFiles.OrderNO AND dbo.OrderProductImage.FileName = dbo.OrderFiles.FileName) as TempOrderFiles where 1=1 " + sql;
            return ExecuteDataSet(sSql, "OrderFiles");
        }

        /// <summary>
        /// 订单图片乱序
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sFileName"></param>
        /// <returns></returns>
        [WebMethod]
        public bool RandomFileIndex(string sOrderNO, string[] sFileName)
        {
            string sSql = "";
            for (int i = 0; i < sFileName.Length; i++)
            {
                sSql += "Update dbo.OrderFiles set [FileIndex]='" + i.ToString() + "' where [OrderNO]='" + sOrderNO + "' and [FileName]='" + sFileName[i] + "' ";
            }
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 选择或淘汰照片
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sFile"></param>
        /// <param name="sSelectType"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateOrderImageSelectType(string sOrderNO, string sFile, string sSelectType)
        {
            string sSql = "Update OrderFiles SET SelectType='" + sSelectType + "' where OrderNO='" + sOrderNO + "' and [FileName]='" + sFile + "' ";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 保存图片裁剪信息
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sFile"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="w"></param>
        /// <param name="h"></param>
        /// <returns></returns>
        [WebMethod]
        public bool SaveOrderImageCut(string sOrderNO, string sFile, string sDrawType, string sProportion, int x, int y, int w, int h, string sMemo)
        {
            string sSql = "Insert into ImageCut (OrderNO, [FileName], DrawType, Proportion, X, Y, W, H, Memo) values ('" + sOrderNO + "','" + sFile + "','" + sDrawType + "','" + sProportion + "','" + x + "','" + y + "','" + w + "','" + h + "','" + sMemo + "') ";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 更新图片裁剪信息
        /// </summary>
        /// <param name="sID"></param>
        /// <param name="sOrderNO"></param>
        /// <param name="sFile"></param>
        /// <param name="sDrawType"></param>
        /// <param name="sProportion"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="w"></param>
        /// <param name="h"></param>
        /// <param name="sMemo"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateOrderImageCut(string sID, string sOrderNO, string sFile, string sDrawType, string sProportion, int x, int y, int w, int h, string sMemo)
        {
            string sSql = "Update ImageCut set OrderNO='" + sOrderNO + "', [FileName]='" + sFile + "', DrawType='" + sDrawType + "', Proportion='" + sProportion + "', X='" + x + "', Y='" + y + "', W='" + w + "', H='" + h + "', Memo='" + sMemo + "' where ID='" + sID + "' ";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 删除图片裁剪信息
        /// </summary>
        /// <param name="sID"></param>
        /// <returns></returns>
        [WebMethod]
        public bool DeleteOrderImageCut(string sID)
        {
            string sSql = "Delete ImageCut where ID='" + sID + "' ";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 查询图片裁剪信息
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sFile"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchOrderImageCut(string Sql)
        {
            DataSet myds = new DataSet();
            try
            {
                OpenConn();
                string sSql = "Select ID, OrderNO, [FileName] , DrawType, Proportion, X, Y, W, H, Memo from ImageCut where 1=1 " + Sql;
                SqlDataAdapter myda = new SqlDataAdapter(sSql, Conn);
                myda.Fill(myds, "ImageCut");
                CloseConn();
                return myds;
            }
            catch
            {
                return myds;
            }
        }

        /// <summary>
        /// 查询产品裁剪图
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchOrderProductImageCut(string sql)
        {
            string sSql = "SELECT OrderNO, OrderIndex, SeparateNO, ProductNO, FileName, DrawType, Proportion, X, Y, W, H, Memo FROM (SELECT dbo.OrderProducts.OrderNO, dbo.OrderProducts.OrderIndex, dbo.OrderProducts.SeparateNO, dbo.OrderProducts.ProductNO, dbo.OrderProductImage.FileName, dbo.ImageCut.DrawType, dbo.ImageCut.Proportion, dbo.ImageCut.X, dbo.ImageCut.Y, dbo.ImageCut.W, dbo.ImageCut.H, dbo.ImageCut.Memo FROM dbo.OrderProducts INNER JOIN dbo.OrderProductImage ON dbo.OrderProducts.OrderNO = dbo.OrderProductImage.OrderNO AND dbo.OrderProducts.OrderIndex = dbo.OrderProductImage.OrderIndex AND dbo.OrderProducts.SeparateNO = dbo.OrderProductImage.SeparateNO INNER JOIN dbo.ImageCut ON dbo.OrderProductImage.OrderNO = dbo.ImageCut.OrderNO AND dbo.OrderProductImage.FileName = dbo.ImageCut.FileName) AS derivedtbl_1 where 1=1 " + sql;
            return ExecuteDataSet(sSql, "TMP");
        }

        /// <summary>
        /// 保存订单制作要求
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sRequire"></param>
        /// <returns></returns>
        [WebMethod]
        public bool SaveOrderProduceRequire(string sOrderNO, string sRequire)
        {
            string sSql = "declare @a int set @a=isnull((SELECT MAX([Index]) AS Expr1 FROM ProduceRequire where OrderNO='" + sOrderNO + "' ),0)+1 set @a=right(cast(@a+10000 as varchar(20)),3) ";
            sSql += "Insert into ProduceRequire (OrderNO, [Index], Require) values ('" + sOrderNO + "',@a,'" + sRequire + "') ";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 删除订单制作要求
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sRequire"></param>
        /// <returns></returns>
        [WebMethod]
        public bool DeleteOrderProduceRequire(string sOrderNO, string sRequire)
        {
            string sSql = "Delete ProduceRequire where OrderNO='" + sOrderNO + "' and Require='" + sRequire + "' ";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 查询订单制作要求
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchOrderProduceRequire(string sOrderNO)
        {
            string sSql = "Select Require from ProduceRequire where  OrderNO='" + sOrderNO + "' ";
            return ExecuteDataSet(sSql, "ProduceRequire");
        }
        /// <summary>
        /// 保存图片批注
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sFileName"></param>
        /// <param name="sAnnotate"></param>
        /// <param name="sCreate"></param>
        /// <param name="sCreateDate"></param>
        /// <returns></returns>
        [WebMethod]
        public bool SaveOrderImageAnnotate(string sOrderNO, string[] sFileName, string sAnnotate, string sCreate, string sCreateDate)
        {
            string sSql = "";
            for (int i = 0; i < sFileName.Length; i++)
            {
                sSql += "Insert into ImageAnnotate (OrderNO, [FileName], Annotate, [Create], CreateDate) Values ('" + sOrderNO + "', '" + sFileName[i] + "', '" + sAnnotate + "', '" + sCreate + "', '" + sCreateDate + "') ";
            }
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 删除图片批注
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sFileName"></param>
        /// <param name="sAnnotate"></param>
        /// <returns></returns>
        [WebMethod]
        public bool DeleteOrderImageAnnotate(string sOrderNO, string[] sFileName, string sAnnotate)
        {
            string sSql = "";
            for (int i = 0; i < sFileName.Length; i++)
            {
                sSql += "Delete ImageAnnotate where OrderNO='" + sOrderNO + "' and [FileName]='" + sFileName[i] + "' and Annotate='" + sAnnotate + "' ";
            }
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 查询图片批注
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sFileName"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchOrderImageAnnotate(string sOrderNO, string[] sFileName)
        {
            string sSql = "Select distinct Annotate from ImageAnnotate where  OrderNO='" + sOrderNO + "' and ( 1<>1 ";
            for (int i = 0; i < sFileName.Length; i++)
            {
                sSql += "or [FileName]='" + sFileName[i] + "' ";
            }
            sSql += ") ";
            return ExecuteDataSet(sSql, "ImageAnnotate");
        }

        /// <summary>
        /// 查询所有已存图片裁剪比例列表
        /// </summary>
        /// <param name="Sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchImageProportion(string Sql)
        {
            string sSql = "select ID, Proportion from ImageProportion where 1=1 " + Sql;
            return ExecuteDataSet(sSql, "SearchImageProportion");
        }

        /// <summary>
        /// 打印看样结果-选中照片+照片注释
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet PrintImageAnnotate(string sql)
        {
            string sSql = "";
            //sSql = "Select CardNO, CustomerName1, CustomerName2, OrderNO, SuiteName, ImagePath, SelectType, [FileName], Annotate,LookAddress, LookEmployee, PreLookDate, GetGoodsAddress, GetGoodsEmployee, PreGetGoodsDate from dbo.v_choose_Annotate where 1=1 " + sql + " order by Annotate,FileIndex ";
            //建立临时表
            sSql += "declare @t table ([CardNO] varchar(50),[CustomerName1] varchar(50),[CustomerName2] varchar(50),[OrderNO] varchar(50),[SuiteName] varchar(50),[ImagePath] varchar(200),[SelectType] varchar(50),[FileName] varchar(250),[FileIndex] varchar(50),[Annotate] varchar(100),[LookAddress] varchar(50),[LookEmployee] varchar(50),[GetGoodsAddress] varchar(50),[GetGoodsEmployee] varchar(50),[PreLookDate] datetime,[PreGetGoodsDate] datetime) ";
            //将查询结果插入临时表
            sSql += "insert into @t SELECT [CardNO],[CustomerName1],[CustomerName2],[OrderNO],[SuiteName],[ImagePath],[SelectType],[FileName],[FileIndex],[Annotate],[LookAddress],[LookEmployee],[GetGoodsAddress],[GetGoodsEmployee],[PreLookDate],[PreGetGoodsDate] FROM [dbo].[v_choose_Annotate] where 1=1 " + sql + "";
            //查询临时表
            sSql += "select distinct [CardNO],[CustomerName1],[CustomerName2],[OrderNO],[SuiteName],[ImagePath],[SelectType],[FileName],[FileIndex],[LookAddress],[LookEmployee],[GetGoodsAddress],[GetGoodsEmployee],[PreLookDate],[PreGetGoodsDate],stuff((select ','+rtrim(Annotate) from @t where [FileName]=a.[FileName] for xml path('')),1,1,'') as Annotate from (select distinct [CardNO],[CustomerName1],[CustomerName2],[OrderNO],[SuiteName],[ImagePath],[SelectType],[FileName],[FileIndex],[Annotate],[LookAddress],[LookEmployee],[GetGoodsAddress],[GetGoodsEmployee],[PreLookDate],[PreGetGoodsDate] from @t where 1=1 " + sql + ") a order by Annotate,FileIndex";
            return ExecuteDataSet(sSql, "v_choose_Annotate");
        }


        [WebMethod]
        public DataSet GetGoodGetAllTimers(string orderno)
        {
            string str = @"SELECT distinct  PreGetGoodsDate
            FROM OrderProducts where   PreGetGoodsDate!='1900-01-01 00:00:00.000' and OrderNO='" + orderno + "'";
            return ExecuteDataSet(str, "GetGoodGetAllTimers");
        }
        /// <summary>
        /// 打印看样结果-裁剪照片
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet OrderImageCut(string sOrderNO)
        {
            string sSql = "Select CardNO, OrderNO, SelectType, ImagePath, [FileName], DrawType, Proportion, X, Y, W, H, Memo from dbo.v_choose_Cut where  OrderNO='" + sOrderNO + "' ";
            return ExecuteDataSet(sSql, "v_choose_Cut");
        }

        /// <summary>
        /// 打印看样结果-产品照片
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet OrderProductImage(string sOrderNO)
        {
            string sSql = "Select CardNO, OrderNO, OrderIndex, SeparateNO, ImagePath, ProductNO, ProductName, ProductSizeA, ProductSizeB, PageQuantity, ChooseNegativeQuantity, NegativeQuantity, ProductQuantity, ImageIndex, [FileName], ProductMemory,ProduceState,ProductElement,CreateDate from dbo.v_choose_ProductImage where  OrderNO='" + sOrderNO + "' order by  ProductNO, OrderIndex, SeparateNO ";
            return ExecuteDataSet(sSql, "v_choose_ProductImage");
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchOrderImage(string sql)
        {
            string sSql = "Select CardNO, OrderNO, OrderIndex, SeparateNO, ImagePath, ProductNO, ProductName, ProductSizeA, ProductSizeB, PageQuantity, ChooseNegativeQuantity, NegativeQuantity, ProductQuantity, ImageIndex, [FileName], ProductMemory,ProduceState,CreateDate from dbo.v_choose_ProductImage where  1=1" + sql + " order by  ProductNO, OrderIndex, SeparateNO ";

            return ExecuteDataSet(sSql, "v_SearchOrderImage");
        }
        /// <summary>
        /// 保存制作要求
        /// </summary>
        /// <param name="sRequireType"></param>
        /// <returns></returns>
        [WebMethod]
        public bool SaveRequire(string sClass, string sRequireType)
        {
            string sSql = "Insert into [dbo].[Require] ([Class],[RequireType]) VALUES ('" + sClass + "','" + sRequireType + "')";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 删除制作要求
        /// </summary>
        /// <param name="sID"></param>
        /// <returns></returns>
        [WebMethod]
        public bool DeleteRequire(string sID)
        {
            string sSql = "Delete [dbo].[Require] where ID='" + sID + "' ";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 查询制作要求
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchRequire(string sql)
        {
            string sSql = "SELECT [ID],[RequireType] FROM [dbo].[Require] WHERE 1=1 " + sql;
            return ExecuteDataSet(sSql, "SearchRequire");
        }

        /// <summary>
        /// 保存制作要求子项目
        /// </summary>
        /// <param name="sRequireID"></param>
        /// <param name="sRequireNO"></param>
        /// <param name="sRequireValue"></param>
        /// <returns></returns>
        [WebMethod]
        public bool SaveRequireSub(string sRequireID, string sRequireNO, string sRequireValue)
        {
            string sSql = "Insert into dbo.RequireSub (RequireID, RequireNO, RequireValue) VALUES ('" + sRequireID + "','" + sRequireNO + "','" + sRequireValue + "')";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 修改制作要求子项目
        /// </summary>
        /// <param name="sRequireID"></param>
        /// <param name="sRequireValue"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateRequireSub(string sRequireID, string sRequireValue)
        {
            string sSql = "Update dbo.RequireSub set RequireValue='" + sRequireValue + "' where ID='" + sRequireID + "'";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 删除制作要求子项目
        /// </summary>
        /// <param name="sRequireID"></param>
        /// <returns></returns>
        [WebMethod]
        public bool DeleteRequireSub(string sRequireID)
        {
            string sSql = "Delete dbo.RequireSub where ID='" + sRequireID + "'";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 查询制作要求子项目
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchRequireSub(string sql)
        {
            string sSql = "SELECT [ID], [RequireID], [RequireNO], [RequireValue] FROM [dbo].[RequireSub] WHERE 1=1 " + sql;
            return ExecuteDataSet(sSql, "SearchRequireSub");
        }

        /// <summary>
        /// 浏览订单照片
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet PhotoBrowserA(string sql)
        {
            string sSql = "Select OrderNO, SelectType, [FileName], DrawType, Proportion, X, Y, W, H, Memo from dbo.VIEW_PhotoBrowserA where 1=1 " + sql;
            return ExecuteDataSet(sSql, "PhotoBrowserA");
        }

        /// <summary>
        /// 浏览产品照片
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet PhotoBrowserB(string sql)
        {
            string sSql = "Select OrderNO, OrderIndex, SeparateNO, ProductNO, [FileName], DrawType, Proportion, X, Y, W, H, Memo from dbo.VIEW_PhotoBrowserB where 1=1 " + sql;
            return ExecuteDataSet(sSql, "PhotoBrowserB");
        }

        /// <summary>
        /// 看样产品统计明细表——新
        /// </summary>
        /// <param name="sql"></param>
        /// <param name="sProductName"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet ChooseProductCountDetail_NN(string sql, string sProductName)
        {

            string sSql = "select ChooseDepartmentName as 看样地点, ChooseEmployeeName as 看样人员, ProductName as 产品名称, ProductCount as 产品数量, ChooseDate as 看样时间 , orderno as 订单号,customerName1+' '+customerName2 as 客户姓名,MobilePhone1+' '+MobilePhone2 as 顾客电话,PreGetGoodsDate as 预约取件时间  from dbo.View_Temp where 1=1" + sql + sProductName + " order by [ChooseDepartmentName] ,[ChooseEmployeeName] ,[ProductName]";

            return ExecuteDataSet(sSql, "ChooseProductCountDetail");
        }


        /// <summary>
        /// 查询订单底片数量
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public string searchOrderImagesCount(string sql)
        {
            string sSql = "select Count(*) from VIEW_OrderImages where 1=1" + sql;
            return ExecuteSqlToString(sSql);
        }

        /// <summary>
        /// 再次检查选片结果
        /// </summary>/
        /// <param name="sOrderNO"></param>
        /// <param name="images"></param>
        /// <returns></returns>
        [WebMethod]
        public bool CheckChoose(string sOrderNO, System.Collections.Generic.List<string[]> images)
        {
            string sSql = "";
            for (int i = 0; i < images.Count; i++)
            {
                string sFileName = images[i][8].ToString() + "\\" + images[i][2].ToString() + images[i][3].ToString();
                int iindex = sFileName.LastIndexOf("\\" + images[i][1].ToString() + "\\");
                sFileName = sFileName.Substring(iindex);
                sSql += "Update OrderFiles set [SelectType]='" + images[i][4].ToString() + "' where OrderNO='" + sOrderNO + "' and [FileName]='" + sFileName + "' ";
            }
            return ExecuteSql(sSql);
        }
        /// <summary>
        /// 查找产品要素
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]

        public DataSet SearchProduction(string sql)
        {
            string sSql = "select * from Production where 1=1" + sql;
            return ExecuteDataSet(sSql, "Production");
        }
        /// <summary>
        ///  删除产品要素 
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public bool DeleteProduction(string sql)
        {
            string sSql = "delete Production where 1=1" + sql;
            return ExecuteSql(sSql);
        }
        /// <summary>
        /// 插入产品要素
        /// </summary>
        /// <param name="mianName"></param>
        /// <param name="InsidePageNO"></param>
        /// <param name="InsidePageName"></param>
        /// <param name="FilmNO"></param>
        /// <param name="FilmName"></param>
        /// <param name="PaperNO"></param>
        /// <param name="PaperName"></param>
        /// <returns></returns>
        [WebMethod]
        public bool InsertProduction(string mianName, string InsidePageNO, string InsidePageName, string FilmNO, string FilmName, string PaperNO, string PaperName)
        {
            string sSql = "insert into Production values ('" + mianName + "','" + InsidePageNO + "','" + InsidePageName + "','" + FilmNO + "','" + FilmName + "','" + PaperNO + "','" + PaperName + "')";
            return ExecuteSql(sSql);

        }

        /// <summary>
        /// 获取看样数据（高单表）
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        public DataSet SearchChooseData(string sql, DateTime minDate)
        {
            //string sSql = "select * from (Select distinct CustomerNO, o.OrderNO, CustomerName1, CustomerName2, MobilePhone1, MobilePhone2, SuiteName, SuitePrice, PayableChoose, ChooseCash, ChooseRow, ChooseCol, ChooseState, PreChooseDate, ChooseAddressNO, ChooseAddress, ChooseEmployee, ChooseMeMory, ShootEmployeeN,Choose_Create,isnull((select top 1 CashDate from VIEW_Cash where OrderNO=o.OrderNO and CashPretextTypeName='选片收银' order by CashDate desc),'1900-01-01') as CashDate from dbo.VIEW_SearchPreChoose o left join OrdersPayState ops on o.OrderNO=ops.OrderNO where (ChooseState is not null and ChooseState<>'')) tmp where 1=1 " + sql;
            string sqlString = @"with shootN as (select OrderNO,ShootEmployeeNO,DressEmployeeNO,ROW_NUMBER()over(partition by OrderNO order by PreShootDate desc) rowNum from OrderShoot where ShootType='内景' and IsDelete=0)
,shootW as (select OrderNO,ShootEmployeeNO,DressEmployeeNO,ROW_NUMBER()over(partition by OrderNO order by PreShootDate desc) rowNum from OrderShoot where ShootType='外景' and IsDelete=0)
select o.OrderNO,c.CustomerName1,c.CustomerName2,c.MobilePhone1,c.MobilePhone2,Suite.SuiteName,
o.PreChooseDate,dbo.Fn_GetDepartmentName(o.ChooseAddress) ChooseAddress, dbo.Fn_GetEmployeeName(o.ChooseEmployeeNO) ChooseEmployee,
dbo.Fn_GetEmployeeName(shootN.ShootEmployeeNO) ShootEmployeeN,dbo.Fn_GetEmployeeName(shootN.DressEmployeeNO) DressEmployeeN,
dbo.Fn_GetEmployeeName(shootW.ShootEmployeeNO) ShootEmployeeW,dbo.Fn_GetEmployeeName(shootW.DressEmployeeNO) DressEmployeeW,
ISNULL(SUM(cd.CashNumber),0) ChooseCash,
isnull((select sum(CashNumber) from CashSub s join CashDetail d on s.CashNO=d.CashNO where s.OrderNO=o.OrderNO and datediff(dd,CashDate,'2016-5-1')>0  and CashPretext in ('001','002','003')),0) [PreMayFirst],
isnull((select sum(CashNumber) from CashSub s join CashDetail d on s.CashNO=d.CashNO where s.OrderNO=o.OrderNO and datediff(dd,CashDate,'2016-5-1')<=0 and CashPretext in ('001','002','003')),0) [AfterMayFirst]
from Orders o join CashSub cs on o.OrderNO=cs.OrderNO
join CashDetail cd on cs.CashNO=cd.CashNO
left join Customers c on c.CustomerNO=o.CustomerNO
left join Suite on Suite.SuiteNO=o.SuiteNO
left join shootN on shootN.OrderNO=cs.OrderNO and shootN.rowNum=1
left join shootW on shootW.OrderNO=cs.OrderNO and shootW.rowNum=1
where cs.BusinessDepartment='G0103010103' and cd.CashPretext not in ('SKSY_DBF','SKSY_7SJF')/*SKSY_DBF打包费;SKSY_7SJF送件费*/  " + sql + @" 
and not exists (select 1 from CashSub s join CashDetail d on s.CashNO=d.CashNO where s.OrderNO=o.OrderNO and datediff(dd,s.CashDate,'" + minDate + @"')>0 and d.CashPretext='SKSY_3JF'/*加选*/)
group by o.OrderNO,c.CustomerName1,c.CustomerName2,c.MobilePhone1,c.MobilePhone2,Suite.SuiteName,
o.PreChooseDate,o.ChooseAddress, o.ChooseEmployeeNO,
shootN.ShootEmployeeNO,shootN.DressEmployeeNO,
shootW.ShootEmployeeNO,shootW.DressEmployeeNO
order by o.OrderNO";
            return ExecuteDataSet(sqlString, "SearchPreChoose");
        }

        #endregion

        #region 设计

        /// <summary>
        /// 修改校色路径
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sImageXSPath"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateOrderXSImagePath(string sOrderNO, string sImageXSPath)
        {
            string sSql = "Update Orders set ImageXSPath='" + sImageXSPath + "'  where OrderNO='" + sOrderNO + "' ";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 修改设计路径
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sImageSJPath"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateOrderSJImagePath(string sOrderNO, string sImageSJPath)
        {
            string sSql = "Update Orders set ImageSJPath='" + sImageSJPath + "'  where OrderNO='" + sOrderNO + "' ";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 设计流程分配
        /// </summary>
        /// <param name="sOrderNO">订单号</param>
        /// <param name="sOrderIndex">订单序号</param>
        /// <param name="sSeparateNO">产品分离号</param>
        /// <param name="sProductNO">产品编号</param>
        /// <param name="sPRI">优先级</param>
        /// <param name="sDesignType">设计类别</param>
        /// <param name="sDesignState">设计状态</param>
        /// <param name="sDepartment">当前部门</param>
        /// <param name="sEmployee">当前责任人</param>
        /// <param name="sDate">当前时间</param>
        /// <param name="sOperatorNO">操作员工</param>
        /// <param name="sOperatorDate">操作时间</param>
        /// <param name="sOption"></param>
        /// <returns></returns>
        [WebMethod]
        //public bool UpdateDesign_Dispatch(string[] sOrderNo, string[] sOrderIndex, string[] sSeparateNO, string[] sProductNO, string sPRI, string sDesignType, string sDesignState, string sDepartment, string sEmployee, string sDate, string sOperatorNO, string sOperatorDate, string sOption)
        //{
        //    string sSql = "";
        //    for (int i = 0; i < sOrderNo.Length; i++)
        //    {
        //        sSql += "if exists(select OrderNO from DesignProcess where OrderNO='" + sOrderNo[i] + "' and OrderIndex='" + sOrderIndex[i] + "' and SeparateNO='" + sSeparateNO[i] + "') ";
        //        sSql += "Update DesignProcess set PRI='" + sPRI + "',DesignType='" + sDesignType + "',Department1=Department2, Employee1=Employee2, Date1=Date2, Department2='" + sDepartment + "', Employee2='" + sEmployee + "', Date2='" + sDate + "',DesignState='" + sDesignState + "' where OrderNO='" + sOrderNo[i] + "' and OrderIndex='" + sOrderIndex[i] + "' and SeparateNO='" + sSeparateNO[i] + "' ";
        //        sSql += "else ";
        //        sSql += "Insert into DesignProcess (OrderNO, OrderIndex, SeparateNO, ProductNO, PRI, DesignType, DesignState, Department1, Employee1, Date1, Department2, Employee2, Date2) values ('" + sOrderNo[i] + "', '" + sOrderIndex[i] + "', '" + sSeparateNO[i] + "', '" + sProductNO[i] + "', '" + sPRI + "', '" + sDesignType + "', '" + sDesignState + "', '" + sDepartment + "', '" + sEmployee + "', '" + sDate + "', '" + sDepartment + "', '" + sEmployee + "', '" + sDate + "') ";
        //    }
        //    return ExecuteSql(sSql);
        //}

        public bool UpdateDesign_Dispatch(string[] sOrderNO, string[] sOrderIndex, string[] sSeparateNO, string[] sProductNO, string sPRI, string sDesignType, string sDesignState, string sDepartment, string sEmployee, string sDate, string sOperatorNO, string sOperatorDate, string sOption, string xsImportEmployeeNO, string hcSampleEmployeeNO)
        {
            string sSql = "";
            for (int i = 0; i < sOrderNO.Length; i++)
            {
                sSql += "if exists(select OrderNO from DesignProcess where OrderNO='" + sOrderNO[i] + "' and OrderIndex='" + sOrderIndex[i] + "' and SeparateNO='" + sSeparateNO[i] + "') ";
                sSql += "Update DesignProcess set PRI='" + sPRI + "',DesignType='" + sDesignType + "',Department1=Department2, Employee1=Employee2, Date1=Date2, Department2='" + sDepartment + "', Employee2='" + sEmployee + "', Date2='" + sDate + "',DesignState='" + sDesignState + "',XSEmployeeNO='" + xsImportEmployeeNO + "',HCEmployeeNO='" + hcSampleEmployeeNO + "' where OrderNO='" + sOrderNO[i] + "' and OrderIndex='" + sOrderIndex[i] + "' and SeparateNO='" + sSeparateNO[i] + "' ";
                sSql += "else ";
                sSql += "Insert into DesignProcess (OrderNO, OrderIndex, SeparateNO, ProductNO, PRI, DesignType, DesignState, Department1, Employee1, Date1, Department2, Employee2, Date2,XSEmployeeNO,HCEmployeeNO) values ('" + sOrderNO[i] + "', '" + sOrderIndex[i] + "', '" + sSeparateNO[i] + "', '" + sProductNO[i] + "', '" + sPRI + "', '" + sDesignType + "', '" + sDesignState + "', '" + sDepartment + "', '" + sEmployee + "', '" + sDate + "', '" + sDepartment + "', '" + sEmployee + "', '" + sDate + "','" + xsImportEmployeeNO + "','" + hcSampleEmployeeNO + "') ";
            }
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 看完完成改设计类型为正常
        /// </summary>
        /// <param name="orderNO"></param>
        /// <param name="orderIndex"></param>
        /// <param name="separateNO"></param>
        /// <returns></returns>
        public bool UpdateDesignTypeForLook(string[] orderNO, string[] orderIndex, string[] separateNO)
        {
            string sql = "";
            for (int i = 0; i < orderNO.Length; i++)
            {

                sql += " UPDATE  DesignProcess ";
                sql += " SET DesignType = CASE WHEN DesignType = '全设计看版' THEN '全设计看样' ELSE '正常' END ";
                sql += " WHERE OrderNO = '" + orderNO[i] + "' AND OrderIndex = '" + orderIndex[i] + "' AND SeparateNO = '" + separateNO[i] + "' ";

                //sql += @" if exists(select * from (select DesignType from DesignProcess where OrderNO='" + orderNo[i] + "' and OrderIndex='" + orderIndex[i] + "' and SeparateNO='" + separateNO[i] + "')as a where a.DesignType = '全设计看版') update DesignProcess set DesignType = '全设计看样' where OrderNO = '" + orderNo[i] + "' and OrderIndex = '" + orderIndex[i] + "' and SeparateNO = '" + separateNO[i] + "' else update DesignProcess set DesignType = '正常' where OrderNO = '" + orderNo[i] + "' and OrderIndex = '" + orderIndex[i] + "' and SeparateNO = '" + separateNO[i] + "' ";
            }
            return ExecuteSql(sql);
        }

        /// <summary>
        /// 设计流程变更
        /// </summary>
        /// <param name="sOrderNO">订单号</param>
        /// <param name="sOrderIndex">订单序号</param>
        /// <param name="sSeparateNO">产品分离号</param>
        /// <param name="sProductNO">产品编号</param>
        /// <param name="sPRI">优先级</param>
        /// <param name="sDesignType">设计类别</param>
        /// <param name="sDesignState">设计状态</param>
        /// <param name="sDepartment">当前部门</param>
        /// <param name="sEmployee">当前责任人</param>
        /// <param name="sDate">当前时间</param>
        /// <param name="sOperatorNO">操作员工</param>
        /// <param name="sOperatorDate">操作时间</param>
        /// <param name="sOption"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateDesign(string[] sOrderNO, string[] sOrderIndex, string[] sSeparateNO, string[] sProductNO, string sPRI, string sDesignType, string sDesignState, string sDepartment, string sEmployee, string sDate, string sOperatorNO, string sOperatorDate, string sOption)
        {
            string sSql = "";
            for (int i = 0; i < sOrderNO.Length; i++)
            {
                sSql += "if exists(select OrderNO from DesignProcess where OrderNO='" + sOrderNO[i] + "' and OrderIndex='" + sOrderIndex[i] + "' and SeparateNO='" + sSeparateNO[i] + "') ";
                sSql += "begin ";
                if (sDesignState == "打包完成")//update by wujianbo 20120321 增加打包完成时间
                {
                    sSql += "Update DesignProcess set Department1=Department2, Employee1=Employee2, Date1=Date2, Department2='" + sDepartment + "', Employee2='" + sEmployee + "', Date2='" + sDate + "',DesignState='" + sDesignState + "',PackDate=getdate() where OrderNO='" + sOrderNO[i] + "' and OrderIndex='" + sOrderIndex[i] + "' and SeparateNO='" + sSeparateNO[i] + "' ";
                }
                else
                {
                    sSql += "Update DesignProcess set Department1=Department2, Employee1=Employee2, Date1=Date2, Department2='" + sDepartment + "', Employee2='" + sEmployee + "', Date2='" + sDate + "',DesignState='" + sDesignState + "' where OrderNO='" + sOrderNO[i] + "' and OrderIndex='" + sOrderIndex[i] + "' and SeparateNO='" + sSeparateNO[i] + "' ";
                }
                switch (sOption)
                {
                    case "校色":
                        sSql += "Update DesignProcess set XSEmployeeNO='" + sOperatorNO + "',XSDate='" + sOperatorDate + "' where OrderNO='" + sOrderNO[i] + "' and OrderIndex='" + sOrderIndex[i] + "' and SeparateNO='" + sSeparateNO[i] + "' ";
                        break;
                    case "校色质检":
                        sSql += "Update DesignProcess set XSCheckEmployeeNO='" + sOperatorNO + "',XSCheckDate='" + sOperatorDate + "' where OrderNO='" + sOrderNO[i] + "' and OrderIndex='" + sOrderIndex[i] + "' and SeparateNO='" + sSeparateNO[i] + "' ";
                        break;
                    case "设计":
                        sSql += "Update DesignProcess set HCEmployeeNO='" + sOperatorNO + "',HCDate='" + sOperatorDate + "' where OrderNO='" + sOrderNO[i] + "' and OrderIndex='" + sOrderIndex[i] + "' and SeparateNO='" + sSeparateNO[i] + "' ";
                        break;
                    case "设计质检":
                        sSql += "Update DesignProcess set HCCheckEmployeeNO='" + sOperatorNO + "',HCCheckDate='" + sOperatorDate + "' where OrderNO='" + sOrderNO[i] + "' and OrderIndex='" + sOrderIndex[i] + "' and SeparateNO='" + sSeparateNO[i] + "' ";
                        break;
                    case "全设计":
                        sSql += "Update DesignProcess set AllDesignEmployeeNO='" + sOperatorNO + "',AllDesignDate='" + sOperatorDate + "' where OrderNO='" + sOrderNO[i] + "' and OrderIndex='" + sOrderIndex[i] + "' and SeparateNO='" + sSeparateNO[i] + "' ";
                        break;
                    case "全设计质检":
                        sSql += "Update DesignProcess set AllDesignCheckEmployeeNO='" + sOperatorNO + "',AllDesignCheckDate='" + sOperatorDate + "' where OrderNO='" + sOrderNO[i] + "' and OrderIndex='" + sOrderIndex[i] + "' and SeparateNO='" + sSeparateNO[i] + "' ";
                        break;
                    case "质检":
                        sSql += "Update DesignProcess set XSCheckEmployeeNO='" + sOperatorNO + "',XSCheckDate='" + sOperatorDate + "',HCCheckEmployeeNO='" + sOperatorNO + "',HCCheckDate='" + sOperatorDate + "' where OrderNO='" + sOrderNO[i] + "' and OrderIndex='" + sOrderIndex[i] + "' and SeparateNO='" + sSeparateNO[i] + "' ";
                        break;
                }
                sSql += "end ";
                sSql += "else ";
                sSql += "Insert into DesignProcess (OrderNO, OrderIndex, SeparateNO, ProductNO, PRI, DesignType, DesignState, Department1, Employee1, Date1, Department2, Employee2, Date2) values ('" + sOrderNO[i] + "', '" + sOrderIndex[i] + "', '" + sSeparateNO[i] + "', '" + sProductNO[i] + "', '" + sPRI + "', '" + sDesignType + "', '" + sDesignState + "', '" + sDepartment + "', '" + sEmployee + "', '" + sDate + "', '" + sDepartment + "', '" + sEmployee + "', '" + sDate + "') ";
            }
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 返工到上流程
        /// </summary>
        /// <param name="sOrderNO">订单号</param>
        /// <param name="sOrderIndex">订单序号</param>
        /// <param name="sSeparateNO">产品分离号</param>
        /// <param name="sProductNO">产品编号</param>
        /// <param name="sDepartment">操作部门</param>
        /// <param name="sEmployee">操作人员</param>
        /// <param name="sDate">操作时间</param>
        /// <param name="sOption">状态：校色/设计</param>
        /// <returns></returns>
        [WebMethod]
        public bool ReBackDesign(string[] sOrderNO, string[] sOrderIndex, string[] sSeparateNO, string[] sProductNO, string[] sDepartment, string[] sEmployee, string sDate, string sOption)
        {
            string sSql = "";
            for (int i = 0; i < sOrderNO.Length; i++)
            {
                sSql += "if exists(select OrderNO from DesignProcess where OrderNO='" + sOrderNO[i] + "' and OrderIndex='" + sOrderIndex[i] + "' and SeparateNO='" + sSeparateNO[i] + "') ";
                sSql += "Update DesignProcess set Department1=Department2, Employee1=Employee2, Date1=Date2, ";
                switch (sOption)
                {
                    case "校色":
                        sSql += "Department2='" + sDepartment[i] + "', Employee2='" + sEmployee[i] + "', Date2='" + sDate + "',DesignState='校色返工' ";
                        break;
                    case "设计":
                        sSql += "Department2='" + sDepartment[i] + "', Employee2='" + sEmployee[i] + "', Date2='" + sDate + "',DesignState='设计返工' ";
                        break;
                }
                sSql += "where OrderNO='" + sOrderNO[i] + "' and OrderIndex='" + sOrderIndex[i] + "' and SeparateNO='" + sSeparateNO[i] + "' ";
            }
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 修改特殊备注
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sOrderIndex"></param>
        /// <param name="sSeparateNO"></param>
        /// <param name="sProductNO"></param>
        /// <param name="sTMemory"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateDesignProcessTMemory(string[] sOrderNO, string[] sOrderIndex, string[] sSeparateNO, string[] sProductNO, string sTMemory)
        {
            string sSql = "";
            for (int i = 0; i < sOrderNO.Length; i++)
            {
                sSql += "Update DesignProcess set TMemory=isnull(TMemory,'') +'" + sTMemory + "'+'('+CONVERT(VARCHAR,getdate(),120)+')' where OrderNO='" + sOrderNO[i] + "' and OrderIndex='" + sOrderIndex[i] + "' and SeparateNO='" + sSeparateNO[i] + "'";//update by wujianbo 20120601 累加备注
            }
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 设计订单产品状态变更：暂停/恢复
        /// </summary>
        /// <param name="sOrderNO">订单号</param>
        /// <param name="sOrderIndex">订单序号</param>
        /// <param name="sSeparateNO">产品分离号</param>
        /// <param name="DesignStart">暂停/恢复</param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateDesignStateStopOrRestart(string[] sOrderNO, string[] sOrderIndex, string[] sSeparateNO, string DesignStart)
        {
            string sSql = "";
            //for (int i = 0; i < sOrderNo.Length; i++)
            for (int i = 0; i < sOrderIndex.Length; i++)//update by wujianbo 20120526
            {
                sSql += "if exists(select OrderNO from DesignProcess where OrderNO='" + sOrderNO[i] + "' and OrderIndex='" + sOrderIndex[i] + "' and SeparateNO='" + sSeparateNO[i] + "') ";
                sSql += "Update DesignProcess set ";
                if (DesignStart == "暂停")
                    sSql += "DesignState='暂停-'+DesignState ";
                else
                    sSql += "DesignState=Replace(DesignState,'暂停-','') ";
                sSql += "where OrderNO='" + sOrderNO[i] + "' and OrderIndex='" + sOrderIndex[i] + "' and SeparateNO='" + sSeparateNO[i] + "' ";
            }
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 设计订单产品状态变更：看版中
        /// </summary>
        /// <param name="sOrderNO">订单号</param>
        /// <param name="sOrderIndex">订单序号</param>
        /// <param name="sSeparateNO">产品分离号</param>
        /// <param name="DesignStart">看版中</param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateDesignStatePause(string[] sOrderNO, string[] sOrderIndex, string[] sSeparateNO, string DesignStart)
        {
            string sSql = "";
            for (int i = 0; i < sOrderIndex.Length; i++)
            {
                sSql += "if exists(select OrderNO from DesignProcess where OrderNO='" + sOrderNO[i] + "' and OrderIndex='" + sOrderIndex[i] + "' and SeparateNO='" + sSeparateNO[i] + "') ";
                sSql += "Update DesignProcess set ";
                if (DesignStart == "看版中")
                    sSql += "DesignState='看版中-'+DesignState ";
                sSql += "where OrderNO='" + sOrderNO[i] + "' and OrderIndex='" + sOrderIndex[i] + "' and SeparateNO='" + sSeparateNO[i] + "' ";
            }
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 设计订单产品状态变更：看版完成
        /// </summary>
        /// <param name="sOrderNO">订单号</param>
        /// <param name="sOrderIndex">订单序号</param>
        /// <param name="sSeparateNO">产品分离号</param>
        /// <param name="DesignStart">看版完成</param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateDesignStateOver(string[] sOrderNO, string[] sOrderIndex, string[] sSeparateNO, string DesignStart)
        {
            string sSql = "";
            for (int i = 0; i < sOrderIndex.Length; i++)
            {
                sSql += "if exists(select OrderNO from DesignProcess where OrderNO='" + sOrderNO[i] + "' and OrderIndex='" + sOrderIndex[i] + "' and SeparateNO='" + sSeparateNO[i] + "') ";
                sSql += "Update DesignProcess set ";
                if (DesignStart == "看版完成")
                    sSql += "DesignState=Replace(DesignState,'看版中-','') ";
                sSql += "where OrderNO='" + sOrderNO[i] + "' and OrderIndex='" + sOrderIndex[i] + "' and SeparateNO='" + sSeparateNO[i] + "' ";
            }
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 设计订单产品状态变更：看版完成
        /// </summary>
        /// <param name="sOrderNO">订单号</param>
        /// <param name="sOrderIndex">订单序号</param>
        /// <param name="sSeparateNO">产品分离号</param>
        /// <param name="DesignStart">看版中</param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateDesignType(string[] sOrderNO, string[] sOrderIndex, string[] sSeparateNO, string DesignStart)
        {
            string sSql = "";
            for (int i = 0; i < sOrderIndex.Length; i++)
            {
                sSql += "if exists(select OrderNO from DesignProcess where OrderNO='" + sOrderNO[i] + "' and OrderIndex='" + sOrderIndex[i] + "' and SeparateNO='" + sSeparateNO[i] + "') ";
                sSql += "Update DesignProcess set ";
                if (DesignStart == "看版完成")
                {
                    sSql += "DesignType='看版完成-'+DesignType ";
                }
                else if (DesignStart == "工作完成")
                {
                    sSql += "DesignType=Replace(DesignType,'看版完成-','') ";
                }
                sSql += "where OrderNO='" + sOrderNO[i] + "' and OrderIndex='" + sOrderIndex[i] + "' and SeparateNO='" + sSeparateNO[i] + "' ";
            }
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 判断设计完成订单是否还有剩余产品
        /// </summary>
        /// <param name="orderno"></param>
        /// <returns></returns>
        public int DesignOrderIsOverHC(string orderno)
        {
            string sql = "select COUNT(OrderNO) from DesignProcess where  OrderNO = '" + orderno + "' and  AllDesignDate is null and HCDate is null";
            DataSet ds = ExecuteDataSet(sql, "DesignProcess");
            try
            {
                if (ds.Tables[0].Rows[0][0].ToString() != "0")
                {
                    return 1;
                }
            }
            catch (Exception)
            {
                throw;
            }
            return 0;
        }

        /// <summary>
        /// 判断校色完成订单是否还有剩余产品
        /// </summary>
        /// <param name="orderno"></param>
        /// <returns></returns>
        public int DesignOrderIsOverXS(string orderno)
        {
            string sql = "select COUNT(OrderNO) from DesignProcess where  OrderNO = '" + orderno + "' and  XsDate is null";
            DataSet ds = ExecuteDataSet(sql, "DesignProcess");
            try
            {
                if (ds.Tables[0].Rows[0][0].ToString() != "0")
                {
                    return 1;
                }
            }
            catch (Exception)
            {
                throw;
            }
            return 0;
        }

        /// <summary>
        /// 修改设计完成时间
        /// </summary>
        /// <param name="orderno"></param>
        /// <param name="sDate"></param>
        /// <returns></returns>
        public bool UpdateOrdersDesginDate(string orderno, string sDate)
        {
            string sql = "Update Orders Set DesignDate = getdate() where orderno = '" + orderno + "'";
            return ExecuteSql(sql);
        }
        /// <summary>
        /// 修改校色时间、校色人员
        /// </summary>
        /// <param name="orderno"></param>
        /// <param name="sDate"></param>
        /// <returns></returns>
        public bool UpdateOrdersXsDate(string orderno, string sDate, string employeeno, string employeeName)
        {
            string sql = "Update Orders Set XsDate = getdate(),XsEmployeeNO = '" + employeeno + "' where orderno = '" + orderno + "'";
            sql += "if exists(select 1 from OrdersSub where OrderNO = '" + orderno + "') ";
            sql += "Update OrdersSub set XsEmployeeName='" + employeeName + "' where OrderNO = '" + orderno + "' ";
            sql += "else ";
            sql += "Insert into OrdersSub (OrderNO, XsEmployeeName) values ('" + orderno + "','" + employeeName + "') ";
            return ExecuteSql(sql);
        }

        /// <summary>
        /// 查询设计订单产品
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchDesignProcess(string sql)
        {
            string sSql = "select * from (select x.EmployeeName as xsemployeename,h.EmployeeName as hcemployeename,PackDate,o.OrderNO, CustomerName1, MobilePhone1, CustomerName2, MobilePhone2, o.OrderSuitePrice, o.ImageCount, o.PreShootDateN, ShootAddressNON, o.ShootAddressN, ShootEmployeeNameN,case DesignType when '全设计看样' then dateadd(dd,-2,o.PreChooseDate) when '看设计版' then dateadd(dd,-7,o.PreLookDate) when '正常' then dateadd(dd,-30,o.PreGetGoodsDate) end as a,case DesignType when '全设计看样' then o.ChooseAddress when '看设计版' then o.LookAddress when '正常' then GetGoodsAddrress end as b,case DesignType when '全设计看样' then ChooseEmployeeName when '看设计版' then LookEmployeeName when '正常' then GetGoodsEmployeeName end as c,o.PreGetGoodsDate,o.PreLookDate, OrderIndex, SeparateNO, ProductNO, ProductTypeName, ProductName, (ProductSizeA +'x'+ ProductSizeB) as ProductSize, PageQuantity, NegativeQuantity, ChooseNegativeQuantity, ProductQuantity, ProductMemory, ProduceState, PRI, DesignType, DesignState, Department1, Employee1, Date1, Department2, Employee2, Date2, o.ImagePath, o.ImageXSPath, o.ImageSJPath, v.XSEmployeeNO, v.XSDate, v.XSCheckEmployeeNO, XSCheckDate, HCEmployeeNO, HCDate, HCCheckEmployeeNO, HCCheckDate, AllDesignEmployeeNO, AllDesignDate, AllDesignCheckEmployeeNO, AllDesignCheckDate, TMemory from VIEW_DesignProcess v left outer join Employee x on v.XSEmployeeNO=x.EmployeeNO left outer join Employee h on v.HCEmployeeNO=h.EmployeeNO left join Orders o on v.OrderNO=o.OrderNO) as VIEW_DesignProcess where ProduceState='正常' " + sql + " order by PRI desc ,PreGetGoodsDate asc, a, OrderNO, OrderIndex, SeparateNO ";//update by wujianbo 20120303 修正排序,增加取件时间字段
            //update by wujianbo 20120505 改为join连接表
            return ExecuteDataSet(sSql, "VIEW_DesignProcess");
        }

        /// <summary>
        /// add by wujianbo 20121017 查询设计产品（校色）
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchDesignProcess(string sql, string orderBySql)
        {
            string sSql = "select * from (select x.EmployeeName as xsemployeename,h.EmployeeName as hcemployeename,PackDate,o.OrderNO, CustomerName1, MobilePhone1, CustomerName2, MobilePhone2, o.OrderSuitePrice, o.ImageCount, o.PreShootDateN, ShootAddressNON, o.ShootAddressN, ShootEmployeeNameN,case DesignType when '全设计看样' then dateadd(dd,-2,o.PreChooseDate) when '看设计版' then dateadd(dd,-7,o.PreLookDate) when '正常' then dateadd(dd,-30,o.PreGetGoodsDate) end as a,case DesignType when '全设计看样' then o.ChooseAddress when '看设计版' then o.LookAddress when '正常' then GetGoodsAddrress end as b,case DesignType when '全设计看样' then ChooseEmployeeName when '看设计版' then LookEmployeeName when '正常' then GetGoodsEmployeeName end as c,o.PreGetGoodsDate,o.PreLookDate, OrderIndex, SeparateNO, ProductNO, ProductTypeName, ProductName, (ProductSizeA +'x'+ ProductSizeB) as ProductSize, PageQuantity, NegativeQuantity, ChooseNegativeQuantity, ProductQuantity, ProductMemory, ProduceState, PRI, DesignType, DesignState, Department1, Employee1, Date1, Department2, Employee2, Date2, o.ImagePath, o.ImageXSPath, o.ImageSJPath, v.XSEmployeeNO, v.XSDate, XSCheckEmployeeNO, XSCheckDate, HCEmployeeNO, HCDate, HCCheckEmployeeNO, HCCheckDate, AllDesignEmployeeNO, AllDesignDate, AllDesignCheckEmployeeNO, AllDesignCheckDate, TMemory from VIEW_DesignProcess v left outer join Employee x on v.XSEmployeeNO=x.EmployeeNO left outer join Employee h on v.HCEmployeeNO=h.EmployeeNO left join Orders o on v.OrderNO=o.OrderNO) as VIEW_DesignProcess where ProduceState='正常' " + sql + orderBySql;//update by wujianbo 20120303 修正排序,增加取件时间字段
            //update by wujianbo 20120505 改为join连接表
            return ExecuteDataSet(sSql, "VIEW_DesignProcess");
        }


        public DataSet SeachDesignProcessOrderInfo(string where)
        {
            string sql = "select distinct d.PRI,d.DesignType,o.OrderNo,SuiteName,OrderSuitePrice,CustomerName1,CustomerName2,MarryDate2,ImageCount,o.ShootAddressN,o.ShootMemoryN,ChooseAddress,LookAddress,PreLookDate,LookMemory,PreGetGoodsDate,o.OrderMemory from VIEW_Orders o left join DesignProcess d on o.OrderNO = d.OrderNO where o.OrderNO in ( " + where + " )";
            return ExecuteDataSet(sql, "GetDesignProcessOrderInfo");
        }

        /// <summary>
        /// add by gty 20141029
        /// 简化的查询设计信息
        /// </summary>
        /// <param name="sqlWhere"></param>
        /// <returns></returns>
        /// 
        [WebMethod]
        public DataSet GetDesignProcess(string sqlWhere)
        {
            StringBuilder sbSql = new StringBuilder();
            sbSql.Append("SELECT  dp.TMemory ,dp.PRI ,dp.DesignType ,dp.OrderNO ,cst.CustomerName1 ,cst.MobilePhone1 ,cst.CustomerName2 ,cst.MobilePhone2 ,");
            sbSql.Append(" dp.DesignState ,dp.Department2 ,dp.Employee2 ,dp.Date2 ,dp.Department1 ,dp.Employee1 ,dp.Date1 ,dp.ProductNO ,dp.SeparateNO , dp.OrderIndex ,");
            sbSql.Append(" prd.ProductName ,dp.TMemory ,dp.hcemployeeno ,dp.hcdate ,dp.xsemployeeno ,dp.xsdate ,CASE DesignType WHEN '全设计看样' THEN DATEADD(dd, -2, ord.PreChooseDate)");
            sbSql.Append(" WHEN '看设计版' THEN DATEADD(dd, -7, ord.PreLookDate) WHEN '全设计看版' THEN DATEADD(dd, -7, ord.PreLookDate) WHEN '正常' THEN DATEADD(dd, -30, ord.PreGetGoodsDate) END AS a ,hemp.EmployeeName AS HCEmployeeName ,");
            sbSql.Append(" xemp.EmployeeName AS XSEmployeeName ,ord.PreLookDate ,ord.PreGetGoodsDate ,ord.ImagePath ,ord.ImageSJPath ,ord.ImageXSPath");
            sbSql.Append(" FROM    DesignProcess dp LEFT OUTER JOIN Employee hemp ON dp.HCEmployeeNO = hemp.EmployeeNO LEFT OUTER JOIN Employee xemp ON dp.XSEmployeeNO = xemp.EmployeeNO");
            sbSql.Append(" INNER JOIN Orders ord ON dp.OrderNO = ord.OrderNO LEFT OUTER JOIN Customers cst ON ord.CustomerNO = cst.CustomerNO");
            sbSql.Append(" INNER JOIN Products prd ON dp.ProductNO = prd.ProductNO");
            sbSql.Append(" WHERE   1 = 1");
            sbSql.Append(sqlWhere);
            //sbSql.Append(" order by dp.PRI desc,a,dp.OrderNO ");
            return ExecuteDataSet(sbSql.ToString(), "GetDesignProcess");
        }

        /// <summary>
        /// 查询设计质检订单
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchDesignCheckProcess(string sql)
        {
            string sSql = "select distinct * from (select OrderNO, CustomerName1, MobilePhone1, CustomerName2, MobilePhone2, OrderSuitePrice, ImageCount, PreShootDateN, ShootAddressNON, ShootAddressN, ShootEmployeeNameN,case DesignType when '全设计看样' then dateadd(dd,-2,PreChooseDate) when '看设计版' then dateadd(dd,-7,PreLookDate) when '正常' then dateadd(dd,-30,PreGetGoodsDate) end as a,case DesignType when '全设计看样' then ChooseAddress when '看设计版' then LookAddress when '正常' then GetGoodsAddrress end as b,case DesignType when '全设计看样' then ChooseEmployeeName when '看设计版' then LookEmployeeName when '正常' then GetGoodsEmployeeName end as c,PRI, DesignType, DesignState, Department1, Employee1, Date1, Department2, Employee2, Date2,ProduceState from VIEW_DesignProcess) as VIEW_DesignProcess where ProduceState='正常' " + sql + " order by PRI desc, a, OrderNO ";
            return ExecuteDataSet(sSql, "VIEW_DesignProcess");
        }

        /// <summary>
        /// 设计统计
        /// </summary>
        /// <param name="DesignType">统计类别：XS/HC/AllDesign</param>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet DesignProcessCount(string DesignType, string sql)
        {
            string sSql = "select distinct a." + DesignType + "EmployeeNO as 员工编号,a.EmployeeName as 员工姓名,a.OrderCount as 订单数量,b.NegativeQuantityCount as 底数,c.NegativeQuantityPFCount as 平方底数,d.PageQuantityCount as 对页,e.PageQuantityPFCount as 平方对页 from " +
                            "(select " + DesignType + "EmployeeName as EmployeeName," + DesignType + "EmployeeNO,count(distinct OrderNO) as OrderCount from VIEW_DesignProcessCount where 1=1 " + sql + " group by " + DesignType + "EmployeeName," + DesignType + "EmployeeNO) " +
                            "as a inner join " +
                            "(select " + DesignType + "EmployeeNO,sum(NegativeQuantity) as NegativeQuantityCount from VIEW_DesignProcessCount where 1=1 " + sql + " group by " + DesignType + "EmployeeNO) " +
                            "as b on a." + DesignType + "EmployeeNO=b." + DesignType + "EmployeeNO inner join " +
                            "(select " + DesignType + "EmployeeNO,sum(NegativeQuantity*convert(float,ProductSizeA)*convert(float,ProductSizeB)*0.0254*0.0254) as NegativeQuantityPFCount from VIEW_DesignProcessCount where 1=1 " + sql + " group by " + DesignType + "EmployeeNO) " +
                            "as c on a." + DesignType + "EmployeeNO=c." + DesignType + "EmployeeNO inner join " +
                            "(select " + DesignType + "EmployeeNO,sum(PageQuantity) as PageQuantityCount from VIEW_DesignProcessCount where 1=1 " + sql + " group by " + DesignType + "EmployeeNO) " +
                            "as d on a." + DesignType + "EmployeeNO=d." + DesignType + "EmployeeNO inner join " +
                            "(select " + DesignType + "EmployeeNO,sum(PageQuantity*convert(float,ProductSizeA)*convert(float,ProductSizeB)*0.0254*0.0254) as PageQuantityPFCount from VIEW_DesignProcessCount where 1=1 " + sql + " group by " + DesignType + "EmployeeNO) " +
                            "as e on a." + DesignType + "EmployeeNO=e." + DesignType + "EmployeeNO ";
            return ExecuteDataSet(sSql, "DesignProcessCount");
        }

        /// <summary>
        /// 生产打包-顾客订单信息
        /// </summary>
        /// <param name="sql"></param>
        [WebMethod]
        public string DownloadOrderXML(string sql, string sCompanyBM)
        {
            string str = "";

            try
            {
                string sSql = "select * from (SELECT dbo.Orders.OrderNO, case when dbo.Cash.CustomerName<>'' and dbo.Cash.CustomerName is not null then dbo.Cash.CustomerName when dbo.Customers.CustomerName2<>'' and dbo.Customers.CustomerName2 is not null then dbo.Customers.CustomerName2 else dbo.Customers.CustomerName1 end as CustomerName, dbo.Orders.FPH, dbo.Orders.PreGetGoodsDate, dbo.Orders.ImageCount, SUM(dbo.CashDetail.CashNumber) AS TotalCash, dbo.Orders.OrderDate FROM dbo.CashDetail INNER JOIN dbo.CashSub ON dbo.CashDetail.CashNO = dbo.CashSub.CashNO INNER JOIN dbo.Cash ON dbo.CashSub.OrderNO = dbo.Cash.OrderNO RIGHT OUTER JOIN dbo.Customers INNER JOIN dbo.Orders ON dbo.Customers.CustomerNO = dbo.Orders.CustomerNO ON dbo.Cash.OrderNO = dbo.Orders.OrderNO GROUP BY dbo.Orders.OrderNO, dbo.Cash.CustomerName, dbo.Customers.CustomerName1, dbo.Customers.CustomerName2, dbo.Orders.FPH, dbo.Orders.PreGetGoodsDate, dbo.Orders.ImageCount, dbo.Orders.OrderDate) as OrderXML where 1=1 " + sql;
                DataSet myds = ExecuteDataSet(sSql, "OrderXML");
                if (myds.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; myds.Tables[0].Rows.Count > i; i++)
                    {
                        DataRow row = myds.Tables[0].Rows[i];
                        string orderNO = row["OrderNO"].ToString();
                        string fph = orderNO.Substring(orderNO.Length - 6);//update by wujianbo 20120712 取订单号后六位为发票号
                        if (row["OrderNO"].ToString() != null)
                        {
                            string str4 = str;
                            str = str + "<OrderNO>" + row["OrderNO"].ToString() + "</OrderNO>";
                            //str = str + "<FPH>" + row["FPH"].ToString() + "</FPH>";
                            str = str + "<FPH>" + fph + "</FPH>";//update by wujianbo 20120712
                            str = str + "<CustomerName>" + row["CustomerName"].ToString() + "</CustomerName>";
                            //str = str + "<CustomerMemory>" + row["CustomerMemory"].ToString() + "</CustomerMemory>";//暂时不需要
                            str = str + "<PreGetGoodsDate>" + row["PreGetGoodsDate"].ToString() + "</PreGetGoodsDate>";
                            str = str + "<OrderDate>" + row["OrderDate"].ToString() + "</OrderDate>";
                            str = str + "<ImageCount>" + row["ImageCount"].ToString() + "</ImageCount>";
                            str = str + "<TotalCash>" + row["TotalCash"].ToString() + "</TotalCash>";
                            str = str + "<CompanyBM>" + sCompanyBM + "</CompanyBM>";
                            str4 = str;
                        }
                    }
                }
                return ("<?xml version=\"1.0\" standalone=\"yes\" ?><NewDataSet><用户订单信息>" + str + "</用户订单信息></NewDataSet>");
            }
            catch (Exception)
            {
                return ("<ConfigType><用户订单信息>" + str + "</用户订单信息></ConfigType>");
            }
        }

        /// <summary>
        /// 订单信息传输后期数据库
        /// </summary>
        /// <param name="sql"></param>
        /// <param name="CompanyBM"></param>
        /// <returns></returns>
        public bool OrderInfoForBackData(string sql, string CompanyBM)
        {
            string sCompanyBM = CompanyBM;
            string sCreateTime = DateTime.Now.ToString();
            string sIsDelete = "00";
            string sWorkAddress = "1";
            string sNull = "";
            string sSendWay = "网络";
            string sOrderLevel = "";
            string sPriority = "0";
            string sEmployeeID = "S6019";
            try
            {
                string sSql = "select * from (SELECT dbo.Orders.OrderNO, case when dbo.Cash.CustomerName<>'' and dbo.Cash.CustomerName is not null then dbo.Cash.CustomerName when dbo.Customers.CustomerName2<>'' and dbo.Customers.CustomerName2 is not null then dbo.Customers.CustomerName2 else dbo.Customers.CustomerName1 end as CustomerName, dbo.Orders.FPH, dbo.Orders.PreGetGoodsDate, dbo.Orders.ImageCount, SUM(dbo.CashDetail.CashNumber) AS TotalCash, dbo.Orders.OrderDate FROM dbo.CashDetail INNER JOIN dbo.CashSub ON dbo.CashDetail.CashNO = dbo.CashSub.CashNO INNER JOIN dbo.Cash ON dbo.CashSub.OrderNO = dbo.Cash.OrderNO RIGHT OUTER JOIN dbo.Customers INNER JOIN dbo.Orders ON dbo.Customers.CustomerNO = dbo.Orders.CustomerNO ON dbo.Cash.OrderNO = dbo.Orders.OrderNO GROUP BY dbo.Orders.OrderNO, dbo.Cash.CustomerName, dbo.Customers.CustomerName1, dbo.Customers.CustomerName2, dbo.Orders.FPH, dbo.Orders.PreGetGoodsDate, dbo.Orders.ImageCount, dbo.Orders.OrderDate) as OrderXML where 1=1 " + sql;
                DataSet myds = ExecuteDataSet(sSql, "OrderXML");
                if (myds.Tables[0].Rows.Count > 0)
                {
                    string backSql = "";
                    for (int i = 0; myds.Tables[0].Rows.Count > i; i++)
                    {
                        DataRow row = myds.Tables[0].Rows[i];
                        string orderNO = row["OrderNO"].ToString();
                        string fph = orderNO.Substring(orderNO.Length - 6);
                        if (row["OrderNO"].ToString() != null)
                        {
                            string sorderNO = row["OrderNO"].ToString();
                            string sFPH = fph;
                            string sCustomerName = row["CustomerName"].ToString();
                            string sImageCount = row["ImageCount"].ToString();
                            string sPreGetGoodsDate = row["PreGetGoodsDate"].ToString();
                            string sTotalCash = row["TotalCash"].ToString();

                            backSql = "insert into Orders(OrderNO,CompanyID,Customer,Phone,Email,FPH,Files,Path1,Path2,Path3,SendWay,OrderMemory,OrderDate,OrderEmployeeID,OrderEmployeeName,GetGoodsDate,IsDelete,WorkAddress,TotalCash,Priority,OrderLevel) values ('" + sorderNO + "','" + sCompanyBM + "','" + sCustomerName + "','" + sNull + "','" + sNull + "','" + sFPH + "','" + sImageCount + "','" + sNull + "','" + sNull + "','" + sNull + "','" + sSendWay + "','" + sNull + "','" + sCreateTime + "','" + sEmployeeID + "','" + sNull + "','" + sPreGetGoodsDate + "','" + sIsDelete + "','" + sWorkAddress + "','" + sTotalCash + "','" + sPriority + "','" + sOrderLevel + "')";


                        }
                    }
                    GoldenLadyWS.SqlHelper.ExecuteNonQuery(GoldenLadyWS.SqlHelper.PMS_ConStr, CommandType.Text, backSql);
                }
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }

        /// <summary>
        /// 生产打包-顾客订单产品信息
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sOrderIndex"></param>
        /// <param name="sSeparateNO"></param>
        /// <returns></returns>
        [WebMethod]
        public string DownloadOrderProductsXML(string sOrderNO, string[] sOrderIndex, string[] sSeparateNO, List<string> lstDownloadedProducts)
        {
            string str = "";

            try
            {
                string sSql = @"SELECT  distinct dbo.Orders.OrderNO, dbo.Orders.OrderDate, dbo.OrderProducts.OrderIndex, dbo.OrderProducts.SeparateNO, dbo.Products.ProductSizeA, dbo.Products.ProductSizeB, 
                      dbo.OrderProducts.PageQuantity, dbo.OrderProducts.NegativeQuantity, dbo.OrderProducts.ProductQuantity, dbo.OrderProducts.ProduceState, 
                      dbo.OrderProducts.PreGetGoodsDate, dbo.Products.ProductName, dbo.OrderProducts.InsidePage, dbo.OrderProducts.Fram, dbo.OrderProducts.Box, 
                      dbo.OrderProducts.Unit, dbo.OrderProducts.Paper, dbo.OrderProducts.film, dbo.OrderProducts.Biao, dbo.OrderProducts.Ban, dbo.OrderProducts.Diao, 
                      dbo.Products.ProductCostPrice, dbo.Products.BackProductTypeNO, dbo.Products.ProductNO, dbo.Products.BackProductNO, dbo.OrderProducts.ProductMemory, 
                      dbo.Element.ElementName,dbo.OrderProducts.ParentProductNO,dbo.OrderProducts.ProductElement
FROM         dbo.Orders INNER JOIN
                      dbo.OrderProducts ON dbo.Orders.OrderNO = dbo.OrderProducts.OrderNO INNER JOIN
                      dbo.Products ON dbo.OrderProducts.ProductNO = dbo.Products.ProductNO LEFT OUTER JOIN
                      dbo.Element ON dbo.OrderProducts.GetGoodsAddress = dbo.Element.ElementNO
WHERE     (1 = 1) AND (dbo.OrderProducts.ProduceState = '正常') and Orders.OrderNO='" + sOrderNO + "' and (1<>1 ";
                for (int i = 0; i < sOrderIndex.Length; i++)
                {
                    for (int j = 0; j < lstDownloadedProducts.Count; j++)//udpate by wujianbo 20120410 产品xml表里只存放已生产打包的产品，提前取的产品不再放入其中
                    {
                        if (sOrderIndex[i] == lstDownloadedProducts[j])
                        {
                            sSql += "or (dbo.OrderProducts.OrderIndex='" + sOrderIndex[i] + "' and dbo.OrderProducts.SeparateNO='" + sSeparateNO[i] + "') ";
                        }
                    }
                }
                sSql += ") ";
                DataSet myds = ExecuteDataSet(sSql, "订单后期产品图片");
                if (myds.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; myds.Tables[0].Rows.Count > i; i++)
                    {
                        DataRow row = myds.Tables[0].Rows[i];
                        if (row["OrderNO"].ToString() != null)
                        {
                            string parentProductName = null;
                            string sTmpProductName = row["ProductName"].ToString();// 产品名称
                            if (sTmpProductName.Contains("FM") || sTmpProductName.Contains("FD"))//判断是FM或FD
                            {
                                string parentProductNO = row["ParentProductNO"].ToString();
                                DataRow[] tmpRows = myds.Tables[0].Select("OrderIndex='" + parentProductNO + "'");
                                if (tmpRows.Length > 0)
                                {
                                    parentProductName = tmpRows[0]["ProductName"].ToString();
                                }
                            }
                            string str4 = str;
                            str = str + "<订单产品信息>";
                            str = str + "<OrderNO>" + row["OrderNO"].ToString() + "</OrderNO>";
                            str = str + "<OrderIndex>" + row["OrderIndex"].ToString() + "</OrderIndex>";
                            str = str + "<SeparateNO>" + row["SeparateNO"].ToString() + "</SeparateNO>";
                            str = str + "<PageQuantity>" + row["PageQuantity"].ToString() + "</PageQuantity>";
                            str = str + "<NegativeQuantity>" + row["NegativeQuantity"].ToString() + "</NegativeQuantity>";
                            str = str + "<ProductQuantity>" + row["ProductQuantity"].ToString() + "</ProductQuantity>";
                            str = str + "<GetGoodsAddress>" + row["ElementName"].ToString() + "</GetGoodsAddress>";
                            str = str + "<InsidePage>" + row["InsidePage"].ToString() + "</InsidePage>";
                            str = str + "<ProductName>" + row["ProductName"].ToString() + "</ProductName>";
                            str = str + "<ProductSizeA>" + row["ProductSizeA"].ToString() + "</ProductSizeA>";
                            str = str + "<ProductSizeB>" + row["ProductSizeB"].ToString() + "</ProductSizeB>";
                            str = str + "<Fram>" + row["Fram"].ToString() + "</Fram>";
                            str = str + "<Biao>" + row["Biao"].ToString() + "</Biao>";
                            str = str + "<Ban>" + row["Ban"].ToString() + "</Ban>";
                            str = str + "<Diao>" + row["Diao"].ToString() + "</Diao>";
                            str = str + "<film>" + row["film"].ToString() + "</film>";
                            str = str + "<Paper>" + row["Paper"].ToString() + "</Paper>";
                            str = str + "<Unit>" + row["Unit"].ToString() + "</Unit>";
                            str = str + "<Box>" + row["Box"].ToString() + "</Box>";
                            str = str + "<ProductCostPrice>" + row["ProductCostPrice"].ToString() + "</ProductCostPrice>";
                            str = str + "<ProductMemory>" + row["ProductMemory"].ToString() + row["ProductElement"].ToString() + (string.IsNullOrEmpty(parentProductName) ? "" : "√" + parentProductName) + "</ProductMemory>";
                            str = str + "<BackProductTypeNO>" + row["BackProductTypeNO"].ToString() + "</BackProductTypeNO>";
                            str = str + "<BackProductNO>" + row["BackProductNO"].ToString() + "</BackProductNO>";
                            str = str + "<ProduceState>" + row["ProduceState"].ToString() + "</ProduceState>";
                            str = str + "<OrderDate>" + row["OrderDate"].ToString() + "</OrderDate>";
                            str = str + "<PreGetGoodsDate>" + row["PreGetGoodsDate"].ToString() + "</PreGetGoodsDate>";
                            str = str + "</订单产品信息>";
                            str4 = str;
                        }
                    }
                }
                return ("<?xml version=\"1.0\" standalone=\"yes\" ?><NewDataSet>" + str + "</NewDataSet>");
            }
            catch (Exception)
            {
                return ("<ConfigType><订单产品信息>" + str + "</订单产品信息></ConfigType>");
            }
        }

        /// <summary>
        /// 订单产品数据传输后期数据库
        /// </summary>
        /// <returns></returns>
        public bool OrderProductsForBackData(string sOrderNO, string[] sOrderIndex, string[] sSeparateNO, string rootPath, string[] productFolder, string CompanyBM)
        {
            try
            {
                string sSql = @"SELECT  distinct dbo.Orders.OrderNO, dbo.Orders.OrderDate, dbo.OrderProducts.OrderIndex, dbo.OrderProducts.SeparateNO, dbo.Products.ProductSizeA, dbo.Products.ProductSizeB, 
                      dbo.OrderProducts.PageQuantity, dbo.OrderProducts.NegativeQuantity, dbo.OrderProducts.ProductQuantity, dbo.OrderProducts.ProduceState, 
                      dbo.OrderProducts.PreGetGoodsDate, dbo.Products.ProductName, dbo.OrderProducts.InsidePage, dbo.OrderProducts.Fram, dbo.OrderProducts.Box, 
                      dbo.OrderProducts.Unit, dbo.OrderProducts.Paper, dbo.OrderProducts.film, dbo.OrderProducts.Biao, dbo.OrderProducts.Ban, dbo.OrderProducts.Diao, 
                      dbo.Products.ProductCostPrice, dbo.Products.BackProductTypeNO, dbo.Products.ProductNO, dbo.Products.BackProductNO, dbo.OrderProducts.ProductMemory, 
                      dbo.Element.ElementName,dbo.OrderProducts.ProductElement
FROM         dbo.Orders INNER JOIN
                      dbo.OrderProducts ON dbo.Orders.OrderNO = dbo.OrderProducts.OrderNO INNER JOIN
                      dbo.Products ON dbo.OrderProducts.ProductNO = dbo.Products.ProductNO LEFT OUTER JOIN
                      dbo.Element ON dbo.OrderProducts.GetGoodsAddress = dbo.Element.ElementNO
WHERE     (1 = 1) AND (dbo.OrderProducts.ProduceState = '正常') and Orders.OrderNO='" + sOrderNO + "' and (1<>1 ";
                for (int i = 0; i < sOrderIndex.Length; i++)
                {
                    sSql += " or (dbo.OrderProducts.OrderIndex='" + sOrderIndex[i] + "' and dbo.OrderProducts.SeparateNO='" + sSeparateNO[i] + "') ";
                }
                sSql += ") ";
                DataSet myds = ExecuteDataSet(sSql, "订单后期产品图片");

                int length = myds.Tables[0].Rows.Count;
                string[] sCompanyID = new string[length];
                string[] sOrderNo = new string[length];
                string[] sOrderindex = new string[length];
                string[] sSeparateOrder = new string[length];
                string[] sPageQuantity = new string[length];
                string[] sNegativeQuantity = new string[length];
                string[] sProductQuantity = new string[length];
                string[] sProduceState = new string[length];
                string[] sPreGetGoodsDate = new string[length];
                string[] sGetGoodsAddress = new string[length];
                string[] sInsidePage = new string[length];
                string[] sProductName = new string[length];
                string[] sProductSizeA = new string[length];
                string[] sProductSizeB = new string[length];
                string[] sBiao = new string[length];
                string[] sBan = new string[length];
                string[] sProductCostPrice = new string[length];
                string[] sDiao = new string[length];
                string[] sfilm = new string[length];
                string[] sPaper = new string[length];
                string[] sBox = new string[length];
                string[] sFram = new string[length];
                string[] sBackProductTypeNO = new string[length];
                string[] sBackProductNO = new string[length];
                string[] sProductMemory = new string[length];

                if (myds.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; myds.Tables[0].Rows.Count > i; i++)
                    {
                        DataRow row = myds.Tables[0].Rows[i];
                        string sMainProductName = null;

                        if (row["OrderNO"].ToString() != null)
                        {
                            string sTmpProductName = row["ProductName"].ToString();// 产品名称
                            if (sTmpProductName.Contains("FM") || sTmpProductName.Contains("FD"))//判断是FM或FD
                            {
                                //按“_”分组后取第一个
                                string mainProductNO = row["ProductNO"].ToString().Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)[0];
                                DataRow[] tmpRows = myds.Tables[0].Select("ProductNO='" + mainProductNO + "'");
                                if (tmpRows.Length > 0)
                                {
                                    sMainProductName = tmpRows[0]["ProductName"].ToString();
                                }
                            }
                            sCompanyID[i] = CompanyBM;
                            sOrderNo[i] = row["OrderNO"].ToString();
                            sOrderIndex[i] = row["OrderIndex"].ToString();
                            sSeparateOrder[i] = row["SeparateNO"].ToString();
                            sPageQuantity[i] = row["PageQuantity"].ToString();
                            sNegativeQuantity[i] = row["NegativeQuantity"].ToString();
                            sProductQuantity[i] = row["ProductQuantity"].ToString();
                            sProduceState[i] = row["ProduceState"].ToString();
                            sProductMemory[i] = row["ProductElement"].ToString() + row["ProductMemory"].ToString() + (string.IsNullOrEmpty(sMainProductName) ? "" : "√" + sMainProductName);
                            sInsidePage[i] = row["InsidePage"].ToString();
                            sProductName[i] = row["ProductName"].ToString();
                            sProductSizeA[i] = row["ProductSizeA"].ToString();
                            sProductSizeB[i] = row["ProductSizeB"].ToString();
                            sBiao[i] = row["Biao"].ToString();
                            sBan[i] = row["Ban"].ToString();
                            sProductCostPrice[i] = row["ProductCostPrice"].ToString();
                            sDiao[i] = row["Diao"].ToString();
                            sfilm[i] = row["film"].ToString();
                            sPaper[i] = row["BackProductNO"].ToString() == "XK_240" ? "System_01_13" : row["Paper"].ToString();
                            sBox[i] = row["Box"].ToString();
                            sFram[i] = row["Fram"].ToString();
                            sBackProductTypeNO[i] = row["BackProductTypeNO"].ToString();
                            sBackProductNO[i] = row["BackProductNO"].ToString();
                            sPreGetGoodsDate[i] = DateTime.Parse(row["PreGetGoodsDate"].ToString()).ToString();
                            sGetGoodsAddress[i] = row["ElementName"].ToString();
                        }
                    }
                    GoldenLadyWS.BackData.Insert_Products_all(sCompanyID, sOrderNo, sOrderIndex, sSeparateOrder, sPageQuantity, sNegativeQuantity, sProductQuantity, sProduceState, sPreGetGoodsDate, sGetGoodsAddress, sInsidePage, sProductName, sProductSizeA, sProductSizeB, sBiao, sBan, sProductCostPrice, sDiao, sfilm, sPaper, sBox, sFram, sBackProductTypeNO, sBackProductNO, sProductMemory, rootPath, productFolder);
                }
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
        public bool AddOrdersInfo_DD(string OrderNO, string CompanyID, string Customer, string FPH, int FileCount, string backPath, string OrderMemory, DateTime OrderDate, DateTime GetGoodsDate, string TotalCash)
        {
            return GoldenLadyWS.BackData.AddOrdersInfo_DD(OrderNO, CompanyID, Customer, FPH, FileCount, backPath, OrderMemory, OrderDate, GetGoodsDate, TotalCash);
        }
        /// <summary>
        /// 为true表示存在这个订单号的订单，false表示不存在
        /// </summary>
        /// <param name="OrderNO"></param>
        /// <returns></returns>
        public bool CheckBackOrderNO(string OrderNO)
        {
            DataSet ds = GoldenLadyWS.BackData.GetOrdersInfo_DR(OrderNO);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                return true;
            }
            return false;
        }

        #endregion

        #region 报表
        /// <summary>
        /// 订单数据分析
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet OrderDataAnalysis(string sql)
        {
            string sSql = "select Source,Suite,[Count]=count(*) from (select Source=CustomerSource,Suite=case when SuitePrice<=3000 then 'A - 3000以下' when SuitePrice>3000 and SuitePrice<=4500 then 'B - 3000-4500' when SuitePrice>4500 and SuitePrice<=6000 then 'C - 4500-6000' when SuitePrice>3000 then 'D - 6000以上' end from dbo.VIEW_Orders where 1=1 " + sql + " ) as a group by Source,Suite";
            return ExecuteDataSet(sSql, "OrderDataAnalysis");
        }

        /// <summary>
        /// 订单成交量
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet OrderCount(string sql)
        {
            string sSql = "select OrderDepartment, OrderEmployee,Orders=count(OrderNO), SuitePrice=sum(OrderSuitePrice) from VIEW_OrderCount where 1=1 " + sql + " group by OrderDepartment, OrderEmployee order by OrderDepartment, OrderEmployee,Orders,SuitePrice";
            return ExecuteDataSet(sSql, "OrderCount");
        }
        /// <summary>
        /// 订单成交量(--已修改-分类汇总--)
        /// updater njro
        /// updater datetime 2012-03-30
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet GetOrderCount(string sql)
        {
            string sSql = @"select 
                            case when GROUPING(OrderDepartment)=1 then '----总计----' 
                            else OrderDepartment end  OrderDepartment,
                            case when GROUPING(OrderEmployee)=1 and GROUPING(OrderDepartment)=0 then '---部门小计---' 
                            else OrderEmployee end  OrderEmployee,
                            Orders=count(OrderNO),
                            SuitePrice=sum(OrderSuitePrice) 
                            from VIEW_OrderCount where 1=1 "
                     + sql +
                     @"group by 
                       OrderDepartment, OrderEmployee 
                       with rollup";
            return ExecuteDataSet(sSql, "OrderCount");
        }


        /// <summary>
        /// 看样产品统计
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet ChooseProductsCount(string sql)
        {
            string sSql = "select ChooseAddress, ProductTypeName,ProductName,ProductSize=ProductSizeA+'*'+ProductSizeB, Products=sum(ProductQuantity),ChooseEmployee from VIEW_ChooseProductsCount where 1=1 " + sql + " group by ChooseAddress, ProductTypeName,ProductName,ProductSizeA,ProductSizeB,ChooseEmployee ";
            return ExecuteDataSet(sSql, "ChooseProductsCount");
        }

        /// <summary>
        /// 看样产品统计——新
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet ChooseProductCount_N(string sql)
        {
            string sSql = "SELECT      Department_1.DepartmentName AS ChooseDepartmentName, Employee_1.EmployeeName AS ChooseEmployeeName, " +
"                      dbo.Products.ProductName, COUNT(*) AS ProductCount " +
"FROM         dbo.Products INNER JOIN " +
"                      dbo.Department INNER JOIN " +
"                      dbo.Employee ON dbo.Department.DepartmentNO = dbo.Employee.DepartmentNO INNER JOIN " +
"                      dbo.Orders INNER JOIN " +
"                      dbo.OrderProducts ON dbo.Orders.OrderNO = dbo.OrderProducts.OrderNO ON dbo.Employee.EmployeeNO = dbo.OrderProducts.[Create] ON " +
"                      dbo.Products.ProductNO = dbo.OrderProducts.ProductNO INNER JOIN " +
"                      dbo.Element ON dbo.Department.DepartmentNO = dbo.Element.ElementNO LEFT OUTER JOIN " +
"                      dbo.Employee AS Employee_1 ON dbo.Orders.ChooseEmployeeNO = Employee_1.EmployeeNO LEFT OUTER JOIN " +
"                      dbo.Department AS Department_1 ON dbo.Orders.ChooseAddress = Department_1.DepartmentNO " +
"WHERE     dbo.OrderProducts.ProductNO not like '%_sub%' and (dbo.Element.ElementType = '看样地点') and dbo.OrderProducts.ProductNO not like '%_sub%' " + sql +
"GROUP BY dbo.Products.ProductTypeNO, dbo.Products.ProductName, Employee_1.EmployeeName, Department_1.DepartmentName " +
"ORDER BY ChooseDepartmentName, ChooseEmployeeName, dbo.Products.ProductTypeNO, dbo.Products.ProductName ";
            return ExecuteDataSet(sSql, "ChooseProductCount");
        }

        /// <summary>
        /// 看样产品统计——新[产品列]
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet ChooseProductCount_NN(string sql, string sProductName1, string sProductName2)
        {
            string sSql = "SELECT  distinct [ChooseDepartmentName],[ChooseEmployeeName],[ProductName] ,sum([ProductCount]) as ProductCount into #View_Temp FROM [ERP].[dbo].[View_Temp] where 1=1 " +
                sql + sProductName1 + " " +
                "group by [ChooseDepartmentName] ,[ChooseEmployeeName] ,[ProductName] " +
                "declare @s varchar(max) " +
                "set @s='' " +
                "Select     @s=@s+','+Replace(quotename([ProductName]),'*','x')+'=max(case when [ProductName]='+quotename([ProductName],'''')+' then [ProductCount] else 0 end)' " +
                "from #View_Temp where 1=1 " + sProductName1 + " group by [ProductName] " +
                "exec('select [ChooseDepartmentName] as 选片地点,[ChooseEmployeeName] as 看样人员'+@s+' from #View_Temp where 1=1 group by [ChooseDepartmentName],[ChooseEmployeeName] order by [ChooseDepartmentName],[ChooseEmployeeName]') " +
                "drop table #View_Temp ";
            return ExecuteDataSet(sSql, "ChooseProductCount");
        }
        /// <summary>
        /// 销售产品统计
        /// zjj2012-02-23
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SaleProductsCount(string sql)
        {
            string sSql = @"  SELECT DISTINCT 
                                  TOP (100) PERCENT dbo.OrderProducts.ProductNO AS 产品编号, dbo.Products.ProductName AS 产品名称, dbo.ProductType.ProductTypeName AS 产品类别, 
                                  SUM(dbo.OrderProducts.ProductQuantity) AS 销售数量
            FROM         dbo.Orders INNER JOIN
                                  dbo.OrderProducts ON dbo.Orders.OrderNO = dbo.OrderProducts.OrderNO INNER JOIN
                                  dbo.Products ON dbo.OrderProducts.ProductNO = dbo.Products.ProductNO INNER JOIN
                                  dbo.ProductType ON dbo.Products.ProductTypeNO = dbo.ProductType.ProductTypeNO
            WHERE     (1 = 1)  " + sql + "AND (dbo.OrderProducts.ProduceState = '正常') AND (dbo.Products.ProductNO NOT LIKE '%_sub%') AND (dbo.Orders.IsDelete = 0) AND (dbo.Orders.OrderState = 1) GROUP BY dbo.OrderProducts.ProductNO, dbo.Products.ProductName, dbo.ProductType.ProductTypeName ORDER BY 产品类别, 销售数量 DESC";
            //            string sSql = @"  SELECT  DISTINCT    dbo.Products.ProductNO  AS 产品编号,dbo.Products.ProductName  AS 产品名称,dbo.ProductType.ProductTypeName AS 产品类别,  SUM(dbo.OrderProducts.ProductQuantity) AS 销售数量 
            //FROM         dbo.Orders INNER JOIN
            //                      dbo.OrderProducts ON dbo.Orders.OrderNO = dbo.OrderProducts.OrderNO INNER JOIN
            //                      dbo.Products ON dbo.OrderProducts.ProductNO = dbo.Products.ProductNO INNER JOIN
            //                      dbo.ProductType ON dbo.Products.ProductTypeNO = dbo.ProductType.ProductTypeNO LEFT OUTER JOIN
            //                      dbo.RequireSub ON dbo.OrderProducts.Box = dbo.RequireSub.RequireNO
            //WHERE     (1 = 1)  " + sql + "AND (dbo.OrderProducts.ProduceState = '正常') AND (dbo.Products.ProductNO NOT LIKE '%_sub%') AND (dbo.Orders.IsDelete = 0) AND (dbo.Orders.OrderState = 1) GROUP BY dbo.ProductType.ProductTypeName, dbo.Products.ProductName, dbo.Products.ProductNO ORDER BY 产品类别, 销售数量 DESC";

            return ExecuteDataSet(sSql, "SaleProductCount");

        }




        /// <summary>
        /// 销售产品统计明细
        /// zjj2012-02-23
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SaleProductsDetails(string sql)
        {
            //            string sSql = @"SELECT DISTINCT 
            //                                  TOP (100) PERCENT dbo.OrderProducts.ProductNO AS 产品编号, dbo.Products.ProductName AS 产品名称, dbo.ProductType.ProductTypeName AS 产品类别, 
            //                                  SUM(dbo.OrderProducts.ProductQuantity) AS 销售数量, dbo.Orders.ChooseDate AS 选片时间, dbo.Orders.OrderNO AS 订单号, 
            //                                  dbo.Customers.CustomerName1 + ' ' + dbo.Customers.CustomerName2 AS 客户姓名, dbo.Customers.MobilePhone1 + ' ' + dbo.Customers.MobilePhone2 AS 联系电话, 
            //                                  dbo.Orders.PreGetGoodsDate AS 预约取件时间, dbo.OrderProducts.PreGetGoodsDate AS 实际取件时间, dbo.RequireSub.RequireValue as 包装项
            //            FROM         dbo.Orders INNER JOIN
            //                                  dbo.OrderProducts ON dbo.Orders.OrderNO = dbo.OrderProducts.OrderNO INNER JOIN
            //                                  dbo.Products ON dbo.OrderProducts.ProductNO = dbo.Products.ProductNO INNER JOIN
            //                                  dbo.ProductType ON dbo.Products.ProductTypeNO = dbo.ProductType.ProductTypeNO INNER JOIN
            //                                  dbo.Customers ON dbo.Orders.CustomerNO = dbo.Customers.CustomerNO INNER JOIN
            //                                  dbo.RequireSub ON dbo.OrderProducts.Box = dbo.RequireSub.RequireNO
            //            WHERE     (1 = 1)" + sql + " AND (dbo.OrderProducts.ProduceState = '正常') AND (dbo.Products.ProductNO NOT LIKE '%_sub%') AND (dbo.Orders.IsDelete = 0) AND (dbo.Orders.OrderState = 1) AND (dbo.Orders.ChooseDate <> '1900-01-01 00:00:00.000')   GROUP BY dbo.OrderProducts.ProductNO, dbo.Products.ProductName, dbo.ProductType.ProductTypeName, dbo.Orders.ChooseDate, dbo.Orders.OrderNO, dbo.Customers.CustomerName1, dbo.Customers.CustomerName2, dbo.Customers.MobilePhone1, dbo.Customers.MobilePhone2, dbo.Orders.PreGetGoodsDate,dbo.OrderProducts.PreGetGoodsDate,dbo.RequireSub.RequireValue ORDER BY 产品名称, 产品类别, 选片时间, 销售数量 DESC ";
            string sSql = @"SELECT  DISTINCT   dbo.Products.ProductNO  AS 产品编号,dbo.Products.ProductName AS 产品名称,dbo.ProductType.ProductTypeName AS 产品类别,SUM(dbo.OrderProducts.ProductQuantity) AS 销售数量,dbo.Orders.ChooseDate AS 选片时间, dbo.Orders.OrderNO AS 订单号,dbo.Customers.CustomerName1 + ' ' + dbo.Customers.CustomerName2 AS 客户姓名,  dbo.Customers.MobilePhone1 + ' ' + dbo.Customers.MobilePhone2 AS 联系电话, dbo.Orders.PreGetGoodsDate AS 预约取件时间,dbo.Orders.GetGoodsDate AS 实际取件时间,  case dbo.RequireSub.RequireID
  when '6' then dbo.RequireSub.RequireValue
  else '无' end as '包装项'
                                          
FROM         dbo.Orders INNER JOIN
                      dbo.OrderProducts ON dbo.Orders.OrderNO = dbo.OrderProducts.OrderNO INNER JOIN
                      dbo.Products ON dbo.OrderProducts.ProductNO = dbo.Products.ProductNO INNER JOIN
                      dbo.ProductType ON dbo.Products.ProductTypeNO = dbo.ProductType.ProductTypeNO INNER JOIN
                      dbo.Customers ON dbo.Orders.CustomerNO = dbo.Customers.CustomerNO LEFT OUTER JOIN
                      dbo.RequireSub ON dbo.OrderProducts.Box = dbo.RequireSub.RequireNO
WHERE     (1 = 1)" + sql + " AND (dbo.OrderProducts.ProduceState = '正常') AND (dbo.Products.ProductNO NOT LIKE '%_sub%') AND (dbo.Orders.IsDelete = 0) AND (dbo.Orders.OrderState = 1) AND (dbo.Orders.ChooseDate <> '1900-01-01 00:00:00.000')   GROUP BY dbo.Customers.CustomerName1, dbo.Customers.CustomerName2, dbo.ProductType.ProductTypeName, dbo.Products.ProductName, dbo.OrderProducts.Box, dbo.RequireSub.RequireValue, dbo.Products.ProductNO, dbo.Orders.OrderNO, dbo.Orders.ChooseDate, dbo.Orders.PreGetGoodsDate, dbo.Customers.MobilePhone1, dbo.Customers.MobilePhone2, dbo.Orders.GetGoodsDate, dbo.RequireSub.RequireID ORDER BY 产品名称, 产品类别, 选片时间, 销售数量 DESC ";
            return ExecuteDataSet(sSql, "SaleProductDetails");

        }
        /// <summary>
        ///  摄控排控量统计
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet ShootControlCount(string sql)
        {
            System.Text.StringBuilder strsql = new System.Text.StringBuilder();
            strsql.Append(@"SELECT DISTINCT dbo.OrderLogo.OrderNO, dbo.Config.ConfigValue, dbo.Employee.EmployeeName, dbo.OrderLogo.CreateDate
FROM         dbo.OrderLogo INNER JOIN
                      dbo.Config ON dbo.OrderLogo.Process = dbo.Config.ConfigNO INNER JOIN
                      dbo.Employee ON dbo.OrderLogo.[Create] = dbo.Employee.EmployeeNO2
WHERE     ((dbo.OrderLogo.Process = 'P_30') OR (dbo.OrderLogo.Process = 'P_31')) ");
            strsql.Append(sql);
            strsql.Append("ORDER BY dbo.Employee.EmployeeName");
            return ExecuteDataSet(strsql.ToString(), "OrderReport");
        }

        #region 一期报表
        /// <summary>
        /// 订单成交量
        /// </summary>
        /// <param name="Columns"></param>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet OrderTurnover(string Columns, string sql)
        {
            string sSql = "select " + Columns + ",OrderCount=Count(OrderNO),OrderCount_1=sum(OrderState) from VIEW_OrderTurnover a where 1=1 " + sql + " group by " + Columns + "";
            return ExecuteDataSet(sSql, "OrderTurnover");
        }
        #endregion

        #endregion

        #region 订单成交率
        /// <summary>
        /// 部门接单成交率
        /// creater njr
        /// create DateTime
        /// </summary>
        /// <param name="Columns"></param>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet DepartmentOrderTurnover(string sql)
        {
            string sSql = @"select 
                            DepartmentName,
                            OrderCount=Count(OrderNO),
                            OrderCount_1=sum(OrderState),
                            case when Count(OrderNO) = sum(OrderState) then '100%'  
                            else 
                            SUBSTRING ( CONVERT(varchar(20),(sum(cast(orderstate as decimal))/Count(OrderNO))*100),1,5)+'%' 
                            end as '成交率' 
                            from VIEW_OrderTurnover a 
                            where 1=1" + sql + @"
                            group by DepartmentName
UNION ALL
select '合计',Count(OrderNO) A,SUM(OrderState) b,'-----' from VIEW_OrderTurnover where 1=1  " + sql + @"";
            return ExecuteDataSet(sSql, "OrderTurnover");
        }
        /// <summary>
        /// 门市接单成交率
        /// creater njr
        /// create DateTime 2012-03-02
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet EmployeeOrderTurnover(string sql)
        {
            string sSql = @"select DepartmentName, 
                            EmployeeName,
                            OrderCount=Count(OrderNO),
                            OrderCount_1=sum(OrderState), 
                            case when Count(OrderNO) = sum(OrderState) then '100%'  
                            else 
                            SUBSTRING ( CONVERT(varchar(20),(sum(cast(orderstate as decimal))/Count(OrderNO))*100),1,5)+'%' 
                            end as '成交率'
                            from 
                            VIEW_OrderTurnover a where 1=1" + sql + @" 
                            group by DepartmentName, EmployeeName UNION ALL
select '合计','-----',Count(OrderNO),SUM(OrderState),case when Count(OrderNO) = sum(OrderState) then '100%'  
                            else 
                            SUBSTRING ( CONVERT(varchar(20),(sum(cast(orderstate as decimal))/Count(OrderNO))*100),1,5)+'%' 
                            end as '成交率' from VIEW_OrderTurnover a where 1=1" + sql;
            return ExecuteDataSet(sSql, "OrderTurnover");
        }

        /// <summary>
        /// 订单明细
        /// creater njr
        /// create DateTime 2012-03-02
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet OrderCountInfo(string sql)
        {
            string sSql = @"select DepartmentName, 
                            EmployeeName, OrderNO, 
                            CustomerName1, CustomerName2,
                            OrderDate 
                            from VIEW_OrderTurnover a 
                            where 1=1" + sql + @" 
                            group by 
                            DepartmentName, EmployeeName, OrderNO, CustomerName1, CustomerName2, OrderDate
                            order by DepartmentName";
            return ExecuteDataSet(sSql, "OrderTurnover");
        }


        #endregion

        #region 企划案
        /// <summary>
        /// 创建积分信息,并修改收银表中的推荐人
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sIntegralCard"></param>
        /// <param name="sIntegralCustomer"></param>
        /// <param name="sIntegralType"></param>
        /// <param name="sCreater"></param>
        /// <param name="sCreateDate"></param>
        /// <returns></returns>
        [WebMethod]
        public bool CreateIntegral(string sOrderNO, string sIntegralCard, string sIntegralCustomer, string sIntegralType, string sCreater, string sCreateDate)
        {
            string sSql = "if exists(select * from Integral where OrderNO='" + sOrderNO + "') Update Integral set IntegralType='" + sIntegralType + "' where OrderNO='" + sOrderNO + "' else Insert into Integral (OrderNO,BaseIntegral,UsedBaseIntegral,PresentIntegral,IntegralType,Creater,CreateDate) values ('" + sOrderNO + "',0,0,0,'" + sIntegralType + "','" + sCreater + "','" + sCreateDate + "') ";
            sSql += "Update Cash set IntroCardNO='" + sIntegralCard + "',IntroCustomerName='" + sIntegralCustomer + "' where OrderNO='" + sOrderNO + "' ";
            return ExecuteSql(sSql);
        }

        ///// <summary>
        ///// 积分汇总
        ///// </summary>
        ///// <param name="sql"></param>
        ///// <returns></returns>
        //[WebMethod]
        //public DataSet SearchIntegral(string sql)
        //{
        //    string sSql = "select distinct IndexNum=ROW_NUMBER() over(order by IntroCardNO),IntegralType,BusinessDepartment, IntroCardNO, IntroCustomerName, MobilePhone1 +' '+ MobilePhone2 as Phone, floor(TotalIntegral) as TotalIntegral,FreeIntegral from VIEW_SearchIntegral where 1=1 " + sql;
        //    return ExecuteDataSet(sSql, "SearchIntegral");
        //}

        /// <summary>
        /// 加载会员积分
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet LoadIntegral(string sql)
        {
            string sSql = "select OrderNO, IntroCardNO, IntroCustomerName, MobilePhone1 +' '+ MobilePhone2 as phone, IntegralType,BaseIntegral,UsedBaseIntegral, PresentIntegral, TotalIntegral, FreeIntegral, Memory, Creater, CreateDate from VIEW_Integral where 1=1 " + sql;
            return ExecuteDataSet(sSql, "Integral");
        }
        /// <summary>
        /// 作废积分项
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public bool RemoveIntegral(string sql, string memory, string creater)
        {
            string sSql = @"update Integral set Integral=0 ,Memory='" + memory + "',Creater='" + creater + "' where 1=1 " + sql;
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 加载会员积分明细
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet LoadIntegralDetail(string sql)
        {
            string sSql = "select  IndexNum=ROW_NUMBER() over(order by CashNO), OrderNO, CashNO, CustomerName, CustomerPhone as Phone, FPH, CashPretext, CashNumber, floor(CashNumber/2) as Integral, CashDate, State, ReceiptorDate, Receiptor, IdCardNO, ReceiptorMemory, Creater from VIEW_IntegralDetail where 1=1 " + sql;//*(case [State] when 1 then 0 when 0 then 1 end)
            return ExecuteDataSet(sSql, "IntegralDetail");
        }

        /// <summary>
        /// 增送积分
        /// </summary>
        /// <param name="sOrderNO">订单号</param>
        /// <param name="sPresentIntegral">增送积分</param>
        /// <param name="sMemory">备注</param>
        /// <param name="sCreater">创建人</param>
        /// <param name="sCreateDate">创建时间</param>
        /// <returns></returns>
        [WebMethod]
        public bool PresentIntegral(string sOrderNO, string sPresentIntegral, string sMemory, string sCreater, string sCreateDate)
        {
            string sSql = "if exists(select * from Integral where OrderNO='" + sOrderNO + "') Update Integral set PresentIntegral=isnull(PresentIntegral,0)+" + Int32.Parse(sPresentIntegral) + ",Memory=isnull(Memory,'')+'" + sMemory + "' where OrderNO='" + sOrderNO + "' else Insert into Integral (OrderNO,PresentIntegral,Memory,Creater,CreateDate) values ('" + sOrderNO + "','" + sPresentIntegral + "','" + sMemory + "','" + sCreater + "','" + sCreateDate + "') ";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 初始基础积分
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sBaseIntegral"></param>
        /// <param name="sCreater"></param>
        /// <param name="sCreateDate"></param>
        /// <returns></returns>
        [WebMethod]
        public bool BaseIntegral(string sOrderNO, string sBaseIntegral, string sCreater, string sCreateDate)
        {
            string sSql = "if exists(select * from Integral where OrderNO='" + sOrderNO + "') Update Integral set BaseIntegral=" + Int32.Parse(sBaseIntegral) + ",UsedBaseIntegral=0 where OrderNO='" + sOrderNO + "' else Insert into Integral (OrderNO,BaseIntegral,UsedBaseIntegral,Creater,CreateDate) values ('" + sOrderNO + "','" + sBaseIntegral + "',0,'" + sCreater + "','" + sCreateDate + "') ";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 使用基础积分
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UsedBaseIntegral(string sOrderNO)
        {
            string sSql = "Update Integral set UsedBaseIntegral=1 where OrderNO='" + sOrderNO + "' ";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 增加积分
        /// </summary>
        /// <param name="sIntegralType">积分卡类别:顾客积分卡/员工积分卡</param>
        /// <param name="sCardNO">积分卡卡号</param>
        /// <param name="sOrderNO">产生积分的订单号</param>
        /// <param name="sCashNO">产生积分的收银编号</param>
        /// <param name="sCashPretext">产生积分的收银事由</param>
        /// <param name="sCashNumber">产生积分的金额</param>
        /// <param name="sCreater">操作人</param>
        /// <param name="sCreateDate">操作时间</param>
        /// <param name="sState">类别:推荐人积分/自己积分/赠送积分</param>
        /// <returns></returns>
        [WebMethod]
        public bool SaveIntegral(string sIntegralType, string sCardNO, string sOrderNO, string sFPH, string sCashNO, string[] sCashPretext, string[] sCashNumber, string sCreater, string sCreateDate, string sState, string sCompanyBM, int isFrozen)
        {

            string sSql = "";
            for (int i = 0; i < sCashNumber.Length; i++)
            {
                decimal iIntegral = 0;
                //金夫人总店积分是消费的一半

                //if (sCompanyBM.ToUpper() == "LZ")
                //    iIntegral = decimal.Parse(sCashNumber[i]) / 2;
                //else

                //if (sCompanyBM.ToUpper() == "LZ")
                //    iIntegral = decimal.Parse(sCashNumber[i]) / 2;
                //else
                if (SelectUnIntegralList(sCashPretext[i]))
                {
                    iIntegral = decimal.Parse(sCashNumber[i]);
                    string sMemory = "系统/" + sCashNO + "/" + sFPH + "/" + sCashPretext[i] + "/" + sCashNumber[i];//系统/00000172/LZ5B170001001/婚纱预付/1000元
                    sSql += "Insert into Integral (IntegralType,CardNO,OrderNO,Integral,Memory,Creater,CreateDate,IsReceipt,ReceiptNO,IsFrozen) Values ('" + sIntegralType + "','" + sCardNO + "','" + sOrderNO + "'," + iIntegral.ToString() + ",'" + sMemory + "','" + sCreater + "','" + sCreateDate + "',0,'','" + isFrozen + "') ";
                }
                else

                    continue;
            }

            if (sState == "推荐人积分")
            {
                sSql += "Update CashDetail set IntroIntegral=1 where CashNO='" + sCashNO + "' ";
            }
            else if (sState == "自己积分")
            {
                sSql += "Update CashDetail set MyselfIntegral=1 where CashNO='" + sCashNO + "' ";
            }


            return ExecuteSql(sSql);
        }
        /// <summary>
        /// 根据订单号查询收银记录
        /// </summary>
        /// <param name="orderno"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet VIew_Cash(string orderno)
        {
            string str1 = "select VIEW_Cash.OrderNO ,Orders.OrderSuitePrice,ISNULL(CashNumber,0)as CashNumber from  VIEW_Cash ,Orders  where VIEW_Cash.OrderNO='" + orderno + "' and ( CashPretext like '%全款%'or CashPretext like '%补款%' or CashPretext like '%预付%') and  VIEW_Cash.OrderNO=Orders.OrderNO ";
            // string str1 = "select OrderNO ,ISNULL(SuitePrice,0)as SuitePrice,ISNULL(CashNumber,0)as CashNumber from  VIEW_Cash   where OrderNO='" + orderno + "' and ( CashPretext like '%全款%'or CashPretext like '%补款%' or CashPretext like '%预付%')";
            return ExecuteDataSet(str1, "VIEW_Cash");
        }
        [WebMethod]
        public string Search_SuitePrice(string OrderNO)
        {
            string orderNO = "";
            string sql = "select SuitePrice  from  Orders where OrderNO='" + OrderNO + "' ";
            DataSet myds = ExecuteDataSet(sql, "Orders");
            if (myds.Tables[0].Rows.Count > 0)
            {
                orderNO = myds.Tables[0].Rows[0]["SuitePrice"].ToString();
            }
            return orderNO;
        }
        [WebMethod]
        public DataSet Search_OrdernoCashCashSUN(string orderNO)
        {
            string sql = @"SELECT     dbo.Orders.OrderNO, dbo.Orders.SuitePrice, dbo.CashDetail.CashNumber, dbo.Config.ConfigValue
FROM         dbo.Orders INNER JOIN
                      dbo.CashSub ON dbo.Orders.OrderNO = dbo.CashSub.OrderNO INNER JOIN
                      dbo.CashDetail ON dbo.CashSub.CashNO = dbo.CashDetail.CashNO INNER JOIN
                      dbo.Config ON dbo.CashDetail.CashPretext = dbo.Config.ConfigNO where  ( dbo.Config.ConfigValue like '%全款%'or dbo.Config.ConfigValue like '%补款%' or dbo.Config.ConfigValue like '%预付%') and dbo.Orders.OrderNO='" + orderNO + "'";
            return ExecuteDataSet(sql, "OrderNO");
        }
        /// <summary>
        /// 激活积分
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateIntegral(string sql)
        {
            string str1 = "update Integral set IsFrozen=0 where IsFrozen=1 and 1=1 " + sql;
            return ExecuteSql(str1);

        }
        /// <summary>
        /// 根据订单号查询介绍卡下面的订单号
        /// </summary>
        /// <param name="ordernor"></param>
        /// <param name="Casdno"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchOrderNoByIntroCardNO(string ordernor, string Casdno)
        {
            string str1 = "select distinct  OrderNO from Integral  where OrderNO<>'" + ordernor + "'and CardNO= '" + Casdno + "'";
            return ExecuteDataSet(str1, "VIEW");
        }
        /// <summary>
        /// 查询积分-顾客
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchIntegral(string sql)
        {
            string sSql = "select distinct SpendIntegral, CardNO as IntegralCardNO, (CustomerName1 +' '+ CustomerName2) as IntegralCustomerName, (MobilePhone1 +' '+ MobilePhone2) as IntegralMobilePhone, TotalIntegral, FreeIntegral,FrozenIntegral From VIEW_Integral where 1=1 " + sql;
            return ExecuteDataSet(sSql, "integral");
        }


        /// <summary>
        /// 查询冻结积分
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public string SearchFrozenIngegral(string sql)
        {
            string sSql = "select ISNULL(sum(ISNULL(dbo.Integral.Integral,0)),0)as FrozenIntegral from Integral where isFrozen=1 " + sql;
            return ExecuteSqlToString(sSql);
        }

        /// <summary>
        /// 查询积分-员工
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchIntegralEmployee(string sql)
        {
            // SpendIntegral  OrderDepartment
            string sSql = "select distinct SpendIntegral, CardNO as IntegralCardNO, (CustomerName1 +' '+ CustomerName2) as IntegralCustomerName, (MobilePhone1 +' '+ MobilePhone2) as IntegralMobilePhone, TotalIntegral, FreeIntegral From VIEW_IntegralEmployee where 1=1 " + sql;
            return ExecuteDataSet(sSql, "VIEW_IntegralEmployee");




        }

        /// <summary>
        /// 查询积分明细
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchIntegralDetail(string sql)
        {
            //"select  IndexNum=ROW_NUMBER() over(order by CashNO), OrderNO, CashNO, CustomerName, CustomerPhone as Phone, FPH, CashPretext, CashNumber, floor(CashNumber/2) as Integral, CashDate, State, ReceiptorDate, Receiptor, IdCardNO, ReceiptorMemory, Creater from VIEW_IntegralDetail where 1=1 "
            string sSql = "select IndexNum=ROW_NUMBER() over(order by CardNO), ID,CardNO, OrderNO,  (CustomerName1 +' '+ CustomerName2) as CustomerName, (MobilePhone1 +' '+ MobilePhone2) as CustomerPhone, Integral, Memory, IsReceipt,IsFrozen, Creater, CreateDate from VIEW_IntegralDetail where 1=1 " + sql + " Order by CardNO,OrderNO";
            return ExecuteDataSet(sSql, "VIEW_IntegralDetail");
        }

        /// <summary>
        /// 领取积分
        /// </summary>
        /// <param name="sID">积分表编号</param>
        /// <param name="sReceiptNO">领取编号</param>
        /// <param name="sReceiptorWay1">领取方式1</param>
        /// <param name="sReceiptorWay2">领取方式2</param>
        /// <param name="sReceiptorNumber">领取数量</param>
        /// <param name="sReceiptorMemory">领取备注</param>
        /// <param name="sReceiptorDate">领取件日期</param>
        /// <param name="sReceiptor">领取人</param>
        /// <param name="sCreater">经办人</param>
        /// <returns></returns>
        [WebMethod]
        public bool UseIntegral(string sIntegralType, string sCardNO, string sIntegral, string sReceiptorWay1, string sReceiptorWay2, string sReceiptorNumber, string sReceiptorMemory, string sReceiptorDate, string sReceiptor, string sCreater)
        {
            string sSql = "";
            //string sMemory = "领取积分/领取方式:" + sReceiptorWay1 + "/领取内容:" + sReceiptorWay2 + "/领取:" + sReceiptorNumber + "/" + sReceiptorMemory + "/领取人:" + sReceiptor;
            string sMemory = "领取积分/领取方式:" + sReceiptorWay1 + "/领取内容:" + sReceiptorWay2 + "/领取:" + sIntegral + "/" + sReceiptorMemory + "/领取人:" + sReceiptor;
            sSql += "Insert into Integral (IntegralType,CardNO,OrderNO,Integral,Memory,Creater,CreateDate,IsReceipt,ReceiptNO) Values ('" + sIntegralType + "','" + sCardNO + "','','-" + sIntegral + "','" + sMemory + "','" + sCreater + "','" + sReceiptorDate + "',1,'') ";
            //for (int i = 0; i < sID.Length; i++)
            //    sSql += "Update Integral set IsReceipt=1 where ID='" + sID[i] + "' ";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 删除使用积分记录
        /// </summary>
        /// <param name="sID">积分表编号</param>
        /// <param name="sSubID">积分领取表编号</param>
        /// <returns></returns>
        [WebMethod]
        public bool DeleteIntegralRecord(string[] sID, string[] sSubID)
        {
            string sSql = "";
            for (int i = 0; i < sSubID.Length; i++)
            {
                sSql += "Delete ReceiptIntegral where ID='" + sSubID[i] + "' ";
                sSql += "Update Integral set ReceiptNO='',IsReceipt=0 where ID='" + sID[i] + "' ";
            }
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 检查积分
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public DataSet CheckIntegral(string sql)
        {
            string sSql = "select distinct OrderNO, CustomerName, CustomerPhone, IntroCardNO, IntroCustomerName, SuitePrice, CashNO, FPH, BusinessDepartment, BusinessEmployeeName, BusinessPoint, CashMemory, Size, Number, Unit, CashPretext, CashNumber=sum(CashNumber), CashEmployeeName, CashDate, CreateEmployeeName, CreateDate, IsPrint, CashState,IntroType, Integral, IntroIntegral, MyselfIntegral from dbo.VIEW_CheckIntegral where CashState<>'删除' and Integral=1 and (IntroIntegral=0 or MyselfIntegral=0) " + sql + " Group by OrderNO, CustomerName, CustomerPhone, IntroCardNO, IntroCustomerName, SuitePrice, CashNO, FPH, BusinessDepartment, BusinessEmployeeName, BusinessPoint, CashMemory, Size, Number, Unit, CashPretext, CashEmployeeName, CashDate, CreateEmployeeName, CreateDate, IsPrint, CashState,IntroType, Integral, IntroIntegral, MyselfIntegral Order by CreateDate";
            return ExecuteDataSet(sSql, "SearchCash");
        }


        [WebMethod]
        public DataSet CheckOmissionsIntegral(string sql)
        {
            // dbo.CashDetail.CashPretext,
            // dbo.Customers.IntroducerType
            string sSql = @"SELECT DISTINCT 
                      dbo.CashSub.OrderNO, dbo.CashSub.CashNO, dbo.CashSub.FPH, dbo.CashSub.CashState, SUM(dbo.CashDetail.CashNumber) 
                      AS CashNumber, dbo.CashDetail.IntroIntegral, dbo.CashDetail.MyselfIntegral, Customers_1.CardNO, dbo.Orders.OrderSuitePrice, dbo.Config.ConfigValue as CashPretext
                     
FROM         dbo.CashSub INNER JOIN
                      dbo.CashDetail ON dbo.CashSub.CashNO = dbo.CashDetail.CashNO INNER JOIN
                      dbo.Orders ON dbo.CashSub.OrderNO = dbo.Orders.OrderNO INNER JOIN
                      dbo.Customers ON dbo.Orders.CustomerNO = dbo.Customers.CustomerNO INNER JOIN
                      dbo.Customers AS Customers_1 ON dbo.Customers.IntroducerCardNO = Customers_1.CustomerNO INNER JOIN
                      dbo.Config ON dbo.CashDetail.CashPretext = dbo.Config.ConfigNO where 1=1 and (dbo.CashSub.CashState <> '删除') " + sql + "GROUP BY dbo.CashSub.OrderNO, dbo.CashSub.CashNO, dbo.CashSub.FPH, dbo.CashSub.CashState, dbo.CashDetail.CashPretext, dbo.CashDetail.IntroIntegral, dbo.CashDetail.MyselfIntegral, Customers_1.CardNO, dbo.Orders.OrderSuitePrice, dbo.Config.ConfigValue, dbo.Customers.IntroducerType";

            return ExecuteDataSet(sSql, "CheckOmissionsIntegral");
        }
        /// <summary>
        /// 员工积分
        /// </summary>
        /// <param name="sql">//积分卡号</param>
        /// <returns></returns>
        [WebMethod]
        public DataSet CheckEmployeeIntegral(string sql)
        {
            string sSql = @"SELECT DISTINCT 
                      dbo.CashSub.OrderNO, dbo.CashSub.CashNO, dbo.CashSub.FPH, dbo.CashSub.CashState, dbo.CashDetail.CashNumber, dbo.CashDetail.IntroIntegral, 
                      dbo.CashDetail.MyselfIntegral, dbo.Orders.OrderSuitePrice, dbo.Config.ConfigValue AS CashPretext, dbo.Employee.CardNO
FROM         dbo.CashSub INNER JOIN
                      dbo.CashDetail ON dbo.CashSub.CashNO = dbo.CashDetail.CashNO INNER JOIN
                      dbo.Orders ON dbo.CashSub.OrderNO = dbo.Orders.OrderNO INNER JOIN
                      dbo.Customers ON dbo.Orders.CustomerNO = dbo.Customers.CustomerNO INNER JOIN
                      dbo.Config ON dbo.CashDetail.CashPretext = dbo.Config.ConfigNO INNER JOIN
                      dbo.Employee ON dbo.Customers.IntroducerCardNO = dbo.Employee.EmployeeNO
where  1=1 and (dbo.CashSub.CashState <> '删除') " + sql + "GROUP BY dbo.CashSub.OrderNO, dbo.CashSub.CashNO, dbo.CashSub.FPH, dbo.CashSub.CashState, dbo.CashDetail.CashNumber, dbo.Orders.OrderSuitePrice, dbo.Config.ConfigValue, dbo.Employee.CardNO, dbo.CashDetail.IntroIntegral, dbo.CashDetail.MyselfIntegral";
            return ExecuteDataSet(sSql, "EmployeeIngegral");


        }
        /// <summary>
        /// 查询自己积分
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet CheckMyselfIntegral(string sql)
        {
            //dbo.Cash.IntroType, 
            string sSql = @"SELECT DISTINCT 
                      dbo.Customers.CardNO, dbo.CashDetail.CashNO, dbo.Orders.OrderNO, dbo.CashDetail.IntroIntegral, dbo.CashDetail.MyselfIntegral, dbo.CashSub.CashState, 
                      dbo.CashSub.FPH, dbo.CashDetail.CashNumber, dbo.Config.ConfigValue AS CashPretext, dbo.Orders.OrderSuitePrice
FROM         dbo.Customers INNER JOIN
                      dbo.Orders ON dbo.Customers.CustomerNO = dbo.Orders.CustomerNO INNER JOIN
                      dbo.Cash ON dbo.Orders.OrderNO = dbo.Cash.OrderNO INNER JOIN
                      dbo.CashSub ON dbo.Cash.OrderNO = dbo.CashSub.OrderNO INNER JOIN
                      dbo.CashDetail ON dbo.CashSub.CashNO = dbo.CashDetail.CashNO INNER JOIN
                      dbo.Config ON dbo.CashDetail.CashPretext = dbo.Config.ConfigNO
WHERE     (dbo.CashSub.CashState <> '删除') AND (dbo.Customers.CardNO <> '')" + sql + "GROUP BY dbo.Customers.CardNO, dbo.CashDetail.CashNO, dbo.Cash.IntroType, dbo.CashDetail.CashNumber, dbo.CashSub.FPH, dbo.CashDetail.MyselfIntegral,dbo.Orders.OrderNO, dbo.CashDetail.IntroIntegral, dbo.CashSub.CashState, dbo.Config.ConfigValue, dbo.Orders.OrderSuitePrice";
            return ExecuteDataSet(sSql, "integral");
        }
        /// <summary>
        /// 检查积分状态
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet CheckIntegralState(string sql)
        {
            string sSql = "select distinct OrderNO, CustomerName, CustomerPhone, IntroCardNO, IntroCustomerName, SuitePrice, CashNO, FPH, BusinessDepartment, BusinessEmployeeName, BusinessPoint, CashMemory, Size, Number, Unit, CashPretext, CashNumber=sum(CashNumber), CashEmployeeName, CashDate, CreateEmployeeName, CreateDate, IsPrint, CashState,IntroType, Integral, IntroIntegral, MyselfIntegral from dbo.VIEW_CheckIntegral where CashState<>'删除' and (IntroIntegral=0 or MyselfIntegral=0) " + sql + " Group by OrderNO, CustomerName, CustomerPhone, IntroCardNO, IntroCustomerName, SuitePrice, CashNO, FPH, BusinessDepartment, BusinessEmployeeName, BusinessPoint, CashMemory, Size, Number, Unit, CashPretext, CashEmployeeName, CashDate, CreateEmployeeName, CreateDate, IsPrint, CashState,IntroType, Integral, IntroIntegral, MyselfIntegral Order by CreateDate";
            return ExecuteDataSet(sSql, "SearchCash");
        }


        /// <summary>
        /// 根据定单编号查询后期产品
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]

        public DataSet SearchBackProductsByOrderNOs(string sql)
        {
            string sSql = @"SELECT  distinct dbo.Orders.OrderNO, dbo.Orders.OrderDate, dbo.OrderProducts.OrderIndex, dbo.OrderProducts.SeparateNO, dbo.Products.ProductSizeA, dbo.Products.ProductSizeB, 
                      dbo.OrderProducts.PageQuantity, dbo.OrderProducts.NegativeQuantity, dbo.OrderProducts.ProductQuantity, dbo.OrderProducts.ProduceState, 
                      dbo.OrderProducts.PreGetGoodsDate, dbo.Products.ProductName, dbo.OrderProducts.InsidePage, dbo.OrderProducts.Fram, dbo.OrderProducts.Box, 
                      dbo.OrderProducts.Unit, dbo.OrderProducts.Paper, dbo.OrderProducts.film, dbo.OrderProducts.Biao, dbo.OrderProducts.Ban, dbo.OrderProducts.Diao, 
                      dbo.Products.ProductCostPrice, dbo.Products.BackProductTypeNO, dbo.Products.ProductNO, dbo.Products.BackProductNO, dbo.OrderProducts.ProductMemory, 
                      dbo.Element.ElementName
FROM         dbo.Orders INNER JOIN
                      dbo.OrderProducts ON dbo.Orders.OrderNO = dbo.OrderProducts.OrderNO INNER JOIN
                      dbo.Products ON dbo.OrderProducts.ProductNO = dbo.Products.ProductNO LEFT OUTER JOIN
                      dbo.Element ON dbo.OrderProducts.GetGoodsAddress = dbo.Element.ElementNO
WHERE     (1 = 1) AND (dbo.OrderProducts.ProduceState = '正常')" + sql;
            return ExecuteDataSet(sSql, "订单后期产品");
        }
        /// <summary>
        /// 后期产品生成XML，查询订单信息
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchOrderProducts(string sql)
        {
            string sSql = @"SELECT  top 100   dbo.Orders.OrderNO,dbo.Orders.ImagePath, dbo.Orders.FPH, dbo.Orders.ImageCount, dbo.Orders.PreGetGoodsDate, dbo.Orders.OrderDate, dbo.Customers.CustomerMemory,CustomerName=CustomerName1+' '+CustomerName2
FROM         dbo.Orders INNER JOIN
                      dbo.Customers ON dbo.Orders.CustomerNO = dbo.Customers.CustomerNO
                      where 1=1
                      " + sql;

            return ExecuteDataSet(sSql, "订单信息");

        }
        /// <summary>
        /// 查询订单后期产品图片
        /// </summary>
        /// <param name="orderNOs"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SeachBackProductsImageByOrderNOs(string orderNOs)
        {
            string sSql = "select OrderNO,SeparateNO,OrderIndex,FileName from OrderProductImage where OrderNO in(" + orderNOs + ")";
            return ExecuteDataSet(sSql, "订单后期产品图片");
        }
        /// <summary>
        /// 查询产品所选照片数量
        /// </summary>
        /// <param name="orderNO"></param>
        /// <param name="orderIndex"></param>
        /// <param name="separateNO"></param>
        /// <returns></returns>
        [WebMethod]
        public string SearchBackProductImageCount(string orderNO)
        {
            string sSql = "select SUM(NegativeQuantity) from OrderProducts where OrderNO='" + orderNO + "' and ProduceState='正常'";
            return ExecuteSqlToString(sSql);
        }
        public string SearchBackProductImageCount(string orderNO, string where)
        {
            string sSql = "select SUM(NegativeQuantity) from OrderProducts where OrderNO='" + orderNO + "' and ProduceState='正常' " + where;
            return ExecuteSqlToString(sSql);
        }

        /// <summary>
        /// 根据订单号查询收银客户名
        /// </summary>
        /// <param name="orderNO"></param>
        /// <returns></returns>
        [WebMethod]
        public string SeachCustomerNameByOrderNO(string orderNO)
        {
            string sSql = "select UseName from Cash where OrderNO='" + orderNO + "'";//UseName 才是登记的名字，也就是真名字，CustomerName 为可以编辑的名字（改为公司什么的用于开发票）
            //string sSql = "select CustomerName1+','+CustomerName2 from VIEW_Orders where OrderNO='" + orderNo + "'";
            return ExecuteSqlToString(sSql);
        }

        /// <summary>
        /// 更改订单状态为新订单
        /// </summary>
        /// <param name="sOrderNO">订单号</param>
        /// <param name="sProcess">流程编号</param>
        /// <param name="sDepartmentNO">订单部门编号</param>
        /// <param name="sCreate">创建人</param>
        /// <param name="sCreateDate">创建时间</param>
        /// <returns>是否成功</returns>
        [WebMethod]
        public bool UpdateOrderLogoBarNew(string sOrderNO, string sProcess, string sDepartmentNO, string sCreate, string sCreateDate)
        {
            DataSet myds = new DataSet();
            try
            {
                OpenConn();
                string Sql = "select OrderNO, OrderIndex, SeparateNO from OrderProducts where OrderNO='" + sOrderNO + "' ";
                SqlDataAdapter myda = new SqlDataAdapter(Sql, Conn);
                myda.Fill(myds, "OrderProducts");
                CloseConn();
            }
            catch { return false; }
            if (myds.Tables[0].Rows.Count > 0)
            {
                DataRow[] dr = myds.Tables[0].Select("1=1");
                for (int i = 0; i < dr.Length; i++)
                {
                    UpdateOrderLogoBarN(sOrderNO, dr[i]["OrderIndex"].ToString(), dr[i]["SeparateNO"].ToString(), "", sProcess, "", sCreate, sCreateDate);
                }
            }
            return true;
        }
        /// <summary>
        /// 变更状态，记录流程
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sOrderIndex"></param>
        /// <param name="sSeparateNO"></param>
        /// <param name="sLogoIndex"></param>
        /// <param name="sProcess"></param>
        /// <param name="sDepartmentNO"></param>
        /// <param name="sCreate"></param>
        /// <param name="sCreateDate"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateOrderLogoBarN(string sOrderNO, string sOrderIndex, string sSeparateNO, string sLogoIndex, string sProcess, string sDepartmentNO, string sCreate, string sCreateDate)
        {
            string sSql = "Update OrderLogo set State=0 where OrderNO='" + sOrderNO + "' and OrderIndex='" + sOrderIndex + "' and SeparateNO='" + sSeparateNO + "' ";
            sSql += "declare @a int set @a=isnull((SELECT MAX(LogoIndex) AS Expr1 FROM OrderLogo where OrderNO='" + sOrderNO + "' and OrderIndex='" + sOrderIndex + "' and SeparateNO='" + sSeparateNO + "'),0)+1 set @a=right(cast(@a+10000 as varchar(20)),3) Insert into OrderLogo (OrderNO, OrderIndex, SeparateNO, LogoIndex, Process, DepartmentNO, [Create], CreateDate) values ('" + sOrderNO + "','" + sOrderIndex + "','" + sSeparateNO + "',@a,'" + sProcess + "','" + sDepartmentNO + "','" + sCreate + "','" + sCreateDate + "')";

            return ExecuteSql(sSql);


        }
        /// <summary>
        /// 添加订单存储路径
        /// </summary>
        /// <param name="orderNO"></param>
        /// <param name="orderPath"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateOrderPath(string orderNO, string orderPath)
        {
            string sSql = "Update Orders set ImagePath='" + orderPath + "'where OrderNO='" + orderNO + "'";
            return ExecuteSql(sSql);
        }
        /// <summary>
        /// 套系排行榜
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SuiteTop(string sql)
        {
            string sSql = @"SELECT   distinct SuiteQuantity=COUNT(SuiteName),dbo.Department.DepartmentName, dbo.Suite.SuiteName, dbo.Suite.SuitePrice, dbo.SuiteType.SuiteTypeName
FROM         dbo.Orders INNER JOIN
                      dbo.Suite ON dbo.Orders.SuiteNO = dbo.Suite.SuiteNO INNER JOIN
                      dbo.SuiteType ON dbo.Suite.SuiteTypeNO = dbo.SuiteType.SuiteTypeNO INNER JOIN
                      dbo.Department ON dbo.Orders.orderDepartmentNo = dbo.Department.DepartmentNO where 1=1" + sql +
                   "GROUP BY dbo.Suite.SuiteName,dbo.SuiteType.SuiteTypeName,dbo.Suite.SuitePrice,dbo.Department.DepartmentName order by suiteQuantity desc ";


            return ExecuteDataSet(sSql, "套系排行榜");

        }
        /// <summary>
        /// 业绩查询
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet Count(string sql, string Address, string duty)
        {
            string sSql = @" SELECT  
                          case when GROUPING(DepartmentName)=1 then '----总计----' 
                          else DepartmentName end  DepartmentName,  
                          case when GROUPING(EmployeeName)=1 and GROUPING(DepartmentName)=0 then '---部门小计---' 
                          else EmployeeName end  EmployeeName,
                          Counts= COUNT(dbo.Employee.EmployeeName),  
                          SuitePrice=sum(dbo.Orders.SuitePrice)
                          FROM         
                          dbo.Orders INNER JOIN
                          dbo.Department ON 
                          dbo.Orders." + Address + @" = dbo.Department.DepartmentNO 
  INNER JOIN dbo.Employee ON
  dbo.Orders." + duty + @" = dbo.Employee.EmployeeNO 
  where 1=1" + sql + @"group by DepartmentName,EmployeeName
  with rollup";

            return ExecuteDataSet(sSql, "业绩");
        }
        /// <summary>
        /// 外展业绩
        /// update 2012-03-05
        /// modificator njr
        /// Content modification
        /// group by BusinessDepartment,customerName,FPH,BusinessEmployeeName,CashPretext, IntroCustomerName,SuitePrice,CashNumber order by BusinessDepartment,BusinessEmployeeName
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet OutCount(string sql)
        {
            string sSql = @"select distinct customerName,FPH ,BusinessDepartment,BusinessEmployeeName,CashPretext, IntroCustomerName,SuitePrice,CashNumber from  VIEW_Cash where CashEmployeeName='外展收银'" + sql + "group by BusinessDepartment,customerName,FPH,BusinessEmployeeName,CashPretext, IntroCustomerName,SuitePrice,CashNumber order by BusinessDepartment,BusinessEmployeeName";
            return ExecuteDataSet(sSql, "外展业绩");
        }
        [WebMethod]
        public string SearchPreGetGoodsDate(string orderNo)
        {
            string sql = "select PreGetGoodsDate from Orders where OrderNO='" + orderNo + "'";
            return ExecuteSqlToString(sql);
        }
        [WebMethod]
        public DataSet SearchCustomerSouce(string sql)
        {
            string sSql = @"select dbo.Customers.BirthdayYear2 ,dbo.Customers.BirthdayYear1,Marrydate=( CONVERT(varchar(20),datepart(YYYY, CONVERT(dateTime,dbo.Customers.MarryDate)))+'年'+CONVERT(varchar(20),datepart(MM, CONVERT(dateTime,dbo.Customers.MarryDate)))+'月'),dbo.Config.ConfigValue
FROM         dbo.Customers INNER JOIN
                      dbo.Config ON dbo.Customers.CustomerSource = dbo.Config.ConfigNO RIGHT OUTER JOIN
                      dbo.Orders ON dbo.Customers.CustomerNO = dbo.Orders.CustomerNO where 1=1" + sql + "and (BirthdayYear2!='' or BirthdayYear1!='')and MarryDate!=''group by dbo.Customers.BirthdayYear2, dbo.Customers.BirthdayYear1, dbo.Customers.MarryDate, dbo.Config.ConfigValue order by MarryDate ";
            return ExecuteDataSet(sSql, "客户信息统计");
        }
        /// <summary>
        /// creater njro   
        /// createtime 2012-03-27
        /// 顾客信息统计报表
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchCustomerSouceInfo(string sql)
        {
            string sSql = @"select distinct 
                              BirthdayYear1=case LEN(dbo.Customers.BirthdayYear1) when 0 then dbo.Customers.BirthdayYear2 else dbo.Customers.BirthdayYear1 end,
                              BirthdayYear2=case LEN(dbo.Customers.BirthdayYear2) when 0 then dbo.Customers.BirthdayYear1 else dbo.Customers.BirthdayYear2 end,
                        MarryDate=case len(dbo.Customers.MarryDate) when 0 then '1900-01-01'
                        else dbo.Customers.MarryDate end,
                        dbo.Config.ConfigValue,
                        ((case LEN(dbo.Customers.BirthdayYear1) when 0 then (year(GETDATE())-dbo.Customers.BirthdayYear2) else year(GETDATE())-dbo.Customers.BirthdayYear1 end)+(case LEN(dbo.Customers.BirthdayYear2) when 0 then (year(GETDATE())- dbo.Customers.BirthdayYear1) else year(GETDATE())-dbo.Customers.BirthdayYear2 end))/2 as avgAge
                        FROM         dbo.Customers INNER JOIN
                                     dbo.Config ON dbo.Customers.CustomerSource = dbo.Config.ConfigNO RIGHT OUTER JOIN
                                     dbo.Orders ON dbo.Customers.CustomerNO = dbo.Orders.CustomerNO 
                        where 1=1
                        and isdate(dbo.customers.marrydate) = 1" + sql + @"and (BirthdayYear2<>'' or BirthdayYear1<>'')";
            return ExecuteDataSet(sSql, "SearchCustomerSouceInfo");
        }
        /// <summary>
        /// creater njro
        /// createdatetime 2012-04-02
        /// 摄影师/看样师看样报表
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet GetLookPoductsInfo(string sql)
        {
            string sSql = @"
                            SELECT      
                            dbo.Element.ElementName, 
                            dbo.Employee.EmployeeName, 
                            dbo.Config.ConfigValue,
                            COUNT(dbo.CashSub.OrderNO) AS 对数, 
                            SUM(dbo.CashDetail.CashNumber) 
                            AS 加选金额, 
                            SUM(dbo.Orders.SuitePrice) AS 套系金额
                            FROM         dbo.Department INNER JOIN
                                                  dbo.Element ON dbo.Department.DepartmentNO = dbo.Element.ElementNO INNER JOIN
                                                  dbo.CashSub INNER JOIN
                                                  dbo.CashDetail ON dbo.CashSub.CashNO = dbo.CashDetail.CashNO ON dbo.Department.DepartmentName = dbo.CashSub.BusinessDepartment INNER JOIN
                                                  dbo.Employee ON dbo.CashSub.BusinessEmployeeNO = dbo.Employee.EmployeeName INNER JOIN
                                                  dbo.Orders ON dbo.CashSub.OrderNO = dbo.Orders.OrderNO INNER JOIN
                                                  dbo.Config ON dbo.Employee.EmployeeDuty = dbo.Config.ConfigNO
                            WHERE     (dbo.CashDetail.CashPretext = 'SKSY_3JF') AND (dbo.Element.ElementType = '看样地点') AND (dbo.Employee.EmployeeDuty = 'Duty_35' OR
                                                  dbo.Employee.EmployeeDuty = 'Duty_31' OR
                                                  dbo.Employee.EmployeeDuty = 'Duty_36')" + sql + @"GROUP BY dbo.Element.ElementName, dbo.Employee.EmployeeName, dbo.Config.ConfigValue
union all
select '---总计---','----------','-----------',COUNT(dbo.CashSub.OrderNO),SUM(dbo.CashDetail.CashNumber),SUM(dbo.Orders.SuitePrice)
FROM         dbo.Department INNER JOIN
                      dbo.Element ON dbo.Department.DepartmentNO = dbo.Element.ElementNO INNER JOIN
                      dbo.CashSub INNER JOIN
                      dbo.CashDetail ON dbo.CashSub.CashNO = dbo.CashDetail.CashNO ON dbo.Department.DepartmentName = dbo.CashSub.BusinessDepartment INNER JOIN
                      dbo.Employee ON dbo.CashSub.BusinessEmployeeNO = dbo.Employee.EmployeeName INNER JOIN
                      dbo.Orders ON dbo.CashSub.OrderNO = dbo.Orders.OrderNO INNER JOIN
                      dbo.Config ON dbo.Employee.EmployeeDuty = dbo.Config.ConfigNO
WHERE     (dbo.CashDetail.CashPretext = 'SKSY_3JF') AND (dbo.Element.ElementType = '看样地点') AND (dbo.Employee.EmployeeDuty = 'Duty_35' OR
                      dbo.Employee.EmployeeDuty = 'Duty_31' OR
                      dbo.Employee.EmployeeDuty = 'Duty_36')" + sql + @"ORDER BY dbo.Element.ElementName,dbo.Config.ConfigValue";
            return ExecuteDataSet(sSql, "SearchCustomerSouceInfo");
        }

        /// <summary>
        /// 查询回门信息
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchIntroduce(string sql)
        {
            //string sSql = @"select  distinct top 200 (IntroCustomerName1+'  '+IntroCustomerName2)as IntroCustomerName,introMobilePhone1,introMobilePhone2,IntroduceCustomerNO,IntroduceCardNO,(CustomerName1+'  '+CustomerName2)as CustomerName,CustomerNO,orderNo,CardNO,RepayWay,RNumber, RepayNumber, RepayMemory, IsRepay=case when sum(RNumber-RepayNumber)>0 then '否' when sum(RNumber-RepayNumber)<=0 then '是' end, RepayDate, Responsible, sum(SuitePrice) as SuitePrice, sum(Number) as Number from dbo.VIEW_SearchIntroducerCount where 1=1" + sql + " group by orderNo,IntroCustomerName1,IntroCustomerName2,IntroduceCardNO,CardNO, CustomerName1, CustomerName2,MobilePhone1,  MobilePhone2, RepayWay, RepayNumber, RepayMemory, RepayDate,RNumber,IntroduceCustomerNO,CustomerNO, Responsible,introMobilePhone1,introMobilePhone2";
            string sSql = @"select *from
(SELECT   Customers_2.CustomerNO AS IntroduceCustomerNO, dbo.Config.ConfigValue AS IntroduceCardType, Customers_2.CardNO AS IntroduceCardNO, 
                      Customers_1.CustomerNO, Config_1.ConfigValue AS CardType, Customers_1.CardNO, Customers_1.MobilePhone1, 
                       (Customers_1.CustomerName1+' '+Customers_1.CustomerName2) as CustomerName, Customers_1.MobilePhone2, dbo.IntroducerRepay.RNumber, dbo.IntroducerRepay.RepayType, dbo.IntroducerRepay.RepayWay, 
                      dbo.IntroducerRepay.RepayNumber, dbo.IntroducerRepay.RepayMemory, dbo.IntroducerRepay.RepayEnableDate, dbo.IntroducerRepay.RepayDate, 
                      dbo.IntroducerRepay.Responsible, dbo.Orders.SuitePrice, dbo.Orders.OrderNO, ISNULL(dbo.CashDetail.CashNumber, 0) AS Number, dbo.Suite.SuiteName, 
                      (Customers_2.CustomerName1 +'  '+Customers_2.CustomerName2) AS introCustomerName, Customers_2.MobilePhone1 AS introMobilePhone1,dbo.IntroducerRepay.IsRepay, 
                      Customers_2.MobilePhone2 AS introMobilePhone2, dbo.Orders.orderDepartmentNo, dbo.Orders.OrderDate,Row_number() over(partition by Orders.OrderNO order by Number) rowNO
FROM                  dbo.Suite INNER JOIN
                      dbo.Orders  ON dbo.Suite.SuiteNO = dbo.Orders.SuiteNO RIGHT OUTER JOIN
                      dbo.Customers AS Customers_2 INNER JOIN
                      dbo.IntroducerRepay ON Customers_2.CustomerNO = dbo.IntroducerRepay.IntroducerCustomerNO INNER JOIN
                      dbo.Customers AS Customers_1 ON dbo.IntroducerRepay.CustomerNO = Customers_1.CustomerNO ON 
                      dbo.Orders.CustomerNO = Customers_1.CustomerNO LEFT OUTER JOIN
                      dbo.Cash INNER JOIN
                      dbo.CashSub ON dbo.Cash.OrderNO = dbo.CashSub.OrderNO INNER JOIN
                      dbo.CashDetail ON dbo.CashSub.CashNO = dbo.CashDetail.CashNO ON dbo.Orders.OrderNO = dbo.Cash.OrderNO LEFT OUTER JOIN
                      dbo.Config AS Config_1 ON Customers_1.CardType = Config_1.ConfigNO LEFT OUTER JOIN
                      dbo.Config ON Customers_2.CardType = dbo.Config.ConfigNO) W  where rowNO=1 ";
            sSql += sql;
            return ExecuteDataSet(sSql, "回门信息");
        }
        /// <summary>
        /// 根据订单号查询收银信息
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchCashByOrderNo(string sql)
        {
            string sSql = @" select distinct OrderNO,CashPretextName, CustomerName,IntroCardNO, IntroCustomerName, SuitePrice,FPH, BusinessDepartment, BusinessEmployeeName, CashMemory,Number, CashNumber=sum(CashNumber), CashEmployeeName, CashDate, CreateEmployeeName from dbo.VIEW_Cash where CashState<>'删除'" + sql + "  Group by OrderNO, CustomerName,IntroCardNO, IntroCustomerName, SuitePrice, CashNO, FPH, BusinessDepartment, BusinessEmployeeName, CashMemory, Number,  CashPretextName, CashEmployeeName, CashDate, CreateEmployeeName Order by CashDate";
            return ExecuteDataSet(sSql, "订单收银信息");
        }
        /// <summary>
        /// 添加或修改员工考评
        /// </summary>
        /// <param name="orderNo"></param>
        /// <param name="level1"></param>
        /// <param name="level2"></param>
        /// <param name="level3"></param>
        /// <param name="level4"></param>
        /// <param name="level5"></param>
        /// <param name="duty"></param>
        /// <param name="customerComplains"></param>
        /// <param name="employeeName"></param>
        /// <param name="creater"></param>
        /// <param name="createDate"></param>
        /// <returns></returns>
        [WebMethod]
        public bool AddEmployeeRate(string orderNo, string rateOption, int veryGood, int good, int normal, int bad, string duty, string complainsType, string customerComplains, string employeeName, string departMent, string serveCustomer, string creater, string createDate, string floor)
        {
            string sSql = @"if exists (select orderNo,DepartMent,floor,duty,serveCustomer,createDate from EmployeeRate where OrderNO='" + orderNo + "' and duty='" + duty + "'and employeename='" + employeeName + "'and RateOption='" + rateOption + "'and DepartMent='" + departMent + "'and serveCustomer='" + serveCustomer + "' and createDate='" + createDate + "' and Floor='" + floor + "')";
            sSql += @"update EmployeeRate set veryGood='" + veryGood + "',good='" + good + "',normal='" + normal + "',bad='" + bad + "',ComplainsType='" + complainsType + "',CustomerComplains='" + customerComplains + "',Creater='" + creater + "',CreateDate='" + createDate + "'where OrderNO='" + orderNo + "' and duty='" + duty + "'and employeename='" + employeeName + "'and DepartMent='" + departMent + "'and RateOption='" + rateOption + "'and Floor='" + floor + "'";
            sSql += @"else insert into EmployeeRate values ('" + orderNo + "','" + rateOption + "','" + veryGood + "','" + good + "','" + normal + "','" + bad + "','" + duty + "','" + complainsType + "','" + customerComplains + "','" + employeeName + "','" + departMent + "','" + serveCustomer + "','" + creater + "','" + createDate + "','" + floor + "')";
            return ExecuteSql(sSql);
        }
        /// <summary>
        ///  查询员工考评记录
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchEmployeeRate(string sql)
        {
            string sSql = @"select *  from EmployeeRate where 1=1  " + sql;
            return ExecuteDataSet(sSql, "员工考评");
        }

        /// <summary>
        ///  删除员工考评记录
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public bool DeleteEmployeeRate(string sql)
        {
            string sSql = @"delete  EmployeeRate where 1=1  " + sql;
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// 员工考评统计
        /// updater njro
        /// updatetime 2012-03-26
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet EmployeeRateCount(string sql)
        {
            string sSql = @"select distinct EmployeeName,rateoption,veryGood=sum(veryGood),good=sum(good),normal=sum(normal),bad=sum(bad), duty,Department,Floor from EmployeeRate where 1=1 " + sql + " group by rateoption,duty,EmployeeName,Department,veryGood,good,normal,bad,Floor order by veryGood desc,good desc,normal desc,bad desc ";
            return ExecuteDataSet(sSql, "员工考评统计");

        }
        /// <summary>
        /// 订单服务人员查询
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchServiceEmployee(string sql)
        {
            string sSql = @"select distinct OrderNO,OrderEmployee, OrderDate,ClothesEmployee,ClothesDate,OrderDepartMent,(CustomerName1+'  '+CustomerName2) as CustomerName  from VIEW_Orders where 1=1 " + sql;
            return ExecuteDataSet(sSql, "订单服务人员查询");
        }
        /// <summary>
        /// 根据订单号查询总收款金额
        /// </summary>
        /// <param name="orderNo"></param>
        /// <returns></returns>
        [WebMethod]
        public string SearchToalCashByOrderNO(string orderNo)
        {
            string sSql = @"select CashNumber=SUM([CashNumber]) from [VIEW_Cash] where OrderNO='" + orderNo + "'";
            return ExecuteSqlToString(sSql);
        }
        /// <summary>
        /// 根据订单号查询取件时间
        /// </summary>
        /// <param name="orderNo"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchGetGoodsDateByOrders(string orderNo)
        {
            string sSql = @"SELECT DISTINCT dbo.OrderProducts.GetGoodsAddress, dbo.OrderProducts.PreGetGoodsDate, dbo.Department.DepartmentName
FROM         dbo.OrderProducts INNER JOIN
                      dbo.Department ON dbo.OrderProducts.GetGoodsAddress = dbo.Department.DepartmentNO
WHERE     (dbo.OrderProducts.OrderNO = '" + orderNo + "')";
            return ExecuteDataSet(sSql, "订单取件时间");
        }
        /// <summary>
        /// 更新新添加产品取件时间和地址
        /// </summary>
        /// <param name="orderNO"></param>
        /// <param name="preGetGoodsDate"></param>
        /// <param name="orderIndex"></param>
        /// <param name="getGoodsAddress"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateGetGoodsDate(string orderNO, string preGetGoodsDate, string orderIndex, string getGoodsAddress)
        {
            string sSql = @"update OrderProducts set PreGetGoodsDate='" + preGetGoodsDate + "', GetGoodsAddress='" + getGoodsAddress + "'  where OrderNO='" + orderNO + "' and OrderIndex='" + orderIndex + "'";
            return ExecuteSql(sSql);
        }
        /// <summary>
        ///  插入礼服师排班信息
        /// </summary>
        /// <param name="ClothesType"></param>
        /// <param name="ClothesDeaprtmentNO"></param>
        /// <param name="ClothesDate"></param>
        /// <param name="CurrentIndex"></param>
        /// <param name="ClothesEmployeeNO"></param>
        /// <param name="Active"></param>
        /// <returns></returns>
        [WebMethod]
        public bool AddClothesEmployeeArrangement(string ClothesType, string ClothesDeaprtmentNO, DateTime ClothesDate, int CurrentIndex, string ClothesEmployeeNO, int Active)
        {
            //     string sSql=@"if exists(select Id from ClothesEmployeeArrangement where ClothesEmployeeNO='"+ClothesEmployeeNO+"'and ClothesDeaprtmentNO='"+ClothesDeaprtmentNO+"'and ClothesDate='"+ClothesDate+"')";

            //     sSql += @"Update ClothesEmployeeArrangement set ClothesType='" + ClothesType + "',ClothesDeaprtmentNO='" + ClothesDeaprtmentNO + "',ClothesDate='" + ClothesDate + "',CurrentIndex='" + CurrentIndex + "',ClothesEmployeeNO='" + ClothesEmployeeNO + "',Active='" + Active + "' where ClothesEmployeeNO='" + ClothesEmployeeNO + "'and ClothesDate='" + ClothesDate+ "'";

            //     sSql+="else ";

            string sSql = "Insert into ClothesEmployeeArrangement values ('" + ClothesType + "','" + ClothesDeaprtmentNO + "','" + ClothesDate + "','" + CurrentIndex + "','" + ClothesEmployeeNO + "','" + Active + "')";
            return ExecuteSql(sSql);
        }
        /// <summary>
        ///   删除当天礼服师排班记录
        /// </summary>
        /// <param name="ClothesDate"></param>
        /// <returns></returns>
        [WebMethod]
        public bool DeleteClothesEmployeeArrangement(DateTime clothesDate, string clothesType)
        {
            string sSql = @"if exists(select Id from ClothesEmployeeArrangement where ClothesDate='" + clothesDate + "'and ClothesType='" + clothesType + "')";
            sSql += @"delete ClothesEmployeeArrangement where ClothesDate='" + clothesDate + "'and ClothesType='" + clothesType + "'";
            return ExecuteSql(sSql);
        }
        /// <summary>
        /// 查询礼服师排班表
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchClothesEmployee(string sql)
        {
            string sSql = @"SELECT     dbo.Employee.EmployeeName, dbo.ClothesEmployeeArrangement.ClothesType, dbo.ClothesEmployeeArrangement.ClothesDeaprtmentNO, 
                      dbo.ClothesEmployeeArrangement.ClothesDate, dbo.ClothesEmployeeArrangement.CurrentIndex, dbo.ClothesEmployeeArrangement.ClothesEmployeeNO, 
                      dbo.ClothesEmployeeArrangement.Active
FROM         dbo.ClothesEmployeeArrangement INNER JOIN
                      dbo.Employee ON dbo.ClothesEmployeeArrangement.ClothesEmployeeNO = dbo.Employee.EmployeeNO where 1=1 " + sql;
            return ExecuteDataSet(sSql, "Clothes");
        }
        /// <summary>
        ///  查询礼服排班时间
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchClothesDate(string sql)
        {
            string sSql = @"select distinct ClothesDate from ClothesEmployeeArrangement where 1=1 " + sql;
            return ExecuteDataSet(sSql, "ClothesDate");
        }
        #endregion

        #region create by wujianbo

        /// <summary>create by wujianbo 20110526 获取数据集
        /// 
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet GetDataSet(string sql)
        {
            OpenConn();
            SqlCommand cmd = new SqlCommand(sql, Conn);
            SqlDataAdapter da = new SqlDataAdapter(cmd);
            DataSet ds = new DataSet();
            da.Fill(ds);
            CloseConn();
            return ds;
        }

        /// <summary>
        /// create by wujianbo 20121009 通过存储过程名获取数据集
        /// </summary>
        /// <param name="storedName"></param>
        /// <param name="param"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet GetStoredDataSet(string storedName, SqlParameter[] param)
        {
            OpenConn();
            SqlCommand cmd = new SqlCommand(storedName, Conn);
            cmd.CommandType = CommandType.StoredProcedure;
            if (param != null)
            {
                foreach (SqlParameter p in param)
                {
                    cmd.Parameters.Add(p);
                }
            }
            SqlDataAdapter da = new SqlDataAdapter(cmd);
            DataSet ds = new DataSet();
            da.Fill(ds);
            CloseConn();
            return ds;
        }

        /// <summary>create by wujianbo 20110526 执行SQL语句，返回影响行数
        /// 
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public int ExecuteCommandText(string sql)
        {
            OpenConn();
            SqlTransaction myTran = Conn.BeginTransaction();
            try
            {
                SqlCommand cmd = new SqlCommand(sql, Conn, myTran);
                int result = cmd.ExecuteNonQuery();
                myTran.Commit();
                CloseConn();
                return result;
            }
            catch (Exception ex)
            {
                myTran.Rollback();
                CloseConn();
                return 0;
            }


        }
        /// <summary>
        /// 执行SQL语句，返回受应响的行数
        /// </summary>
        /// <param name="commandText"></param>
        /// <returns></returns>
        private int ExecuteNoneQuery(string commandText)
        {
            int count = 0;
            using (SqlConnection connection = new SqlConnection(ConnString))
            {
                connection.Open();
                using (SqlCommand command = connection.CreateCommand())
                {
                    command.CommandText = commandText;
                    command.CommandType = CommandType.Text;
                    SqlTransaction trans = connection.BeginTransaction();
                    command.Connection = connection;
                    command.Transaction = trans;
                    try
                    {
                        count = command.ExecuteNonQuery();
                        trans.Commit();
                    }
                    catch (System.Exception ex)
                    {
                        try
                        {
                            trans.Rollback();
                        }
                        catch { }
                        count = 0;
                        trans = null;
                    }
                }
                connection.Close();
            }
            return count;
        }
        #endregion

        #region 礼服管理
        /// <summary>
        /// 添加自定义积分项
        /// </summary>
        /// <param name="sysyName"></param>
        /// <param name="sysyno"></param>
        /// <param name="ceateEmployee"></param>
        /// <param name="createDate"></param>
        /// <returns></returns>
        [WebMethod]

        public bool AssUnIntegralList(string sysyName, string sysyno, string ceateEmployee, DateTime createDate)
        {

            //string sSql = @"if exists (select SKSYNO from UnIntegralList where SKSYNO='"+sysyno+"')";
            //sSql += @"Update UnIntegralList set SKSYNO='" + sysyno + "', SKSYName='" + sysyName + "',Creater='" + ceateEmployee + "',CreateDate='" + createDate + "' where SKSYNO='" + sysyno + "'";
            //sSql += "else ";
            //sSql += "Insert into UnIntegralList (SKSYNO,SKSYName,Creater,CreateDate) Values ('" + sysyno + "','" + sysyName + "','" + ceateEmployee + "','" + createDate + "')";
            string sSql = "Insert into UnIntegralList (SKSYNO,SKSYName,Creater,CreateDate) Values ('" + sysyno + "','" + sysyName + "','" + ceateEmployee + "','" + createDate + "')";
            return ExecuteSql(sSql);
        }
        /// <summary>
        /// 删除 UnIntegralList
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public bool DelectUnIntegralList()
        {
            string sSql = "delete UnIntegralList where 1=1";
            return ExecuteSql(sSql);
        }
        /// <summary>
        /// 查询收银 时收款事由是否存在
        /// </summary>
        /// <param name="Unit"></param>
        /// <returns></returns>
        [WebMethod]
        public bool SelectUnIntegralList(string CashPretext)
        {

            DataSet myds = new DataSet();
            try
            {
                OpenConn();
                string sSql = "select SKSYName from UnIntegralList where SKSYName='" + CashPretext + "'";
                SqlDataAdapter myda = new SqlDataAdapter(sSql, Conn);
                myda.Fill(myds);
                CloseConn();
                if (myds.Tables[0].Rows.Count > 0)
                {
                    return false;
                }
                else
                {
                    return true;
                }

            }
            catch
            {
                return true
                    ;
            }

        }
        /// <summary>
        /// 查询  SKSYName 
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public DataSet SelectSKSYName()
        {
            string sSql = "select SKSYName from UnIntegralList where 1=1 ";
            return ExecuteDataSet(sSql, " ");
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


        /// <summary>
        /// 执行不带参数的查询SQL语句或存储过程
        /// </summary>
        /// <param name="cmdText">查询SQL语句或不带参数的存储过程</param>
        /// <param name="ct">命令类型</param>
        /// <returns></returns>
        ///  
        [WebMethod]
        public DataSet GetDataSet_N(string cmdText, CommandType ct)
        {
            DataSet ds = new DataSet();
            SqlConnection conn = new SqlConnection(ConnString);
            conn.Open();
            SqlCommand cmd = new SqlCommand(cmdText, conn);
            cmd.CommandType = ct;
            SqlDataAdapter da = new SqlDataAdapter(cmd);
            da.Fill(ds);
            conn.Close();
            conn.Dispose();
            return ds;
        }

        /// <summary>
        /// 执行增删改不带参数的SQL语句或改存储过程
        /// </summary>
        /// <param name="cmdText">增删改SQL语句或者存储过程</param>
        /// <param name="ct"></param>
        /// <returns></returns>
        ///   [WebMethod]
        public bool ExecuteSQL_czb(string cmdText, CommandType ct)
        {

            SqlConnection con = new SqlConnection(ConnString);

            SqlCommand cmd = new SqlCommand(cmdText, con);
            cmd.CommandTimeout = 180;//时间设为180
            try
            {
                con.Open();
                cmd.ExecuteNonQuery();
                return true;
            }

            catch
            {
                return false;
            }
            finally
            {
                con.Close();
                con.Dispose();
                cmd.Dispose();
            }

        }
        [WebMethod]
        private SqlConnection GetConn()
        {
            SqlConnection conn = new SqlConnection(ConnString);
            if (conn.State == ConnectionState.Closed)
            {
                conn.Open();
            }
            return conn;
        }




        /// <summary>
        /// 执行不带参数的查询SQL语句或存储过程
        /// </summary>
        /// <param name="cmdText">查询SQL语句或不带参数的存储过程</param>
        /// <param name="ct">命令类型</param>
        /// <returns></returns>
        ///  
        [WebMethod]
        public DataSet GetDataSet_czb(string cmdText, CommandType ct)
        {
            DataSet ds = new DataSet();
            SqlConnection conn = new SqlConnection(ConnString);
            conn.Open();
            SqlCommand cmd = new SqlCommand(cmdText, conn);
            cmd.CommandTimeout = 180;//时间设为180
            cmd.CommandType = ct;
            SqlDataAdapter da = new SqlDataAdapter(cmd);
            da.Fill(ds);
            conn.Close();
            conn.Dispose();
            return ds;
        }

        /// <summary>
        /// 查询款式信息
        /// </summary>
        /// <param name="styleid"></param>
        /// <returns></returns>
        public DataSet SelectDressStyle(string sql)
        {
            DataSet ds = new DataSet();
            SqlConnection conn = new SqlConnection(ConnString);
            conn.Open();
            SqlDataAdapter da = new SqlDataAdapter(sql, conn);
            da.Fill(ds);
            conn.Close();
            conn.Dispose();
            return ds;
        }

        [WebMethod]
        public DataSet SelectNameByUsername(string username)
        {
            string sql = "select EmployeeName as 姓名 from Employee where EmployeeNO='" + username + "'";
            return GetDataSet_czb(sql, CommandType.Text);
        }

        [WebMethod]
        public DataSet SelectMaxId()
        {
            string sql = "select DressID as DressID from Dressinfo";
            return GetDataSet_czb(sql, CommandType.Text);//
        }

        [WebMethod]
        public DataSet SelectMaxIds(string dressChipNO)
        {
            string condition = "";

            //string sql = "select max(DressID) as 礼服编号 from Dressinfo";/////////
            string sql = "select DressID as 礼服编号 from Dressinfo ";
            if (!string.IsNullOrEmpty(dressChipNO))
            {
                condition += "DressChipNO='" + dressChipNO + "'";
            }
            if (condition.Length > 0)
            {
                sql += "  where  " + condition;
            }
            return GetDataSet_czb(sql, CommandType.Text);
        }

        [WebMethod]
        public DataSet SelectDressChipD(string str)
        {
            string sql = "select DressChipNO as 芯片号,DressID as 礼服编号,DressName as 礼服名称,DressBrand as 礼服品牌,DressImageUrl as 正面照,DressImageUrl2 侧面照,DressDescription as 礼服描述,DressTimes as 使用次数,DressState as  礼服状态,DressRemark as 备注, DressBorrowAddress as 实际所在地点, DressCreateName as 操作员, DressCreateTime as 创建时间 from Dressinfo  where  DressChipNO='" + str + "'";

            return GetDataSet_czb(sql, CommandType.Text);
        }
        [WebMethod]
        public DataSet SelectDressChipDss(string str)
        {
            string sql = "select DressChipNO as 芯片号,DressID as 礼服编号,DressName as 礼服名称,DressBrand as 礼服品牌,DressImageUrl as 正面照,DressImageUrl2 侧面照,DressDescription as 礼服描述,DressTimes as 使用次数,DressState as  礼服状态,DressRemark as 备注, DressBorrowAddress as 实际所在地点, DressCreateName as 操作员, DressCreateTime as 创建时间 from Dressinfo  where  DressID='" + str + "'";

            return GetDataSet_czb(sql, CommandType.Text);
        }
        [WebMethod]
        public DataSet selectdresspohotes(string id)
        {

            string sql = "select DressImageUrl,DressImageRemarks,id  from DressImageUrl where  DressChipNO='" + id + "'";
            return GetDataSet_czb(sql, CommandType.Text);
        }

        [WebMethod]
        public DataSet selectdresspohotesOfZmz(string id)
        {

            string sql = "select DressImageUrl,DressImageRemarks,id  from DressImageUrl where  DressChipNO='" + id + "' and DressImageRemarks='正面照'";
            return GetDataSet_czb(sql, CommandType.Text);

        }
        [WebMethod]
        public DataSet SelectDressinfo()
        {
            string sql = "select DressChipNO as 芯片号,DressID as 礼服编号,DressName as 礼服名称,DressBrand as 礼服品牌,DressImageUrl as 正面照,DressImageUrl2 侧面照,DressDescription as 礼服描述,DressTimes as 使用次数,DressState as  礼服状态,DressRemark as 备注, DressBorrowAddress as 实际所在地点, DressCreatName as 操作员, DressCreatTime as 创建时间 from Dressinfo  order by DressChipNO desc ";

            return GetDataSet_czb(sql, CommandType.Text);
        }


        //通过获取的数字查找对应的文字
        /// <summary>
        /// 
        /// </summary>
        /// <param name="str"></param>
        /// <returns></returns>
        ///   [WebMethod]
        public DataSet selectStringByNum(string str)
        {
            string sql = "select DRName as 代码名称  from DressRule where DRNumber='" + str + "'";
            return GetDataSet_czb(sql, CommandType.Text);
        }

        //通过所选取的查询旗下的代码排号和代码编号，主要用于合成
        [WebMethod]
        public DataSet selectNumByBName(string str)
        {
            string sql = "select DROrder as 代码排号,DRNumber as 代码编号 from DressRule where DRName='" + str + "' ";
            return GetDataSet_czb(sql, CommandType.Text);
        }

        /// <summary>通过获取的2对数字查找对应的文字
        /// 哈哈哈
        /// </summary>
        /// <param name="str">自身编号</param>
        /// <param name="str1">上一级共有编号</param>
        /// <returns></returns>
        [WebMethod]
        public DataSet selectStringByTwoNum(string str, string str1)
        {
            string sql = "select DRName as 代码名称 from DressRule where DRNumber='" + str + "' and DROrder='" + str1 + "' ";
            return GetDataSet_czb(sql, CommandType.Text);
        }

        //联动统一接口
        [WebMethod]
        public DataSet select(int num)
        {
            string sql = "select * from DressRule where DROrder='" + num + "'";
            return GetDataSet_czb(sql, CommandType.Text);
        }

        [WebMethod]
        public DataSet selectname(string str)
        {
            string sql = "select DRName as 代码名称 from DressRule where DROrder='" + str + "'";
            return GetDataSet_czb(sql, CommandType.Text);
        }


        //通过所选的东西查找对应的数字
        [WebMethod]
        public DataSet selectNumBySectetValue(string value)
        {
            string str = "select DRNumber as 编号 from DressRule  where DRName='" + value + "'";
            return GetDataSet_czb(str, CommandType.Text);
        }


        ///// <summary>通过所选的东西查找对应的数字(特殊情况：主体材质)
        ///// 
        ///// </summary>
        ///// <param name="num1">DROrder值</param>
        ///// <param name="num2"><DROrder/param>
        ///// <param name="value">所选取的值</param>
        ///// <returns></returns>
        //public static DataSet SelectNumBySecteNumTS(int num1, int num2, string value)
        //{
        //    int k1 = 0;
        //    string str;
        //    if (k1 == num1)
        //    {
        //        str = "select DRNumber from DressRule  where DRName='" + value + "' and DROrder='" + num1 + "' ";
        //    }
        //    else
        //    {
        //        str = "select DRNumber from DressRule  where DRName='" + value + "' and DROrder='" + num2 + "'";
        //    }
        //    return GetDataSet_czb(str, CommandType.Text);
        //}
        [WebMethod]
        public DataSet SelectNumBySelectString(string num, string selectstring)
        {
            string str = "select DRNumber,DROrder from DressRule  where DRName='" + selectstring + "' and DROrder='" + num + "' ";
            return GetDataSet_czb(str, CommandType.Text);
        }
        [WebMethod]
        public DataSet SelectNumBySelectStringremark(string selectstring, string remark)
        {
            string str = "select DRNumber,DROrder from DressRule  where DRName='" + selectstring + "'  and [DRRemark]='" + remark + "' ";
            return GetDataSet_czb(str, CommandType.Text);
        }
        [WebMethod]
        public DataSet getSelectDressBy(string dressChipNo, string dressStates)
        {
            string sql = "select DressChipNO as  芯片号,DressID as 礼服编号,DressName as 礼服名称,DressBrand as 礼服品牌,DressDescription as 礼服描述,DressTimes as 使用次数,DressState as 礼服状态,DressRemark as 备注,DressBorrowAddress as 实际所在地点,DressCreateName as 操作员,DressCreateTime as 创建时间  from DressInfo  ";
            string condition = "";
            if (dressChipNo.ToString().Trim() != "")
            {
                condition = "DressChipNO='" + dressChipNo + "'";
            }
            if (dressStates.ToString().Trim() != "")
            {
                if (condition.Length > 0)
                {
                    condition += " and ";
                }
                condition += "DressState='" + dressStates + "'";
            }
            if (condition != "")
            {
                sql += "where  " + condition + "order by DressCreateTime desc";
            }
            return GetDataSet_czb(sql, CommandType.Text);

        }

        [WebMethod]
        public DataSet getSelectDressByyy()
        {

            string sql = "select DressChipNO as  芯片号,DressID as 礼服编号,DressName as 礼服名称,DressBrand as 礼服品牌,DressImageUrl as 正面照,DressImageUrl2 as 侧面照,DressDescription as 礼服描述,DressTimes as 使用次数,DressState as 礼服状态,DressRemark as 备注,DressBorrowAddress as 实际所在地点,DressCreateName as 操作员,DressCreateTime as 创建时间  from DressInfo ";
            return GetDataSet_czb(sql, CommandType.Text);
        }



        /// <summary>修改DRESS
        /// 
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>

        [WebMethod]
        public bool updatDressInfo(string dressChipNO, string dressID, string dressName, string dressBrand, string dressImageUrl, string dressImageUrl2, string dressDescription, string dressTimes, string dressState, string dressRemark, string dressBorrowAddress, string dressCreateName, string dressCreatTime)
        {
            string sql = string.Format("update DressInfo set DressChipNO='" + dressChipNO + "',DressID='" + dressID + "',DressName='" + dressName + "',DressBrand='" + dressBrand + "',DressImageUrl='" + dressImageUrl + "',DressImageUrl2='" + dressImageUrl2 + "',DressDescription='" + dressDescription + "',DressTimes='" + dressTimes + "',DressState='" + dressState + "',DressRemark='" + dressRemark + "',DressBorrowAddress='" + dressBorrowAddress + "',DressCreatName='" + dressCreateName + "',DressCreatTime='" + dressCreatTime + "'");
            return ExecuteSQL_czb(sql, CommandType.Text);
        }




        //出库入库
        [WebMethod]
        public DataSet getDressinfoBy(string xpNum)
        {

            String sql = "select DressID as 礼服编号,DressBorrowAddress as 所在地,DressDescription as 礼服描述,DressState as 状态,DressTimes as 使用次数,DressRemark as 备注,DressRemark1 as 出库日期,DressEstimateDate as 应归还日期,[DressOutTime]=case  when datediff(dd,DressEstimateDate, Convert(varchar(10),getDate(),120))>0 then '是' else '否' end from  DressInfo where DressChipNO='" + xpNum + "'";
            //String sql = "select CustomerName1 as '男姓名', CustomerName2 as '女姓名',MobilePhone as '联系电话', DRTType as '类别' , CustomerName as '礼服师',DRTTime as '预约时间' from (DressReservation left join Customers on DressReservation.MobilePhone=Customers.MobilePhone1 or DressReservation.MobilePhone = Customers.MobilePhone2)where DressReservation.MobilePhone='"+Tel+"' ";

            return GetDataSet_czb(sql, CommandType.Text);
        }

        [WebMethod]
        public DataSet DressOutBy(string xpNum, string times)
        {
            //string sql = "select top(1)  DressInfo.DressChipNO as 芯片号,DressInfo.DressID as 礼服编号,DressInfo.DressDescription as 礼服描述,DressInfo.DressState as 状态,DressInfo.DressTimes as 使用次数,DressInfo.DressRemark as 备注,DressInfo.DressRemark1 as 出库日期,DressTheme as '主题' from  DressInfo  where DressInfo.DressChipNO='" + xpNum + "'";
            string sql = "select   DressInfo.DressChipNO as 芯片号,DressInfo.DressID as 礼服编号,DressInfo.DressDescription as 礼服描述,DressInfo.DressState as 状态,DressInfo.DressTimes as 使用次数,DressInfo.DressRemark as 备注,DressInfo.DressRemark1 as 出库日期,DressTheme as '主题',DressPsCount as 每天限拍次数 from  DressInfo  where DressInfo.DressChipNO='" + xpNum + "'";

            //string sql = "  select top(1)  DressReservation.DressChipNO as 芯片号,Orders.OrderNO,Customers.CustomerName1 as 先生,Customers.CustomerName2 as 小姐,Department.DepartmentName as 拍摄地点,DressInfo.DressID as 礼服编号,DressInfo.DressDescription as 礼服描述,DressInfo.DressState as 状态,DressInfo.DressTimes as 使用次数,DressInfo.DressImageUrl as 正面照,DressInfo.DressImageUrl2 as 侧面照,DressInfo.DressRemark as 备注,DressInfo.DressRemark1 as 出库日期 from  DressReservation left join DressInfo on DressReservation.DressChipNO=DressInfo.DressChipNO left join Customers on DressReservation.CustomerNo=Customers.CustomerNO left join Orders on Customers.CustomerNO=Orders.CustomerNO left join Department on Orders.ShootAddressN=Department.DepartmentNO where DressInfo.DressChipNO='" + xpNum + "' and DressReservation.DRTTime>='" + times + "' order by DressReservation.DRTTime desc";
            //string sql = "  select top(1)  DressReservation.DressChipNO as 芯片号,Customers.CustomerName1 as 先生,Customers.CustomerName2 as 小姐,Department.DepartmentName as 拍摄地点,DressInfo.DressID as 礼服编号,DressInfo.DressDescription as 礼服描述,DressInfo.DressState as 状态,DressInfo.DressTimes as 使用次数,DressInfo.DressImageUrl as 正面照,DressInfo.DressImageUrl2 as 侧面照,DressInfo.DressRemark as 备注,DressInfo.DressRemark1 as 出库日期,DressReservation.DRTTime as  预约时间 from  DressReservation left join DressInfo on DressReservation.DressChipNO=DressInfo.DressChipNO left join Customers on DressReservation.CustomerNo=Customers.CustomerNO left join Orders on Customers.CustomerNO=Orders.CustomerNO left join Department on Orders.ShootAddressN=Department.DepartmentNO where DressInfo.DressChipNO='" + xpNum + "' and DressReservation.DRTTime>='" + times + "' order by DressReservation.DRTTime desc";

            return GetDataSet_czb(sql, CommandType.Text);
        }

        //入库 使用次数加1
        [WebMethod]
        public DataSet getSatatesfromDressHistory(string states)
        {
            String sql = "select top(1) DHstatus as 历史状态 from DressHistory where DressChipNO ='" + states + "' order by DHOPTime desc";
            return GetDataSet_czb(sql, CommandType.Text);
        }

        [WebMethod]
        public DataSet getSatatesfromDressInfods(int states, string dresschipno)
        {
            String sql = "update DressInfo set [DressTimes]='" + states + "' where DressChipNO ='" + dresschipno + "' ";
            return GetDataSet_czb(sql, CommandType.Text);
        }

        //修改礼服入库
        [WebMethod]
        public bool UpdateStates(string dressChipNO, string dressID, string dressRemark, string dressState, string dressBorrowAddress, string dressRemark1, string dressRemark2, string dressOperator, string dressDestionation, string dressEstimateDate)
        {
            string sql = string.Format("update DressInfo set DressID='" + dressID + "',DressRemark='" + dressRemark + "',DressState='" + dressState + "',DressBorrowAddress='" + dressBorrowAddress + "',DressRemark1='" + dressRemark1 + "',DressRemark2='" + dressRemark2 + "',DressOperator='" + dressOperator + "',DressDestionation='" + dressDestionation + "',DressEstimateDate='" + dressEstimateDate + "' where DressChipNO='" + dressChipNO + "'");
            return ExecuteSQL_czb(sql, CommandType.Text);
        }
        //礼服出库
        [WebMethod]
        public bool UpdateStatesss(string dressChipNO, string dressRemark, string DressState, string dressRemark1, string dressDestionation, string dressOperator, string dressRemark2, string dressTimes, string dressBorrowAddress, string GuihuanDate)
        {
            string sql = string.Format("update DressInfo set DressRemark='" + dressRemark + "',DressState='" + DressState + "',DressRemark1='" + dressRemark1 + "',DressDestionation='" + dressDestionation + "',DressOperator='" + dressOperator + "',DressRemark2='" + dressRemark2 + "',DressTimes='" + dressTimes + "',DressBorrowAddress='" + dressBorrowAddress + "',DressEstimateDate='" + GuihuanDate + "' where DressChipNO='" + dressChipNO + "' ");
            return ExecuteSQL_czb(sql, CommandType.Text);
        }
        [WebMethod]
        public bool updateAnyStates(string dressChipNo, string dressStates, string dressRemark1)
        {
            string str = string.Format("update DressInfo set DressState='" + dressStates + "',DressRemark1='" + dressRemark1 + "' where DressChipNO='" + dressChipNo + "'");
            return ExecuteSQL_czb(str, CommandType.Text);
        }
        [WebMethod]
        public bool updateAnyStatesdd(string dressChipNo, string dressStates, string dressRemark1, string dressRemark2, string dressDestionation, string dressOperator, string dressBorrowAddress)
        {
            string str = string.Format("update DressInfo set DressState='" + dressStates + "',DressRemark1='" + dressRemark1 + "',dressRemark2='" + dressRemark2 + "',DressDestionation='" + dressDestionation + "',DressOperator='" + dressOperator + "',DressBorrowAddress='" + dressBorrowAddress + "'  where DressChipNO='" + dressChipNo + "'");
            return ExecuteSQL_czb(str, CommandType.Text);
        }
        [WebMethod]
        public bool updateStates(string dressid, string dressStates, string dressRemark1, string dressOperator, string dresschipNo)
        {
            string sql = string.Format("update DressInfo set DressID='" + dressid + "',DressState='" + dressStates + "',DressRemark1='" + dressRemark1 + "',DressOperator='" + dressOperator + "' where DressChipNO='" + dresschipNo + "'");
            return ExecuteSQL_czb(sql, CommandType.Text);
        }
        //
        [WebMethod]
        public bool updatedressId(string dressinfor, string dresschipNo)
        {
            string sql = string.Format("update DressInfo set DressID='" + dressinfor + "' where DressChipNO='" + dresschipNo + "'");
            return ExecuteSQL_czb(sql, CommandType.Text);
        }
        [WebMethod]
        public int getNumberMax(string strs)
        {
            int kk;
            string str = "select DressID from DressInfo  where DressID like '%" + strs + "%' order by DressID desc ";
            DataSet ds = GetDataSet_czb(str, CommandType.Text);
            if (ds.Tables[0].Rows.Count > 0)
            {
                string i = ds.Tables[0].Rows[0]["DressID"].ToString();
                kk = Convert.ToInt32(i.Substring(i.Length - 3, 3));
            }
            else
            {
                kk = 0;
            }
            return kk;

        }
        [WebMethod]
        public string ConString()
        {
            string str = ConnString;
            return str;
        }
        [WebMethod]
        public DataSet getinforms(string tel)
        {
            string str = "select distinct CustomerName1, CustomerName2 from dbo.VIEW_Customers where (MobilePhone1 = '" + tel + "' or MobilePhone2 = '" + tel + "' or Telephone1 = '" + tel + "' or Telephone2 = '" + tel + "')  Group by  CustomerName1,  CustomerName2";
            return GetDataSet_czb(str, CommandType.Text);
        }


        [WebMethod]
        public DataSet OrderTime(string dressNum, string year)
        {
            //string str = "select  DressReservation.DRTTime as 时间,DressReservation.DRTType as 类型,Customers.CustomerNO as 客户编号,Customers.CustomerName1 as 先生姓名,Customers.MobilePhone1 as  先生电话,Customers.CustomerName2 as 小姐,Customers.Telephone2 as 小姐电话 from DressReservation,Customers where  DressReservation.DressChipNO='" + dressNum + "' and DressReservation.CustomerNo = Customers.CustomerNO";
            //string str = "select CustomerName1 as '男姓名', CustomerName2 as '女姓名',MobilePhone as '联系电话', DRTType as '类别' , CustomerName as '礼服师',DRTTime as '预约时间' from (DressReservation left join Customers on DressReservation.MobilePhone=Customers.MobilePhone1 or DressReservation.MobilePhone = Customers.MobilePhone2)where DressReservation.MobilePhone='"+dressNum+"' ";
            //string str = "select  DressReservation.DRTTime as 时间,DressReservation.DRTType as 类型,Customers.CustomerNO as 客户编号,Customers.CustomerName1 as 先生姓名,Customers.MobilePhone1 as  先生电话,Customers.CustomerName2 as 小姐,Customers.Telephone2 as 小姐电话 from(DressReservation left join Customers on DressReservation.MobilePhone=Customers.MobilePhone1 or DressReservation.MobilePhone = Customers.MobilePhone2) where DressReservation.DressChipNO='" + dressNum + "'and   DressReservation.DRTTime like 'year%' order by DRTTime desc";////
            string str = "select  DressReservation.DRTTime as 时间,DressReservation.DRTType as 类型,Customers.CustomerNO as 客户编号,Customers.CustomerName1 as 先生姓名,Customers.MobilePhone1 as  先生电话,Customers.CustomerName2 as 小姐,Customers.Telephone2 as 小姐电话 from(DressReservation left join Customers on DressReservation.MobilePhone=Customers.MobilePhone1 or DressReservation.MobilePhone = Customers.MobilePhone2) where DressReservation.DressChipNO='" + dressNum + "' and datediff(yy,DressReservation.DRTTime,'" + year + "')=0 order by DRTTime desc";

            return GetDataSet_czb(str, CommandType.Text);
        }
        [WebMethod]
        public DataSet DressCzOrDj(string datetime)
        {

            //string str = "select distinct CustomerName1 as '男姓名', CustomerName2 as '女姓名',MobilePhone as '联系电话',  DRTTime as '婚期',DressChipNO as '礼服编号' , DRTRemark as '备注' , DRTRemark1 as '捧花', CustomerName as '礼服师',Money as '金额', DRTID as '主键',OrderTime as '预约时间' from (DressReservation left join Customers on DressReservation.MobilePhone = Customers.MobilePhone1 or DressReservation.MobilePhone = Customers.MobilePhone2 )  where DRTTime = '" + datetime + "' order by MobilePhone";


            //string str = "select distinct CustomerName1 as '男姓名', CustomerName2 as '女姓名',OtherPople as '外来人员',MobilePhone as '联系电话',  DRTTime as '婚期',DressChipNO as '礼服编号' , DRTRemark as '备注' , DRTRemark1 as '捧花', CustomerName as '礼服师',Money as '金额', DRTID as '主键',OrderTime as '预约时间',DRTType as '类型' from (DressReservation left join Customers on DressReservation.MobilePhone = Customers.MobilePhone1 or DressReservation.MobilePhone = Customers.MobilePhone2)  where DRTTime = '" + datetime + "' and (CustomerName1 is not null and CustomerName1 <>'') and (CustomerName2 is not null and CustomerName2 <>'') order by MobilePhone desc";


            string str = "select distinct Customers as '女姓名',OtherPople as '外来人员',MobilePhone as '联系电话',  DRTTime as '婚期',DressChipNO as '礼服编号' , DRTRemark as '备注' , DRTRemark1 as '捧花', CustomerName as '礼服师',Money as '金额', DRTID as '主键',OrderTime as '预约时间',DRTType as '类型',man as '总备注',DressTakeClothesDate as 取衣日期 from DressReservation  where DRTTime = '" + datetime + "' order by MobilePhone desc";


            //string str = "select distinct CustomerName1 as '男姓名', CustomerName2 as '女姓名',MobilePhone as '联系电话',  DRTTime as '婚期',DressChipNO as '礼服编号' , DRTRemark as '备注' , DRTRemark1 as '捧花', CustomerName as '礼服师',Money as '金额', DRTID as '主键',OrderTime as '预约时间',DRTType as '类型' from (DressReservation left join Customers on DressReservation.MobilePhone = Customers.MobilePhone1 or DressReservation.MobilePhone = Customers.MobilePhone2)  where DRTTime = '" + datetime + "'";
            return GetDataSet_czb(str, CommandType.Text);

        }
        [WebMethod]
        public DataSet DressCzOrDjdddd(string datetime, string type, string num)
        {
            //string str = "select distinct Customers as '女姓名',OtherPople as '外来人员',MobilePhone as '联系电话',  DRTTime as '婚期',DressChipNO as '礼服编号' , DRTRemark as '备注' , DRTRemark1 as '捧花', CustomerName as '礼服师',Money as '金额', DRTID as '主键',OrderTime as '预约时间',DRTType as '类型',man as '总备注' from DressReservation  where    DRTTime = '" + datetime + "' and DRTType='" + type + "' order by MobilePhone desc";
            string str = "  select distinct Customers as '女姓名',OtherPople as '外来人员',MobilePhone as '联系电话',  DRTTime as '婚期',DressReservation.DressChipNO as '礼服编号' , DRTRemark as '备注' , DRTRemark1 as '捧花', CustomerName as '礼服师',Money as '金额', DRTID as '主键',OrderTime as '预约时间',DRTType as '类型',man as '总备注',DressTheme as '主题',DressTakeClothesDate as 取衣日期 from DressReservation,DressInfo  where DATEDIFF(DD,DRTTime,'" + datetime + "')=0 and DRTType='" + type + "' and DressInfo.DressID like '" + num + "%' and DressInfo.DressChipNO=DressReservation.DressChipNO order by MobilePhone desc  ";

            return GetDataSet_czb(str, CommandType.Text);

        }
        public DataSet DressCzOrDjdddOfTakeDressDate(string datetime, string type, string num)
        {
            //string str = "select distinct Customers as '女姓名',OtherPople as '外来人员',MobilePhone as '联系电话',  DRTTime as '婚期',DressChipNO as '礼服编号' , DRTRemark as '备注' , DRTRemark1 as '捧花', CustomerName as '礼服师',Money as '金额', DRTID as '主键',OrderTime as '预约时间',DRTType as '类型',man as '总备注' from DressReservation  where    DRTTime = '" + datetime + "' and DRTType='" + type + "' order by MobilePhone desc";
            string str = "  select distinct Customers as '女姓名',OtherPople as '外来人员',MobilePhone as '联系电话',  DRTTime as '婚期',DressReservation.DressChipNO as '礼服编号' , DRTRemark as '备注' , DRTRemark1 as '捧花', CustomerName as '礼服师',Money as '金额', DRTID as '主键',OrderTime as '预约时间',DRTType as '类型',man as '总备注',DressTheme as '主题',DressTakeClothesDate as 取衣日期 from DressReservation,DressInfo  where DATEDIFF(DD,DressTakeClothesDate,'" + datetime + "')=0 and DRTType='" + type + "' and DressInfo.DressID like '" + num + "%' and DressInfo.DressChipNO=DressReservation.DressChipNO order by MobilePhone desc  ";

            return GetDataSet_czb(str, CommandType.Text);

        }
        [WebMethod]
        public DataSet DressCzOrDjzh(string datetime, string type, string dresschipno)
        {
            string str = "  select distinct Customers as '女姓名',OtherPople as '外来人员',MobilePhone as '联系电话',  DRTTime as '婚期',DressReservation.DressChipNO as '礼服编号' , DRTRemark as '备注' , DRTRemark1 as '捧花', CustomerName as '礼服师',Money as '金额', DRTID as '主键',OrderTime as '预约时间',DRTType as '类型',man as '总备注',DressTheme as '主题' from DressReservation,DressInfo  where DATEDIFF(DD,DRTTime,'" + datetime + "')=0 and DRTType='" + type + "' and DressReservation.DressChipNO='" + dresschipno + "' and DressInfo.DressChipNO=DressReservation.DressChipNO order by MobilePhone desc  ";

            return GetDataSet_czb(str, CommandType.Text);

        }
        [WebMethod]
        public DataSet DressCzOrDjzhs(string datetime, string type, string dresschipno)
        {
            string str = "  select distinct Customers as '女姓名',OtherPople as '外来人员',MobilePhone as '联系电话',  DRTTime as '婚期',DressReservation.DressChipNO as '礼服编号' , DRTRemark as '备注' , DRTRemark1 as '捧花', CustomerName as '礼服师',Money as '金额', DRTID as '主键',OrderTime as '预约时间',DRTType as '类型',man as '总备注',BeforeDay as 前期,AfterDay as 后期 from DressReservation  where DATEDIFF(DD,DRTTime,'" + datetime + "')=0 and DRTType='" + type + "' and DressChipNO='" + dresschipno + "'  order by MobilePhone desc  ";

            return GetDataSet_czb(str, CommandType.Text);

        }
        [WebMethod]
        public bool updateOrdersDresser(string orderNmuber, string dresser)
        {
            string str = "update Orders set ClothesEmployeeNO='" + dresser + "' where OrderNO='" + orderNmuber + "'";
            return ExecuteSQL_czb(str, CommandType.Text);
        }
        [WebMethod]
        public DataSet dressCzO(string datetime)
        {
            string str = "select distinct CustomerName1 as '男姓名', CustomerName2 as '女姓名',OtherPople as '外来人员',MobilePhone as '联系电话',  DRTTime as '婚期',DressChipNO as '礼服编号' , DRTRemark as '备注' , DRTRemark1 as '捧花', CustomerName as '礼服师',Money as '金额', DRTID as '主键',OrderTime as '预约时间',DRTType as '类型' from (DressReservation left join Customers on DressReservation.MobilePhone = Customers.MobilePhone1 or DressReservation.MobilePhone = Customers.MobilePhone2)  where DRTTime = '" + datetime + "' and CustomerName1='' order by MobilePhone desc";
            return GetDataSet_czb(str, CommandType.Text);
        }

        [WebMethod]
        public DataSet PhInfor(string str, string tel, int k)
        {
            //string strs = "select DressReservation.CustomerName as 礼服师,DressReservation.MobilePhone as 顾客电话,DressReservation.DRTRemark1 as 捧花号,DressReservation.DRTTime as 婚期 from DressReservation where datediff(d,DressReservation.DRTTime,convert(datetime,'" + str + "',120))=0";
            //string strs = "select distinct DressReservation.CustomerName as 礼服师,DressReservation.MobilePhone as 顾客电话,Customers as 客户, DressReservation.OtherPople as 外来客户,DressReservation.DRTRemark1 as 捧花号,DressReservation.DRTTime as 婚期 from DressReservation where DressReservation.DRTTime='" + str + "'";
            //string strs = "select distinct CustomerName as 礼服师,MobilePhone as 顾客电话,Customers as 客户, OtherPople as 外来客户,DRTRemark1 as 捧花号,DRTTime as 婚期,DRTType as 类型 from DressReservation  where DressReservation.DRTTime='" + str + "'";
            //string strs = "select distinct DressChipNO as  芯片号 ,CustomerName as 礼服师,MobilePhone as 顾客电话,Customers as 客户, OtherPople as 外来客户,DRTRemark1 as 捧花号,DRTTime as 婚期,DRTType as 类型 from DressReservation  where DressReservation.DRTTime='" + str + "' group by MobilePhone";
            string strs = "";
            if (k == 1)
            {
                ////strs = "select distinct DRTID,DressChipNO as  芯片号 ,CustomerName as 礼服师,MobilePhone as 顾客电话,Customers as 客户, OtherPople as 外来客户,DRTRemark1 as 捧花号,DRTTime as 婚期,DRTType as 类型 from DressReservation  where DressReservation.DRTTime='" + str + "' and MobilePhone='" + tel + "' order by MobilePhone";
                strs = "select distinct Customers as 客户, OtherPople as 外来客户,DRTRemark1 as 捧花号,MobilePhone as 顾客电话,  CustomerName as 礼服师,DRTTime as 婚期,DRTType as 类型 from DressReservation  where DressReservation.DRTTime='" + str + "'  and MobilePhone='" + tel + "' order by MobilePhone";
            }
            if (k == 2)
            {
                ////strs = "select distinct DRTID,DressChipNO as  芯片号 ,CustomerName as 礼服师,MobilePhone as 顾客电话,Customers as 客户, OtherPople as 外来客户,DRTRemark1 as 捧花号,DRTTime as 婚期,DRTType as 类型 from DressReservation  where DressReservation.DRTTime='" + str + "' order by MobilePhone";
                strs = "select distinct Customers as 客户, OtherPople as 外来客户,DRTRemark1 as 捧花号,MobilePhone as 顾客电话,  CustomerName as 礼服师,DRTTime as 婚期,DRTType as 类型 from DressReservation  where DressReservation.DRTTime='" + str + "' order by MobilePhone";
            }
            if (k == 3)
            {
                //strs = "select distinct DRTID,DressChipNO as  芯片号 ,CustomerName as 礼服师,MobilePhone as 顾客电话,Customers as 客户, OtherPople as 外来客户,DRTRemark1 as 捧花号,DRTTime as 婚期,DRTType as 类型 from DressReservation  where  MobilePhone='" + tel + "' order by MobilePhone";
                strs = "select distinct Customers as 客户, OtherPople as 外来客户,DRTRemark1 as 捧花号,MobilePhone as 顾客电话,  CustomerName as 礼服师,DRTTime as 婚期,DRTType as 类型 from DressReservation  where  MobilePhone='" + tel + "'  order by MobilePhone";

            }
            if (k == 4)
            {
                //strs = "select distinct DressChipNO as  芯片号,DressReservation.CustomerName as 礼服师,DressReservation.MobilePhone as 顾客电话,Customers as 客户,DressReservation.DRTRemark1 as 捧花号,DRTID,DressReservation.DRTTime as 婚期 from DressReservation order by Customers";
                ////strs = "select distinct DRTID,DressChipNO as  芯片号 ,CustomerName as 礼服师,MobilePhone as 顾客电话,Customers as 客户, OtherPople as 外来客户,DRTRemark1 as 捧花号,DRTTime as 婚期,DRTType as 类型 from DressReservation order by Customers";
                strs = "select distinct Customers as 客户, OtherPople as 外来客户,DRTRemark1 as 捧花号,MobilePhone as 顾客电话,  CustomerName as 礼服师,DRTTime as 婚期,DRTType as 类型 from DressReservation   order by MobilePhone";
            }
            return GetDataSet_czb(strs, CommandType.Text);
        }
        [WebMethod]
        public DataSet Employee(string text)
        {
            string str = "select * from Employee where EmployeeNO='" + text + "'";
            return GetDataSet_czb(str, CommandType.Text);
        }
        [WebMethod]
        public DataSet DresslateIn(int a, string k)
        {
            //string str = "select DressChipNO as  芯片号,DressID as 礼服编号,DressName as 礼服名称,DressBrand as 礼服品牌,DressTimes as 使用次数,DressState as 礼服状态,DressBorrowAddress as 实际所在地点,DressRemark2 as 出发点,DressDestionation as 目的地,DressOperator as 操作者,dressRemark1 as 出库日期  from DressInfo  where (DressState!='在库' or DressState!='入库') and DATEDIFF( day, dressRemark1, getdate())='" + a + "' and DressID like '" + k + "%'";
            //string str = "select DressChipNO as  芯片号,DressID as 礼服编号,DressName as 礼服名称,DressBrand as 礼服品牌,DressTimes as 使用次数,DressState as 礼服状态,DressBorrowAddress as 实际所在地点,DressRemark2 as 出发点,DressDestionation as 目的地,DressOperator as 操作者,dressRemark1 as 出库日期  from DressInfo  where (DressState!='在库' and DressState!='入库' and DressState!='接收' and DressState!='淘汰' and DressState!='出租-出库' and DressState!='外拍-出库'and DressState!='清洗-出库') and DATEDIFF( day, dressRemark1, getdate())='" + a + "' and DressID like '" + k + "%'";
            //string str = "select DressChipNO as  芯片号,DressID as 礼服编号,DressName as 礼服名称,DressBrand as 礼服品牌,DressTimes as 使用次数,DressState as 礼服状态,DressBorrowAddress as 实际所在地点,DressRemark2 as 出发点,DressDestionation as 目的地,DressOperator as 操作者,dressRemark1 as 出库日期  from DressInfo  where (DressState='出租-出库' or DressState='外拍-出库' or DressState='清洗-出库') and DATEDIFF( day, dressRemark1, getdate())='" + a + "' and DressID like '" + k + "%'";
            string str = "select DressChipNO as  芯片号,DressID as 礼服编号,DressName as 礼服名称,DressBrand as 礼服品牌,DressTimes as 使用次数,DressState as 礼服状态,DressBorrowAddress as 实际所在地点,DressRemark2 as 出发点,DressDestionation as 目的地,DressOperator as 操作者,dressRemark1 as 出库日期  from DressInfo  where (DressState='出租-出库' or DressState='外拍-出库' or DressState='清洗-出库') and DATEDIFF( day, dressRemark1, getdate())='" + a + "' and DressID like '" + k + "%'";
            return GetDataSet_czb(str, CommandType.Text);
        }
        [WebMethod]
        public DataSet ShowPhotoes(string id)
        {
            string sql = "select DressImageUrl,DressImageUrl2  from DressInfo where  DressChipNO='" + id + "'";
            return GetDataSet_czb(sql, CommandType.Text);
        }
        [WebMethod]
        public DataSet TSdate(string times, string num)
        {
            string sql = "select DRTTime as 时间,DRTType as 类型,CustomerNO as 客户编号 from DressReservation where  '" + times + "'=convert(char(10),DRTTime,120) and DressChipNO='" + num + "'";
            return GetDataSet_czb(sql, CommandType.Text);
        }
        [WebMethod]
        public DataSet GetCustemoerName(string text)
        {
            //string str = "select [CustomerName2] as 女顾客,CustomerNO as 订单号 from [Customers] where [Telephone2] ='" + text + "' or [MobilePhone2] ='" + text + "'";
            string str = "select OrderNO as 订单号,CustomerName2 as 女顾客  from [Orders],Customers where Customers.CustomerNO=Orders.CustomerNO and (Customers.[MobilePhone2]='" + text + "' or  Customers.[Telephone2]='" + text + "')";
            return GetDataSet_czb(str, CommandType.Text);
        }
        [WebMethod]
        public DataSet TaoTaiDress(string text, bool text1, string time1, string time2, string d)
        {
            string sql;
            if (text1 == false)
            {
                sql = "select DressChipNO as  芯片号,DressID as 礼服编号,DressName as 礼服名称,DressBrand as 礼服品牌,DressTimes as 使用次数,DressState as 礼服状态,DressRemark as 备注,DressCreateName as 操作员,DressCreateTime as 创建时间,DressRemark1 as 淘汰时间  from DressInfo where DressState='" + text + "' and DressID like '" + d + "%' order by DressRemark1 desc";
                //sql = "select DressChipNO as  芯片号,DressID as 礼服编号 from DressInfo where   DressID like '" + d + "%' order by DressChipNO desc";
            }
            else
            {
                //sql = "select DressChipNO as  芯片号,DressID as 礼服编号,DressName as 礼服名称,DressBrand as 礼服品牌,DressTimes as 使用次数,DressState as 礼服状态,DressRemark as 备注,DressCreateName as 操作员,DressCreateTime as 创建时间,DressRemark1 as 淘汰时间  from DressInfo where DressState='淘汰' and  DressRemark1>='" + time1 + "' and DressRemark1<='" + time2 + "' order by DressRemark1 desc";
                sql = "select DressChipNO as  芯片号,DressID as 礼服编号,DressName as 礼服名称,DressBrand as 礼服品牌,DressTimes as 使用次数,DressState as 礼服状态,DressRemark as 备注,DressCreateName as 操作员,DressCreateTime as 创建时间,DressRemark1 as 淘汰时间  from DressInfo where DressState='淘汰' and DATEDIFF(DD,DressRemark1,'" + time2 + "')>=0 and DATEDIFF(DD,DressRemark1,'" + time1 + "')<=0  and DressID like '" + d + "%'";
            }
            return GetDataSet_czb(sql, CommandType.Text);
        }
        [WebMethod]
        public DataSet SearchClothes1(string sql)
        {
            //string sSql = "select distinct top 400 CardNO, CustomerNO, OrderNO, FPH, CustomerName1, CustomerName2, MobilePhone1, MobilePhone2, SuiteName, SuitePrice, PreClothesDate, ClothesAddress, ClothesEmployee, ClothesDate, ClothesMemory, ShootAddressN, PreShootDateN, ShootEmployeeN, ShootDateN, ShootMemoryN,PreShootDateW, ShootAddressW, ShootEmployeeW, ShootDateW, ShootMemoryW,OrderEmployee, OrderDate,LF, Process from  VIEW_Orders  where 1=1 " + sql;
            string sSql = "select distinct top 400 CardNO, VIEW_Orders.CustomerNO, VIEW_Orders.OrderNO, FPH, CustomerName1, CustomerName2, MobilePhone1, MobilePhone2, SuiteName, SuitePrice, PreClothesDate, ClothesAddress, ClothesEmployeeNO, ClothesDate, ClothesMemory, ShootAddressN, PreShootDateN, ShootEmployeeN, ShootDateN, ShootMemoryN,PreShootDateW, ShootAddressW, ShootEmployeeW, ShootDateW, ShootMemoryW,OrderEmployee, OrderDate,LF, Process from  VIEW_Orders left join  DressReservation on VIEW_Orders.OrderNO=DressReservation.CustomerNo   where 1=1 " + sql;
            return ExecuteDataSet(sSql, "SearchClothes");
        }
        [WebMethod]
        public DataSet updateDatess(string str)
        {
            string sql = "select DressChipNO as  芯片号,DressID as 礼服编号 from DressInfo where DressID like '" + str + "%'";
            return GetDataSet_czb(sql, CommandType.Text);
        }
        [WebMethod]
        public bool updateAllDate(string dressid, string dressChipno)
        {
            //string str = string.Format("update [DressInfo] set DressID='{1}' where DressChipNO='{0}'", data.DressChipNO, data.DressID);
            string str = string.Format("update [DressInfo] set DressID='" + dressid + "' where DressChipNO='" + dressChipno + "'");
            return ExecuteSQL_czb(str, CommandType.Text);
        }
        [WebMethod]
        public DataSet selectmaxDressIdsss(string text)
        {
            string str = "select top(1) DressChipNO as  芯片号,DressID as 礼服编号 from DressInfo where DressID like '%" + text + "%' order by DressID desc";
            return GetDataSet_czb(str, CommandType.Text);
        }
        [WebMethod]
        public bool updateServioon(int id, string marryTime, string remark, string penghua, string jine, string xinpian, string type)
        {
            string str = "update DressReservation set DRTTime='" + marryTime + "',DRTRemark='" + remark + "',DRTRemark1='" + penghua + "',Money='" + jine + "',DressChipNO='" + xinpian + "',DRTType='" + type + "' where DRTID='" + id + "'";
            return ExecuteSQL_czb(str, CommandType.Text);
        }
        [WebMethod]
        public DataSet selectMarryDay(string dressid, string times)
        {
            string str = "select DressChipNO,DressID,DRTID,DRTTime from [DressReservation] where [DressChipNO]='" + dressid + "' and DATEDIFF(DAY,DRTTime,'" + times + "')=0 ";
            return GetDataSet_czb(str, CommandType.Text);
        }
        [WebMethod]
        public DataSet getorders(string dressid, DateTime times)
        {
            string str = "select * from DressReservation where dresschipno='" + dressid + "' and DRTTime='" + times + "' and [DRTType]='自定义'";
            return GetDataSet_czb(str, CommandType.Text);
        }
        [WebMethod]
        public DataSet pd(string dressid, DateTime time)
        {
            string str = "select * from DressReservation where [DressChipNO]='" + dressid + "' and [DRTTime]='" + time + "'";
            return GetDataSet_czb(str, CommandType.Text);
        }

        [WebMethod]
        public DataSet getOrder_n(string dressid, string time1, string time2)
        {
            //string str = "select [DressChipNO],[DRTID],[BeforeDay],[DRTTime],[AfterDay],[DRTType] from DressReservation where DressChipNO='" + dressid + "' and datediff(day,[DRTTime],'" + time1 + "')<=0 and datediff(day,[DRTTime],'"+time2+"')>=0";
            string str = "select [DressChipNO],[DRTID],[BeforeDay],[DRTTime],[AfterDay],[DRTType] from DressReservation where DressChipNO='" + dressid + "' and datediff(day,[DRTTime],'" + time1 + "')<=0 and datediff(day,[DRTTime],'" + time2 + "')>=0";
            return GetDataSet_czb(str, CommandType.Text);
        }
        [WebMethod]
        public DataSet lastOrBefor(string dressid, string time1, string time2)
        {
            string str = "select [DressChipNO],[DRTID],[BeforeDay],[DRTTime],[AfterDay],[DRTType] from DressReservation where DressChipNO='" + dressid + "' and BeforeDay='" + time1 + "' or AfterDay='" + time2 + "'";
            return GetDataSet_czb(str, CommandType.Text);
        }
        [WebMethod]
        public DataSet lastOrBefor1(string dressid, string time1)
        {
            string str = "select [DressChipNO],[DRTID],[BeforeDay],[DRTTime],[AfterDay],[DRTType],[BeforeDayOfMonthOrYear],[BeforeRestOfTime] from DressReservation where DressChipNO='" + dressid + "' and [BeforeDayOfMonthOrYear]='" + time1 + "'";
            return GetDataSet_czb(str, CommandType.Text);
        }
        [WebMethod]
        public DataSet lastOrBefor2(string dressid, string time1)
        {
            string str = "select [DressChipNO],[DRTID],[BeforeDay],[DRTTime],[AfterDay],[DRTType],[AfterDayOfMonthOrYear],[RestOfAfterday] from DressReservation where DressChipNO='" + dressid + "' and [AfterDayOfMonthOrYear]='" + time1 + "'";
            return GetDataSet_czb(str, CommandType.Text);
        }
        [WebMethod]
        public DataSet test()
        {
            string str = "select * from DressReservation";
            return GetDataSet_czb(str, CommandType.Text);
        }
        [WebMethod]
        public bool insertOrder(string times, string remark, string user, string ph, string phone, string dresser, string type, string wlry, string customers, string money, string time)
        {
            string str = "insert into DressReservation (DRTTime,DRTRemark,DRTOperator,DRTRemark1,[MobilePhone],CustomerName,[DRTType],[OtherPople],[Customers],Money,OrderTime) values ('" + times + "','" + remark + "','" + user + "','" + ph + "','" + phone + "','" + dresser + "','" + type + "','" + wlry + "','" + customers + "','" + money + "','" + time + "')";
            return ExecuteSQL_czb(str, CommandType.Text);
        }
        [WebMethod]
        public bool insertOrder11(string remark, string ph, string phone, string dresser, string type, string wlry, string customers, string money, string time)
        {
            string str = "insert into DressReservation (DRTRemark,DRTRemark1,[MobilePhone],CustomerName,[DRTType],[OtherPople],[Customers],Money,OrderTime) values ('" + remark + "','" + ph + "','" + phone + "','" + dresser + "','" + type + "','" + wlry + "','" + customers + "','" + money + "','" + time + "')";
            return ExecuteSQL_czb(str, CommandType.Text);
        }
        [WebMethod]
        public DataSet SelectOrder1(string datetime)
        {
            string str = "select distinct man as '男姓名', Customers as '女姓名',MobilePhone as '联系电话',  DRTTime as '婚期',DressChipNO as '礼服编号' , DRTRemark as '备注' , DRTRemark1 as '捧花', CustomerName as '礼服师',Money as '金额', DRTID as '主键',OrderTime as '预约时间',DRTType as '类型' from DressReservation  where DRTTime = '" + datetime + "' and (Customers is not null and Customers<>'') order by MobilePhone";
            return GetDataSet_czb(str, CommandType.Text);
        }
        [WebMethod]
        public DataSet SelectOrder2(string datetime)
        {
            string str = "select distinct man as '男姓名', Customers as '女姓名',OtherPople as '外来人员',MobilePhone as '联系电话',  DRTTime as '婚期',DressChipNO as '礼服编号' , DRTRemark as '备注' , DRTRemark1 as '捧花', CustomerName as '礼服师',Money as '金额', DRTID as '主键',OrderTime as '预约时间',DRTType as '类型' from DressReservation  where DRTTime = '" + datetime + "' and (OtherPople is not null and OtherPople<>'') order by MobilePhone";
            return GetDataSet_czb(str, CommandType.Text);
        }
        [WebMethod]
        public bool updateTePh(string ph, string time, string tel)
        {
            //string str = "update DressReservation set DRTRemark1='" + ph + "',DRTTime='" + time + "' where DRTID='" + id + "'";
            string str = "update DressReservation set DRTRemark1='" + ph + "'  where MobilePhone='" + tel + "' and DRTTime=' " + time + "' ";
            return ExecuteSQL_czb(str, CommandType.Text);
        }
        [WebMethod]
        public bool deletePh(string id)
        {
            string str = "delete DressReservation where DRTID='" + id + "'";
            return ExecuteSQL_czb(str, CommandType.Text);
        }

        [WebMethod]
        public DataSet selectTsPh(string type)
        {
            string str;
            if (type == "")
            {
                str = "select DRTID,MobilePhone as 客户电话,Customers as 客户,OtherPople as 外来人员,DRTType as 类别,DRTRemark1 as 捧花信息,DRTTime as 婚期,OrderTime as 预约时间,CustomerName as 礼服师,Money as 金额,DRTRemark as '备注' from DressReservation where DRTType='特殊' or  DRTType='婚期未定'  order by  OrderTime desc";
            }
            if (type.Equals("婚期未定"))
            {
                str = "select DRTID,MobilePhone as 客户电话,Customers as 客户,OtherPople as 外来人员,DRTType as 类别,DRTRemark1 as 捧花信息,DRTTime as 婚期,OrderTime as 预约时间,CustomerName as 礼服师,Money as 金额,DRTRemark as '备注' from DressReservation where  DRTType='婚期未定'  order by  OrderTime desc";
            }
            else
            {
                str = "select DRTID,MobilePhone as 客户电话,Customers as 客户,OtherPople as 外来人员,DRTType as 类别,DRTRemark1 as 捧花信息,DRTTime as 婚期,OrderTime as 预约时间,CustomerName as 礼服师,Money as 金额,DRTRemark as '备注' from DressReservation where DRTType='特殊' order by  OrderTime desc";
            }
            return GetDataSet_czb(str, CommandType.Text);
        }
        [WebMethod]
        public bool updateTsPh(string id, string ph, string times, string money, string remark, string type)
        {
            string str = "update DressReservation set  DRTRemark1='" + ph + "',DRTTime='" + times + "',Money='" + money + "',DRTRemark='" + remark + "',[DRTType]='" + type + "' where DRTID='" + id + "'";
            return ExecuteSQL_czb(str, CommandType.Text);
        }
        [WebMethod]
        public DataSet selsome(string k)
        {
            string str = "select  DressChipNO as 芯片号,DressID as 礼服编号 from DressInfo where DressID like '" + k + "%' and DressState!='淘汰'";
            return GetDataSet_czb(str, CommandType.Text);
        }
        [WebMethod]
        public bool insertOrderWd(string dressid, string tel, string customer, string OtherPople, string flower, string type, string dresser, string remark, string time, string mony)
        {
            string str = "insert into DressReservation (DressChipNO,MobilePhone,Customers,OtherPople,DRTRemark1,DRTType,CustomerName,DRTRemark,OrderTime,Money) values ('" + dressid + "','" + tel + "','" + customer + "','" + OtherPople + "','" + flower + "','" + type + "','" + dresser + "','" + remark + "','" + time + "','" + mony + "')";
            return ExecuteSQL_czb(str, CommandType.Text);
        }
        [WebMethod]
        public DataSet getinserotherYd(string customerNo, string dresschipNo, string customers, string moblibphone, string drttime, string customername, string ordertime, string drtoperator)
        {
            string str = "select DressChipNO from DressReservation where CustomerNo='" + customerNo + "' and DressChipNO='" + dresschipNo + "' and Customers='" + customers + "' and MobilePhone='" + moblibphone + "'and DRTTime='" + drttime + "'and CustomerName='" + customername + "' and OrderTime='" + ordertime + "' and DRTOperator='" + drtoperator + "'";
            return GetDataSet_czb(str, CommandType.Text);
        }
        [WebMethod]
        public bool inserootherYd(string customerNo, string dresschipNo, string customers, string moblibphone, string drttime, string customername, string ordertime, string drtoperator, string type, string adressOfPa)
        {
            //string str = "insert into DressReservation (CustomerNo,DressChipNO,Customers,MobilePhone,DRTTime,CustomerName,OrderTime,DRTOperator,DRTType) values ('" + customerNo + "','" + dresschipNo + "','" + customers + "','" + moblibphone + "','" + drttime + "','" + customername + "','" + ordertime + "','" + drtoperator + "','"+type+"')";
            string str = "insert into DressReservation (CustomerNo,DressChipNO,Customers,MobilePhone,DRTTime,CustomerName,OrderTime,DRTOperator,DRTType,DRTRemark1) values ('" + customerNo + "','" + dresschipNo + "','" + customers + "','" + moblibphone + "','" + drttime + "','" + customername + "','" + ordertime + "','" + drtoperator + "','" + type + "','" + adressOfPa + "')";

            return ExecuteSQL_czb(str, CommandType.Text);
        }
        [WebMethod]
        public DataSet selectorderWd()
        {
            //string str = "select distinct CustomerName1 as '男姓名', CustomerName2 as '女姓名',MobilePhone as '联系电话',   DRTRemark as '备注' , DRTRemark1 as '捧花',DressChipNO as '芯片号', CustomerName as '礼服师', DRTID as '主键',Money as '金额',OrderTime as '预约时间' from (DressReservation left join Customers on DressReservation.MobilePhone = Customers.MobilePhone1 or DressReservation.MobilePhone = Customers.MobilePhone2)  where  DRTType='婚期未定'";
            //string str = " select distinct CustomerName1 as '男姓名', CustomerName2 as '女姓名',OtherPople as '外来人员',MobilePhone as '联系电话',  DRTTime as '婚期',DressChipNO as '礼服编号' , DRTRemark as '备注' , DRTRemark1 as '捧花', CustomerName as '礼服师',Money as '金额', DRTID as '主键',OrderTime as '预约时间',DRTType as '类型' from (DressReservation left join Customers on DressReservation.MobilePhone = Customers.MobilePhone1 or DressReservation.MobilePhone = Customers.MobilePhone2)  where  DRTType='婚期未定' order by MobilePhone desc";
            string str = " select distinct  CustomerName as '女姓名',OtherPople as '外来人员',MobilePhone as '联系电话',  DRTTime as '婚期',DressChipNO as '礼服编号' , DRTRemark as '备注' , DRTRemark1 as '捧花', CustomerName as '礼服师',Money as '金额', DRTID as '主键',OrderTime as '预约时间',DRTType as '类型' from DressReservation  where  DRTType='婚期未定' order by MobilePhone desc";

            return GetDataSet_czb(str, CommandType.Text);
        }

        [WebMethod]
        public int selectBS(string OrderNum)
        {
            int k = 0; ;
            string str = "select [DressChipNO] from [DressReservation] where CustomerNo='" + OrderNum + "'";
            DataSet ds = GetDataSet_czb(str, CommandType.Text);
            if (ds.Tables[0].Rows.Count > 0)
            {
                k = 1;
            }
            else
            {
                k = 0;
            }
            ds.Dispose();
            return k;
        }

        //[WebMethod]
        //public bool updateOrder(string id, string libm, string tel, string customer, string wlPople, string ph, string type, int beforeDay, int afterday, string marryday, string dresser, string money, string remark)
        //{
        //    string str = "update DressReservation set  DressChipNO='" + libm + "',[MobilePhone]='" + tel + "',[Customers]='" + customer + "',[OtherPople]='" + wlPople + "',DRTRemark1='" + ph + "',[DRTType]='" + type + "',BeforeDay='" + beforeDay + "',AfterDay='" + afterday + "',DRTTime='" + marryday + "',CustomerName='" + dresser + "',[Money]='" + money + "',DRTRemark='" + remark + "' where [DRTID]='" + id + "'";
        //    return ExecuteSQL_czb(str, CommandType.Text);
        //}
        [WebMethod]
        /////////////////////////////历史数据表管理
        public DataSet selectHistroy(string time1, string time2)
        {
            string str = "select DHID as 主键, DressChipNO as  芯片号,DressID as 礼服编号,DHstatus as 礼服状态,DHTimes as 使用次数,DHOperator as 操作人,DHOPTime as 操作时间,[DHRemark] as 备注 from DressHistory where datediff(dd,DHOPTime,'" + time1 + "')<=0 and datediff(dd,DHOPTime,'" + time2 + "')>=0 order by DHOPTime desc";
            return GetDataSet_czb(str, CommandType.Text);
        }
        [WebMethod]
        public bool delteHistory(string id)
        {
            string str = "delete DressHistory where DHID='" + id + "'";
            return ExecuteSQL_czb(str, CommandType.Text);
        }

        [WebMethod]
        public DataSet selectHouqi(string dressBorrowAddress, string dressRemark2, string dressDestionation, string states)
        {
            string condition = "";

            string str = "select DressChipNO as 芯片号,DressState as 状态,DressBorrowAddress as 现所在地,DressRemark2 as 出发点,DressDestionation as 目的地,DressRemark1 as 出库日期,DressOperator as 操作者 from DressInfo ";
            if (!string.IsNullOrEmpty(dressBorrowAddress))
            {
                condition = "DressBorrowAddress='" + dressBorrowAddress + "'";
            }
            if (!string.IsNullOrEmpty(dressRemark2))
            {
                if (condition.Length > 0)
                {
                    condition += " and ";
                }
                condition += "DressRemark2='" + dressRemark2 + "'";
            }
            if (!string.IsNullOrEmpty(dressDestionation))
            {
                if (condition.Length > 0)
                {
                    condition += " and ";
                }
                condition += "DressDestionation='" + dressDestionation + "'";
            }
            if (condition.Length > 0)
            {
                str += "  where  " + condition;

                if (dressRemark2.Equals("洗衣房") && dressBorrowAddress == "")
                {
                    str += "  and DressState='出库' and  DressState!='淘汰'";
                }
                else if (dressBorrowAddress == "")
                {
                    str += "  and DressState='清洗-出库' and DressState!='淘汰'";
                }
                else if (dressBorrowAddress != "")
                {
                    str += "  and DressState!='淘汰'";
                }
            }
            else
            {
                str += "  where DressState='清洗-出库'";

            }
            return GetDataSet_czb(str, CommandType.Text);
        }
        /////////礼服师管理表
        [WebMethod]
        public DataSet selectDrressName(string id)
        {
            string str = "select EmployeeName as 员工姓名 from Employee where EmployeeNO='" + id + "' or EmployeeNO2='" + id + "'";
            return GetDataSet_czb(str, CommandType.Text);
        }
        [WebMethod]
        public DataSet selectFloor()
        {
            string str = "select distinct Floor,Remark1 from DresserManager";
            return GetDataSet_czb(str, CommandType.Text);
        }
        [WebMethod]
        public DataSet selectStates()
        {
            string str = "select distinct States from DresserManager";
            return GetDataSet_czb(str, CommandType.Text);
        }
        [WebMethod]
        public DataSet selctPostition()
        {
            string str = "select distinct Postition from DresserManager";
            return GetDataSet_czb(str, CommandType.Text);
        }
        [WebMethod]
        public bool deleteDressImage(string id)
        {
            string str = "delete DressImageUrl where id='" + id + "'";
            return ExecuteSQL_czb(str, CommandType.Text);
        }
        //[WebMethod]
        //public DataSet SelectTable(string employeeNum, string employeeName, string postition, string sex, string floor, string states, string remark1, string remark2)
        //{
        //    string condition = "";

        //    string str = "select distinct  Id as 编号,EmployeeNum as 员工工号,EmployeeName as 员工姓名,Postition as 职位,Sex as 性别,Floor as 所在楼层,States as 状态,CreaterPeople as 创建人,CreateTime as  创建时间,Remark1 as  店名,Remark2 as  品牌 from DresserManager ";
        //    if (!string.IsNullOrEmpty(employeeNum))
        //    {
        //        condition += " EmployeeNum='" + employeeNum + "'";
        //    }
        //    if (!string.IsNullOrEmpty(employeeName))
        //    {
        //        if (condition.Length > 0)
        //        {
        //            condition += " and ";
        //        }
        //        condition += " EmployeeName='" + employeeName.ToString().Trim() + "'";
        //    }
        //    if (!string.IsNullOrEmpty(postition))
        //    {
        //        if (condition.Length > 0)
        //        {
        //            condition += " and ";
        //        }
        //        condition += " Postition='" + postition + "'";
        //    }
        //    if (!string.IsNullOrEmpty(sex))
        //    {
        //        if (condition.Length > 0)
        //        {
        //            condition += " and ";
        //        }
        //        condition += " Sex='" + sex.ToString().Trim() + "'";
        //    }
        //    if (!string.IsNullOrEmpty(floor))
        //    {
        //        if (condition.Length > 0)
        //        {
        //            condition += " and ";
        //        }
        //        condition += " Floor='" + floor.ToString().Trim() + "'";
        //    }
        //    if (!string.IsNullOrEmpty(states))
        //    {
        //        if (condition.Length > 0)
        //        {
        //            condition += " and ";
        //        }
        //        condition += "States='" + states + "'";
        //    }
        //    if (!string.IsNullOrEmpty(remark1))
        //    {
        //        if (condition.Length > 0)
        //        {
        //            condition += " and ";
        //        }
        //        condition += " Remark1='" + remark1 + "'";
        //    }
        //    if (!string.IsNullOrEmpty(remark2))
        //    {
        //        if (condition.Length > 0)
        //        {
        //            condition += "and";
        //        }
        //        condition += "  Remark2='" + remark2 + "'";
        //    }
        //    if (!string.IsNullOrEmpty(condition))
        //    {
        //        str += "where  " + condition;
        //    }
        //    return GetDataSet_czb(str, CommandType.Text);
        //}
        ///通过登录账号获取馆名、登录账户的职位
        //public DataSet SelectTable(string username)
        //{
        //    string str = "select DepartmentName as 部门名称,EmployeeDuty as 职位, from Employee,Department where (EmployeeNO2='" + username + "' or EmployeeNO='" + username + "') and  Employee.DepartmentNO=Department.DepartmentNO";
        //    return GetDataSet_czb(str,CommandType.Text);
        //}
        ///// <summary>
        ///// 查询职位
        ///// </summary>
        ///// <param name="shu"></param>
        ///// <returns></returns>
        [WebMethod]
        public DataSet selctPosition(string shu)
        {
            string str = "select ConfigValue as 职位名称 from Config where ConfigNO='" + shu + "'";
            return GetDataSet_czb(str, CommandType.Text);
        }

        [WebMethod]
        public DataSet getnewDresser(string departmentno)
        {
            string str = "select EmployeeName as 员工姓名 from Employee where  departmentno='" + departmentno + "'";
            return GetDataSet_czb(str, CommandType.Text);
        }
        [WebMethod]
        public DataSet bindChangGuan()
        {
            string str = "select elementname as 礼服场馆,[ElementNO] as 场馆编号 from Element where ElementType='礼服场馆'";
            return GetDataSet_czb(str, CommandType.Text);
        }

        public DataSet getdresser(string departmentno, string duty)
        {
            string condition = "";
            //string str = "select EmployeeNO2 as 员工姓名,EmployeeDuty as 员工职务,DepartmentNO as 部门编号 from Employee";
            string str = "select EmployeeName as 员工姓名,EmployeeDuty as 员工职务,DepartmentNO as 部门编号 from Employee";
            if (!string.IsNullOrEmpty(departmentno))
            {
                condition += " DepartmentNO='" + departmentno + "'";
            }
            if (!string.IsNullOrEmpty(duty))
            {
                if (condition.Length > 0)
                {
                    condition += " and ";
                }
                condition += " EmployeeDuty='" + duty + "'";
            }
            if (!string.IsNullOrEmpty(condition))
            {
                str += " where " + condition;
                str += " and  EmployeeName not like '礼服师%' and  IsDelete='0'";
            }
            return GetDataSet_czb(str, CommandType.Text);
        }
        //[WebMethod]
        public DataSet getBrandFromDresserControl(string employeeNum)
        {
            string str = "select distinct Remark2 as  品牌 from DresserManager   ";
            string condition = "";
            if (!string.IsNullOrEmpty(employeeNum))
            {
                condition += " EmployeeNum= '" + employeeNum + "'";
            }
            if (condition.Length > 0)
            {
                str += " where " + condition;
            }
            return GetDataSet_czb(str, CommandType.Text);

        }
        [WebMethod]
        public bool updateDresserManager(int id, string employeeNum, string employeeName, string postition, string sex, string floor, string states, string createrPeople, string createTime, string remark1, string remark2)
        {
            string str = string.Format("update DresserManager set EmployeeNum='" + employeeNum + "',EmployeeName='" + employeeName + "',Postition='" + postition + "',Sex='" + sex + "',Floor='" + floor + "',States='" + states + "',CreaterPeople='" + createrPeople + "',CreateTime='" + createTime + "',Remark1='" + remark1 + "',Remark2='" + remark2 + "' where Id='" + id + "'");
            return ExecuteSQL_czb(str, CommandType.Text);
        }
        [WebMethod]
        public bool insertDresserManager(string employeeNum, string employeeName, string postition, string sex, string floor, string states, string createrPeople, string createTime, string remark1, string remark2)
        {
            //string str = string.Format("insert into DresserManager (EmployeeNum,EmployeeName,Postition,Sex,Floor,States,CreaterPeople,CreateTime,Remark1) values ('{1}','{2}','{3}','{4}','{5}','{6}','{7}','{8}','{9}')", data.Id, data.EmployeeNum, data.EmployeeName, data.Postition, data.Sex, data.Floor, data.States, data.CreaterPeople, data.CreateTime, data.Remark1);
            string str = string.Format("insert into DresserManager (EmployeeNum,EmployeeName,Postition,Sex,Floor,States,CreaterPeople,CreateTime,Remark1,Remark2) values ('" + employeeNum + "','" + employeeName + "','" + postition + "','" + sex + "','" + floor + "','" + states + "','" + createrPeople + "','" + createTime + "','" + remark1 + "','" + remark2 + "')");

            return ExecuteSQL_czb(str, CommandType.Text);
        }
        [WebMethod]
        public bool deleteDresserManager(int id)
        {
            string str = string.Format("delete DresserManager where id='{0}'", id);
            return ExecuteSQL_czb(str, CommandType.Text);
        }
        [WebMethod]
        public DataSet selectNewDress(string dressid, string time1, string time2)
        {
            string str = "select DressChipNO as 芯片号,DressID as 礼服编号,DressTimes as 使用次数,DressCreateTime as 创建时间,DressCreateName as 创建者 from DressInfo where DressID like '" + dressid + "%' and DATEDIFF(DD,DressCreateTime,'" + time1 + "')<=0 and  DATEDIFF(DD,DressCreateTime,'" + time2 + "')>=0";
            return GetDataSet_czb(str, CommandType.Text);
        }

        //礼服控制表
        [WebMethod]
        public DataSet getDressContronlTable(string time)
        {
            string str = "select Id as 主键,DateTime as 日期,CustomerName as 姓名,CustomerTel as 电话,MarryDate as 婚期,Dresser as 礼服师,Remark as 备注,CreatePeople as 创建人,CreateTimes as 使用日期,CreateTime as 创建日期 from DressControlTable where datediff(dd,CreateTimes,'" + time + "')=0 order by DateTime asc";
            return GetDataSet_czb(str, CommandType.Text);
        }
        [WebMethod]
        public bool UpdateDressContronlTable(int id, string dateTime, string customerName, string customerTel, string marryDate, string dresser, string remark)
        {
            //string str = string.Format("update DressControlTable set DateTime='{1}',CustomerName='{2}',CustomerTel='{3}',MarryDate='{4}',Dresser='{5}',Remark='{6}' where  Id='{0}'", data.Id, data.DateTime, data.CustomerName, data.CustomerTel, data.MarryDate, data.Dresser, data.Remark);
            string str = string.Format("update DressControlTable set DateTime='" + dateTime + "',CustomerName='" + customerName + "',CustomerTel='" + customerTel + "',MarryDate='" + marryDate + "',Dresser='" + dresser + "',Remark='" + remark + "' where  Id='" + id + "'");
            return ExecuteSQL_czb(str, CommandType.Text);
        }
        [WebMethod]
        public bool insertDressContronlTable(string createTime, string dateTime, string customerName, string customerTel, string marryDate, string dresser, string remark, string createPeople, string createTimes)
        {
            ////string str = string.Format("insert into DressControlTable ( CreateTime,DateTime,CustomerName,CustomerTel,MarryDate,Dresser,Remark,CreatePeople,CreateTimes) values ('{1}','{2}','{3}','{4}','{5}','{6}','{7}','{8}','{9}')", data.Id, data.CreateTime, data.DateTime, data.CustomerName, data.CustomerTel, data.MarryDate, data.Dresser, data.Remark, data.CreatePeople, data.CreateTimes);
            string str = string.Format("insert into DressControlTable ( CreateTime,DateTime,CustomerName,CustomerTel,MarryDate,Dresser,Remark,CreatePeople,CreateTimes) values ('" + createTime + "','" + dateTime + "','" + customerName + "','" + customerTel + "','" + marryDate + "','" + dresser + "','" + remark + "','" + createPeople + "','" + createTimes + "')");
            return ExecuteSQL_czb(str, CommandType.Text);
        }
        [WebMethod]
        public bool DelDressControlTable(int id)
        {
            string str = string.Format("delete DressControlTable where Id='" + id + "'");
            return ExecuteSQL_czb(str, CommandType.Text);
        }
        [WebMethod]
        public DataSet getEmployee(string username)
        {
            string str = "select Department.DepartmentName as 部门名称,Employee.EmployeeDuty as 职位 from  Department,Employee where  Department.DepartmentNO=Employee.DepartmentNO and Employee.EmployeeNO='" + username + "'  ";
            return GetDataSet_czb(str, CommandType.Text);
        }
        [WebMethod]
        public DataSet getyy(string customerNo, string customers, string otherPeople, string mobilePhone)
        {
            string condition = "";

            //string str = "select DressReservation.DressChipNO as 芯片号,CustomerNo as 订单号,Customers as 客户姓名,OtherPople as 外来客人,MobilePhone as 电话号码,DRTTime as 使用日期,DRTRemark1 as 捧花,DRTRemark as 备注,CustomerName as 礼服师,Money as 金额,man as 总备注,OrderTime as 创建时期，DressTheme as '主题' from DressReservation,DressInfo where  DressInfo";
            string str = "select DressReservation.DressChipNO as 芯片号,CustomerNo as 订单号,Customers as 客户姓名,OtherPople as 外来客人,MobilePhone as 电话号码,DRTTime as 使用日期,DRTRemark1 as '捧花/拍摄地点',DRTRemark as 备注,CustomerName as 礼服师,Money as 金额,man as 总备注,OrderTime as 创建时期,DressTheme as 主题,DRTType as 类型,DressInfo.DressID as 芯片编号,DRTID as 序号 from DressReservation,DressInfo  ";

            if (!string.IsNullOrEmpty(customerNo.ToString().Trim()))
            {
                condition = " CustomerNo='" + customerNo.ToString().Trim() + "'";
            }
            if (!string.IsNullOrEmpty(customers))
            {
                if (condition.Length > 0)
                {
                    condition += " and ";
                }
                condition += " (Customers='" + customers.ToString().Trim() + "'";

            }
            if (!string.IsNullOrEmpty(otherPeople))
            {
                if (condition.Length > 0)
                {
                    condition += " or ";
                }
                condition += "OtherPople='" + otherPeople + "')";
            }
            if (!string.IsNullOrEmpty(customers) && string.IsNullOrEmpty(otherPeople))
            {
                condition += ")";
            }
            if (!string.IsNullOrEmpty(mobilePhone.ToString().Trim()))
            {
                if (condition.Length > 0)
                {
                    condition += " and ";

                }
                condition += " MobilePhone='" + mobilePhone.ToString().Trim() + "'";
            }
            if (!string.IsNullOrEmpty(condition))
            {
                str += " where " + condition + "and DressInfo.DressChipNO=DressReservation.DressChipNO order by DRTType";
            }
            return GetDataSet_czb(str, CommandType.Text);
        }

        //规则表
        [WebMethod]
        public DataSet getDRessRule(string dRNumber, string dRName)
        {
            string str = "select DRRemark as 所属店 from DressRule where  DRNumber='" + dRNumber + "' and DRName='" + dRName + "'";
            return GetDataSet_czb(str, CommandType.Text);
        }
        [WebMethod]
        public DataSet getLouCheng(string s)
        {
            string str = "select DRName as 楼层 from DressRule where DRRemark='" + s + "'";
            return GetDataSet_czb(str, CommandType.Text);
        }
        [WebMethod]
        public DataSet SelectStatesTaoTai(string text, string states)
        {
            string str = " select DressChipNO as  芯片号,DressID as 礼服编号,DressName as 礼服名称,DressBrand as 礼服品牌,DressTimes as 使用次数,DressState as 礼服状态,DressRemark as 备注,DressCreateName as 操作员,DressCreateTime as 创建时间,DressRemark1 as 淘汰时间  from DressInfo where DressState='" + states + "' and  DressChipNO='" + text + "' order by DressRemark1 desc";
            return GetDataSet_czb(str, CommandType.Text);
        }
        [WebMethod]
        public bool updateDressTimes(string dressChipNO, string dressTimes)//uu
        {
            string str = string.Format("update DressInfo set DressTimes='" + dressTimes + "' where DressChipNO='" + dressChipNO + "'");
            return ExecuteSQL_czb(str, CommandType.Text);
        }
        //捧花管理
        [WebMethod]
        public DataSet SelectDressFlower(string storeNum, string flowerNum, string flowerName)
        {
            string str = "select Did as '主键',DstoreNum as '店编号',DflowerNum as '捧花编号',DflowerName as '捧花名称' from DressFlower ";
            string condition = "";
            if (!string.IsNullOrEmpty(storeNum))
            {
                condition += "DstoreNum ='" + storeNum + "'";
            }
            if (!string.IsNullOrEmpty(flowerNum))
            {
                if (condition.Length >= 0)
                {
                    condition += " and ";
                }
                condition += " DflowerNum='" + flowerNum + "'";
            }
            if (!string.IsNullOrEmpty(flowerName))
            {
                if (condition.Length > 0)
                {
                    condition += " and ";
                }
                condition += " DflowerName='" + flowerName + "'";
            }

            if (!string.IsNullOrEmpty(condition))
            {
                str += " where " + condition + "order by DflowerNum desc";
            }

            return GetDataSet_czb(str, CommandType.Text);

        }
        [WebMethod]
        public bool insertDressFlower(string storeNum, string flowernum, string flowerName)
        {
            //string str = "insert DressFlower (DflowerNum,Dflower) values ('""')";
            string str = string.Format("insert DressFlower (DstoreNum,DflowerNum,DflowerName) values ('" + storeNum + "','" + flowernum + "','" + flowerName + "')");
            return ExecuteSQL_czb(str, CommandType.Text);
        }
        [WebMethod]
        public bool updateDreessFlower(int id, string storeNum, string flowerNum, string flowerName)
        {
            string str = string.Format("update DressFlower set DstoreNum='" + storeNum + "',DflowerNum='" + flowerNum + "',DflowerName='" + flowerName + "' where Did='" + id + "'");
            return ExecuteSQL_czb(str, CommandType.Text);
        }
        [WebMethod]
        public bool deleteDressFlower(int id)
        {
            string str = "delete DressFlower where Did='" + id + "'";
            return ExecuteSQL_czb(str, CommandType.Text);
        }
        //开场白
        [WebMethod]
        public DataSet selectRemark1(string guanming, string dianming, string fenlei)
        {
            string str = "select distinct Remark1 as 主题 from DressKaiChangBai where Dianming='" + guanming + "' and Guanming='" + dianming + "' and Remark3='" + fenlei + "'";
            return GetDataSet_czb(str, CommandType.Text);
        }
        [WebMethod]
        public DataSet selectRemark3(string guanming, string dianming)
        {
            string str = "select distinct Remark3 as 分类 from DressKaiChangBai where Dianming='" + guanming + "' and Guanming='" + dianming + "'";
            return GetDataSet_czb(str, CommandType.Text);
        }
        [WebMethod]
        public DataSet selectRemark3a(string dianming)
        {
            string str = "select distinct Guanming as 馆名 from DressKaiChangBai where Dianming='" + dianming + "'";
            return GetDataSet_czb(str, CommandType.Text);
        }
        [WebMethod]
        public bool insertDressKaichangbai(string didian, string dianming, string path, string remark, string remark1, string remark2, string remark3, string createpeople, string createtime)
        {
            string str = string.Format("insert into DressKaiChangBai(Dianming,guanming,PicturePath,Remark,Remark1,Remark2,Remark3,createPeople,createtime) values ('" + didian + "','" + dianming + "','" + path + "','" + remark + "','" + remark1 + "','" + remark2 + "','" + remark3 + "','" + createpeople + "','" + createtime + "')");
            return ExecuteSQL_czb(str, CommandType.Text);
        }
        [WebMethod]
        public bool updateDressKaichangbai(int id, string path, string remark, string remark1, string remark2, string remark3)
        {
            string str = string.Format("update DressKaiChangBai set PicturePath='" + path + "',Remark='" + remark + "',Remark1='" + remark1 + "',Remark2='" + remark2 + "',Remark3='" + remark3 + "' where id='" + id + "' ");
            return ExecuteSQL_czb(str, CommandType.Text);
        }
        [WebMethod]
        public bool deleteDressKaichangbai(int id)
        {
            string str = string.Format("delete DressKaiChangBai where id='" + id + "'");
            return ExecuteSQL_czb(str, CommandType.Text);
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="didian"></param>
        /// <param name="dianming"></param>
        /// <param name="path"></param>
        /// <param name="remark"> 说吃</param>
        /// <param name="remark1">主题</param>
        /// <param name="remark2">照片名称</param>
        /// <param name="remark3">主题分类</param>
        /// <returns></returns>
        [WebMethod]
        public DataSet selectDressKaichangbai(string didian, string dianming, string path, string remark, string remark1, string remark2, string remark3)
        {
            string condition = "";
            string str = "select id as 主键,Dianming as 店名,Guanming as 馆名,PicturePath as 路径,Remark as 备注,Remark1 as 主题,Remark2   as 图片名称,Remark3 as 标题,createPeople as  创建人,createtime as 创建时间 from DressKaiChangBai ";
            //string str = "select id as 主键,Dianming as 店名,Guanming as 馆名,Remark as 备注,Remark1 as 主题,Remark2   as 图片名称,Remark3 as 标题,createPeople as  创建人,createtime as 创建时间 from DressKaiChangBai ";

            if (!string.IsNullOrEmpty(didian))
            {
                condition += "Dianming='" + didian + "' ";
            }
            if (!string.IsNullOrEmpty(dianming))
            {
                if (condition.Length >= 0)
                {
                    condition += " and";
                }
                condition += " Guanming='" + dianming + "'";
            }
            if (!string.IsNullOrEmpty(path))
            {
                if (condition.Length >= 0)
                {
                    condition += " and";
                }
                condition += "  PicturePath='" + path + "'";
            }
            if (!string.IsNullOrEmpty(remark))
            {
                if (condition.Length >= 0)
                {
                    condition += " and ";
                }
                condition += " Remark='" + remark + "'";
            }
            if (!string.IsNullOrEmpty(remark1))
            {
                if (condition.Length >= 0)
                {
                    condition += " and ";
                }
                condition += " Remark1='" + remark1 + "'";
            }
            if (!string.IsNullOrEmpty(remark2))
            {
                if (condition.Length >= 0)
                {
                    condition += " and ";
                }
                condition += " Remark2='" + remark2 + "'";
            }
            if (!string.IsNullOrEmpty(remark3))
            {
                if (condition.Length >= 0)
                {
                    condition += " and ";
                }
                condition += " Remark3='" + remark3 + "'";
            }
            if (!string.IsNullOrEmpty(condition))
            {
                str += " where " + condition + " order by createtime desc";
            }

            return GetDataSet_czb(str, CommandType.Text);

        }


        [WebMethod]
        public DataSet selectTime(string dressChipNo, string datatime)
        {

            string str = "select DressChipNO as 芯片号,DRTTime as 拍摄日期,DRTID  as 编号 from DressReservation where datediff(dd,DRTTime,'" + datatime + "')=0 and DressChipNO='" + dressChipNo + "'";
            return GetDataSet_czb(str, CommandType.Text);
        }





        //礼服系统正则表达式
        [WebMethod]
        public bool JugeChipNo(string dressChipNO)
        {
            bool k;
            if (k = Regex.IsMatch(dressChipNO.ToString(), @"^\d{10}$"))
            {

                k = true;
            }
            else
            {
                k = false;
            }
            return k;
        }
        [WebMethod]
        public bool jugedianming(string dianming)
        {
            bool k;
            if (k = Regex.IsMatch(dianming, @"^\d{3}$"))
            {

                k = true;
            }
            else
            {
                k = false;
            }
            return k;
        }
        [WebMethod]
        public bool JugeTel(string tel)
        {
            bool tels;
            //if (tels = Regex.IsMatch(tel.ToString().Trim(), @"^(\(\d{3,4}-)|\d{3.4}-)?\d{7,8}$"))
            if (tels = Regex.IsMatch(tel.ToString().Trim(), @"^(d+-)?(d{4}-?d{7}|d{3}-?d{8}|^d{7,8})(-d+)?$"))
            {
                tels = true;
            }
            else
            {
                tels = false;
            }
            return tels;
        }
        [WebMethod]
        public bool JugeMoney(int money)
        {
            bool moneys;
            //if (moneys = Regex.IsMatch(money.ToString().Trim(), @"^\d*$"))//整数
            if (moneys = Regex.IsMatch(money.ToString().Trim(), @"^-?\d+$"))//整数
            {
                moneys = true; ;
            }
            else
            {
                moneys = false;
            }

            return moneys;
        }
        #endregion
        /// <summary>
        /// creater njro
        /// creater datetime 2012-03-29
        /// 员工介绍顾客统计明细
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet GetYGBIntroduceMX(string sql)
        {
            string sSql = @"SELECT dbo.Employee.EmployeeNO,
                           dbo.Employee.EmployeeName,
                           dbo.Department.DepartmentName, 
                           dbo.Customers.CustomerNO, 
                           dbo.Customers.CustomerName1+'  '+ dbo.Customers.CustomerName2 as Customers, 
                           dbo.Customers.CreateDate
                      FROM 
                       dbo.Employee 
                       INNER JOIN dbo.Department ON 
                       dbo.Employee.DepartmentNO = dbo.Department.DepartmentNO 
                       INNER JOIN dbo.Customers ON 
                       dbo.Employee.EmployeeNO = dbo.Customers.IntroducerCardNO
                        WHERE 1=1 AND Customers.IntroducerType='员工' " + sql +
                      @"ORDER BY Customers.CreateDate DESC";
            return ExecuteDataSet(sSql, "IntroduceCount");
        }
        /// <summary>
        /// creater njro
        /// creater datetime 2012-03-29
        /// 顾客介绍顾客统计明细
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet GetGKBIntroduceMX(string sql)
        {
            string sSql = @"SELECT 
     dbo.Customers.CustomerNO, 
     dbo.Customers.CustomerName1+' '+dbo.Customers.CustomerName2 as Customers, 
     Customers_1.CustomerName1+' '+Customers_1.CustomerName2 as CustomerName, 
     Customers_1.CreateDate, 
     Customers_1.CustomerNO AS cm2CstNo, 
     dbo.Department.DepartmentName, 
     dbo.Employee.EmployeeName    
     FROM 
     dbo.Customers INNER JOIN dbo.Customers AS Customers_1 ON 
     dbo.Customers.CustomerNO = Customers_1.IntroducerCardNO INNER JOIN dbo.Employee ON 
     Customers_1.CreateEmployee = dbo.Employee.EmployeeNO INNER JOIN dbo.Department ON 
     Customers_1.CreateDepartment = dbo.Department.DepartmentNO 
     WHERE 1=1 
     AND Customers_1.IntroducerType='客人'  " + sql +
                      @" ORDER BY Customers_1.CreateDate DESC";
            return ExecuteDataSet(sSql, "IntroduceCount");
        }


        /// <summary>
        /// author:zjj
        /// date:2011-12-10
        /// 被介绍顾客统计
        /// </summary>
        /// <param name="sql"></param>
        [WebMethod]
        public DataSet BIntroduceReport(string sql)
        {
            string sSql = "SELECT dbo.SuiteType.SuiteTypeName, dbo.Suite.SuiteName, SUM(dbo.Orders.OrderSuitePrice) AS sum, COUNT(dbo.Orders.OrderNO) AS count, dbo.Orders.SuiteNO,dbo.Orders.SuiteTypeNO FROM dbo.SuiteType INNER JOIN dbo.Orders INNER JOIN dbo.Customers ON dbo.Orders.CustomerNO = dbo.Customers.CustomerNO ON dbo.SuiteType.SuiteTypeNO = dbo.Orders.SuiteTypeNO INNER JOIN dbo.Suite ON dbo.Orders.SuiteNO = dbo.Suite.SuiteNO WHERE 1=1  AND Customers.IntroducerType in('员工','顾客')";
            if (sql != "")
                sSql += sql;
            sSql += "GROUP BY dbo.SuiteType.SuiteTypeName, dbo.Suite.SuiteName, dbo.Orders.SuiteNO, dbo.Orders.SuiteTypeNO";
            return ExecuteDataSet(sSql, "IntroduceCount");
        }
        /// <summary>
        /// author:zjj
        /// date:2011-12-12
        /// 员工介绍顾客量统计
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet EmpIntroduce(string sql)
        {
            string sSql = "SELECT dbo.Employee.EmployeeNO, dbo.Employee.EmployeeName, dbo.Department.DepartmentName,dbo.Customers.IntroducerType,COUNT(dbo.Customers.CustomerNO) AS count FROM dbo.Department INNER JOIN dbo.Employee ON dbo.Department.DepartmentNO = dbo.Employee.DepartmentNO INNER JOIN dbo.Customers ON dbo.Employee.EmployeeNO = dbo.Customers.IntroducerCardNO WHERE 1=1 ";
            if (sql != "")
                sSql += sql;
            sSql += " GROUP BY dbo.Employee.EmployeeNO, dbo.Employee.EmployeeName, dbo.Department.DepartmentName,Customers.IntroducerType ORDER BY count DESC";
            return ExecuteDataSet(sSql, "EmpIntroduceCount");
        }

        /// <summary>
        /// author:zjj
        /// date:2011-12-12
        /// 顾客介绍顾客量统计
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet CustIntroduce(string sql)
        {
            string sSql = "SELECT dbo.Customers.CustomerNO,CASE WHEN Customers.CustomerName1 <> '' THEN Customers.CustomerName1  WHEN Customers.CustomerName1 = '' and Customers.CustomerName2<>'' THEN Customers.CustomerName2  ELSE '未知' END AS '姓名', COUNT(Customers_1.CustomerNO) AS count, Customers_1.IntroducerType FROM dbo.Customers INNER JOIN dbo.Customers AS Customers_1 ON dbo.Customers.CustomerNO = Customers_1.IntroducerCardNO WHERE 1=1 ";
            if (sql != "")
                sSql += sql;
            sSql += " GROUP BY dbo.Customers.CustomerNO, Customers_1.IntroducerType,Customers.CustomerName1, Customers.CustomerName2 ORDER BY count DESC";
            return ExecuteDataSet(sSql, "CusIntroduceCount");

        }

        /// <summary>
        /// author:zjj
        /// date:2011-12-14
        /// 客户介绍顾客详细
        /// </summary>
        /// <param name="cstNo"></param>
        /// <param name="dateBegin"></param>
        /// <param name="dateEnd"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet CustIntroduceDetail(string cstNo, string dateBegin, string dateEnd)
        {
            string sSql = "SELECT dbo.Customers.CustomerNO, dbo.Customers.CustomerName1, dbo.Customers.CustomerName2, Customers_1.CustomerName1 AS cm2Name1, Customers_1.CreateDate, Customers_1.CustomerNO AS cm2CstNo, dbo.Department.DepartmentName, dbo.Employee.EmployeeName, Customers_1.CustomerName2 AS cm2Name2 FROM dbo.Customers INNER JOIN dbo.Customers AS Customers_1 ON dbo.Customers.CustomerNO = Customers_1.IntroducerCardNO INNER JOIN dbo.Employee ON Customers_1.CreateEmployee = dbo.Employee.EmployeeNO INNER JOIN dbo.Department ON Customers_1.CreateDepartment = dbo.Department.DepartmentNO WHERE 1=1 AND Customers_1.IntroducerType='客人'";
            // if (cstNo != "")
            sSql += " AND Customers.CustomerNO='" + cstNo + "'";
            if (dateBegin != "" && dateEnd != "")
                sSql += " AND datediff(dd,Customers_1.CreateDate,'" + dateBegin + "')<=0 AND datediff(dd,Customers_1.CreateDate,'" + dateEnd + "')>=0";
            sSql += " ORDER BY Customers_1.CreateDate DESC";
            return ExecuteDataSet(sSql, "CustIntroduceDetail");
        }

        /// <summary>
        /// author:zjj
        /// date:2011-12-12
        /// 查询部门
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet AllDepartment(string sql)
        {
            string sSql = "select DepartmentNO,ParDepartmentNO,DepartmentName,DepartmentManager,DepartmentDescribe,DepartmentPhone,DepartmentAddress from Department WHERE 1=1";
            if (sql != "")
            {
                sSql += sql;
            }
            return ExecuteDataSet(sSql, "CusIntroduceCount");

        }
        /// <summary>
        /// author:zjj
        /// date:2011-12-13
        /// 顾客区域统计
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SourceNum(string sql)
        {
            string sSql = "SELECT CustomerSource, COUNT(CustomerNO) AS count FROM dbo.Customers WHERE 1=1 ";
            if (sql != "")
                sSql += sql;
            sSql += " GROUP BY CustomerSource ORDER BY count DESC";
            return ExecuteDataSet(sSql, "SourceCount");
        }

        /// <summary>
        /// creater njro
        /// createtime 2012-03-27
        /// 被介绍人顾客统计
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet BIntroduceReportTwo(string sql)
        {
            string sSql = @"SELECT 
                        case when GROUPING(dbo.SuiteType.SuiteTypeName)=1 then '----总计----' 
                        else dbo.SuiteType.SuiteTypeName end  SuiteTypeName, 
                        case when GROUPING(dbo.Suite.SuiteName)=1 and GROUPING(dbo.SuiteType.SuiteTypeName)=0 then '-----小计-----' 
                        else dbo.Suite.SuiteName end  SuiteName,
                        SUM(dbo.Orders.OrderSuitePrice) AS sum,
                         COUNT(dbo.Orders.OrderNO) AS count 
                         FROM dbo.SuiteType INNER JOIN dbo.Orders INNER JOIN dbo.Customers ON 
                         dbo.Orders.CustomerNO = dbo.Customers.CustomerNO ON 
                         dbo.SuiteType.SuiteTypeNO = dbo.Orders.SuiteTypeNO INNER JOIN dbo.Suite ON 
                         dbo.Orders.SuiteNO = dbo.Suite.SuiteNO WHERE 1=1  
                         AND Customers.IntroducerType in('员工','顾客')" + sql +
            @"GROUP BY dbo.SuiteType.SuiteTypeName, 
 dbo.Suite.SuiteName, dbo.Orders.SuiteNO, dbo.Orders.SuiteTypeNO
 with rollup";
            return ExecuteDataSet(sSql, "BIntroduceReportTwo");
        }
        /// <summary>
        /// creat njro
        /// create time 2012-03-26
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SourceNumTwo(string sql)
        {
            string sSql = @"SELECT  dbo.Config.ConfigValue, COUNT(dbo.Customers.CustomerNO) AS count
FROM    dbo.Customers INNER JOIN
        dbo.Config ON dbo.Customers.CustomerSource = dbo.Config.ConfigNO
WHERE     (1 = 1) " + sql + @"GROUP BY dbo.Config.ConfigValue
union all
select '总计',COUNT(dbo.Customers.CustomerNO) AS count FROM dbo.Customers INNER JOIN
        dbo.Config ON dbo.Customers.CustomerSource = dbo.Config.ConfigNO
WHERE     (1 = 1)" + sql;
            return ExecuteDataSet(sSql, "SourceCount");
        }
        /// <summary>
        /// author:zjj
        /// date:2011-12-15
        /// 顾客区域统计明细
        /// </summary>
        /// <param name="sourceNo"></param>
        /// <param name="beginDate"></param>
        /// <param name="endDate"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SourceNumDetail(string sourceNo, string beginDate, string endDate)
        {

            string sSql = "SELECT dbo.Customers.CustomerNO, dbo.Customers.CustomerName1, dbo.Customers.CustomerName2, dbo.Employee.EmployeeName, dbo.Department.DepartmentName, dbo.Customers.CreateDate FROM   dbo.Customers INNER JOIN dbo.Department ON dbo.Customers.CreateDepartment = dbo.Department.DepartmentNO INNER JOIN dbo.Employee ON dbo.Customers.CreateEmployee = dbo.Employee.EmployeeNO WHERE 1=1 ";
            if (sourceNo == "NULL")
                sSql += " AND CustomerSource is NULL";
            else
                sSql += " AND CustomerSource='" + sourceNo + "'";

            if (beginDate != "" && endDate != "")
                sSql += " and datediff(dd,Customers.CreateDate,'" + beginDate + "')<=0 and datediff(dd,Customers.CreateDate,'" + endDate + "')>=0";
            sSql += " ORDER BY Customers.CreateDate DESC";
            return ExecuteDataSet(sSql, "SourceNumDetail");
        }
        /// <summary>
        /// creater njro
        /// create datetime:2012-03-27
        /// 顾客区域统计明细
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SourceNumDetailInfo(string sql)
        {
            string sSql = @"SELECT     TOP (100) PERCENT dbo.Config.ConfigValue, dbo.Customers.CustomerName1 + '  ' + dbo.Customers.CustomerName2 AS guke, dbo.Employee.EmployeeName, 
                      dbo.Department.DepartmentName, dbo.Customers.CreateDate
FROM         dbo.Customers INNER JOIN
                      dbo.Department ON dbo.Customers.CreateDepartment = dbo.Department.DepartmentNO INNER JOIN
                      dbo.Employee ON dbo.Customers.CreateEmployee = dbo.Employee.EmployeeNO INNER JOIN
                      dbo.Config ON dbo.Customers.CustomerSource = dbo.Config.ConfigNO
WHERE     (1 = 1)" + sql + @"ORDER BY dbo.Customers.CreateDate DESC";
            return ExecuteDataSet(sSql, "IntroduceDetail");
        }
        /// <summary>
        /// author:zjj
        /// date:2011-12-14
        /// 查询各套系介绍顾客明细
        /// </summary>
        /// <param name="suitTypeNo"></param>
        /// <param name="suitNo"></param>
        /// <param name="dateBegin"></param>
        /// <param name="dateEnd"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet BIntroduceDetail(string suitTypeNo, string depNo, string suitNo, string dateBegin, string dateEnd)
        {
            //string sSql = "SELECT  dbo.Department.DepartmentName, dbo.Employee.EmployeeName, dbo.SuiteType.SuiteTypeName, dbo.Suite.SuiteName, dbo.Customers.CustomerName1, dbo.Customers.CustomerName2, dbo.Orders.OrderSuitePrice,dbo.Orders.OrderDate FROM dbo.Employee FULL JOIN dbo.Customers FULL JOIN dbo.SuiteType FULL JOIN dbo.Orders ON dbo.SuiteType.SuiteTypeNO = dbo.Orders.SuiteTypeNO FULL JOIN dbo.Suite ON dbo.SuiteType.SuiteTypeNO = dbo.Suite.SuiteTypeNO ON dbo.Customers.CustomerNO = dbo.Orders.CustomerNO FULL JOIN dbo.Department ON dbo.Orders.orderDepartmentNo = dbo.Department.DepartmentNO ON dbo.Employee.EmployeeNO = dbo.Orders.OrderEmployeeNO WHERE 1=1 AND Customers.IntroducerType in('员工','顾客')";
            string sSql = "SELECT dbo.SuiteType.SuiteTypeName, dbo.Suite.SuiteName, dbo.Orders.OrderSuitePrice, dbo.Department.DepartmentName, dbo.Employee.EmployeeName,dbo.Orders.OrderDate, dbo.Customers.CustomerName2, dbo.Customers.CustomerName1 FROM dbo.Employee INNER JOIN dbo.SuiteType INNER JOIN dbo.Orders INNER JOIN dbo.Customers ON dbo.Orders.CustomerNO = dbo.Customers.CustomerNO ON dbo.SuiteType.SuiteTypeNO = dbo.Orders.SuiteTypeNO INNER JOIN dbo.Suite ON dbo.Orders.SuiteNO = dbo.Suite.SuiteNO INNER JOIN dbo.Department ON dbo.Orders.orderDepartmentNo = dbo.Department.DepartmentNO ON dbo.Employee.EmployeeNO = dbo.Orders.OrderEmployeeNO where 1=1  AND Customers.IntroducerType in('员工','顾客')";
            if (suitTypeNo != "")
                sSql += " AND SuiteType.SuiteTypeNO='" + suitTypeNo + "'";
            if (suitNo != "")
                sSql += " AND Suite.SuiteNO='" + suitNo + "'";
            if (dateBegin != "" && dateEnd != "")
                sSql += " AND datediff(dd,OrderDate,'" + dateBegin + "')<=0 and datediff(dd,OrderDate,'" + dateEnd + "')>=0 ";
            if (depNo != "0")
            {
                sSql += " AND Orders.orderDepartmentNo='" + depNo + "'";
            }

            sSql += " ORDER BY Orders.OrderDate DESC";
            return ExecuteDataSet(sSql, "BIntroduceDetail");
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet BIntroduceDetailTwo(string sql)
        {
            string sSql = @"SELECT dbo.SuiteType.SuiteTypeName, dbo.Suite.SuiteName, 
                            dbo.Orders.OrderSuitePrice,dbo.Customers.CustomerName2+'   '+dbo.Customers.CustomerName1 AS CustomerName,dbo.Department.DepartmentName,
                             dbo.Employee.EmployeeName,dbo.Orders.OrderDate
                              FROM dbo.Employee 
                              INNER JOIN dbo.SuiteType 
                              INNER JOIN dbo.Orders 
                              INNER JOIN dbo.Customers ON 
                              dbo.Orders.CustomerNO = dbo.Customers.CustomerNO ON 
                              dbo.SuiteType.SuiteTypeNO = dbo.Orders.SuiteTypeNO 
                              INNER JOIN dbo.Suite ON 
                              dbo.Orders.SuiteNO = dbo.Suite.SuiteNO 
                              INNER JOIN dbo.Department ON 
                              dbo.Orders.orderDepartmentNo = dbo.Department.DepartmentNO ON 
                              dbo.Employee.EmployeeNO = dbo.Orders.OrderEmployeeNO 
                              where 1=1  
                              AND Customers.IntroducerType in('员工','顾客') " + sql + @"  ORDER BY Orders.OrderDate DESC";
            return ExecuteDataSet(sSql, "BIntroduceDetailTwo");
        }
        /// <summary>
        /// author:zjj
        /// date:2011-12-14
        /// 员工介绍顾客详细
        /// </summary>
        /// <param name="empNo"></param>
        /// <param name="dateBegin"></param>
        /// <param name="dateEnd"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet EmpIntroduceDetail(string empNo, string dateBegin, string dateEnd)
        {
            string sSql = "SELECT dbo.Employee.EmployeeNO, dbo.Employee.EmployeeName, dbo.Department.DepartmentName, dbo.Customers.CustomerNO, dbo.Customers.CustomerName1, dbo.Customers.CreateDate, dbo.Customers.CustomerName2 FROM  dbo.Employee INNER JOIN dbo.Department ON dbo.Employee.DepartmentNO = dbo.Department.DepartmentNO INNER JOIN dbo.Customers ON dbo.Employee.EmployeeNO = dbo.Customers.IntroducerCardNO WHERE 1=1 AND Customers.IntroducerType='员工' ";
            if (empNo != "")
                sSql += " and EmployeeNO='" + empNo + "'";
            if (dateBegin != "" && dateEnd != "")
                sSql += " and datediff(dd,Customers.CreateDate,'" + dateBegin + "')<=0 and datediff(dd,Customers.CreateDate,'" + dateEnd + "')>=0";
            sSql += " ORDER BY Customers.CreateDate DESC";
            return ExecuteDataSet(sSql, "EmpIntroduceDetail");
        }

        #region  收银方式统计报表

        /// <summary>
        /// 收银方式部门
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public DataSet getBusinessDepartmentWay()
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append(@"select  ElementNO,ElementName from Element where ElementType='收银地点'");
            return ExecuteDataSet(strSql.ToString(), "frmCollectionWay");
        }


        /// <summary>
        /// 部门员工信息
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet getBusinessEmployeeNOWay(string sql)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append(@"select EmployeeName from Employee where 1=1 and   EmployeeDuty='Duty_16' ");
            strSql.Append(sql);
            return ExecuteDataSet(strSql.ToString(), "frmCollectionWay");
        }

        /// <summary>
        /// 收款方式金额统计 明细
        /// </summary>
        /// <param name="strsql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet getCollectionWayDetail(string strsql)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append(@"SELECT     
 dbo.CashDetail.CashWay as 收银方式,dbo.CashDetail.CashNumber as 收款金额, Department.DepartmentName 收银部门,Employee.EmployeeName 收银员工, dbo.CashSub.OrderNO as 订单编号,
dbo.CashSub.CashNO as 发票编号,dbo.CashSub.CashDate as 收银时间
FROM         dbo.Employee INNER JOIN
                      dbo.Department ON dbo.Employee.DepartmentNO = dbo.Department.DepartmentNO RIGHT OUTER JOIN
                      dbo.Cash INNER JOIN
                      dbo.CashSub ON dbo.Cash.OrderNO = dbo.CashSub.OrderNO INNER JOIN
                      dbo.CashDetail ON dbo.CashSub.CashNO = dbo.CashDetail.CashNO ON dbo.Employee.EmployeeNO = dbo.CashSub.CashEmployeeNO
                       where 1=1");
            strSql.Append(strsql);
            strSql.Append(@" order by  dbo.CashDetail.CashWay,Department.DepartmentName");
            return ExecuteDataSet(strSql.ToString(), "frmCollectionWay");
        }

        /// <summary>
        /// 收款方式金额统计 汇总
        /// </summary>
        /// <param name="strsql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet getCollectReport(string strsql)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append(@" SELECT     
 dbo.CashDetail.CashWay as 收银方式, SUM(dbo.CashDetail.CashNumber) as 收款金额
FROM         dbo.Employee INNER JOIN
                      dbo.Department ON dbo.Employee.DepartmentNO = dbo.Department.DepartmentNO RIGHT OUTER JOIN
                      dbo.Cash INNER JOIN
                      dbo.CashSub ON dbo.Cash.OrderNO = dbo.CashSub.OrderNO INNER JOIN
                      dbo.CashDetail ON dbo.CashSub.CashNO = dbo.CashDetail.CashNO ON dbo.Employee.EmployeeNO = dbo.CashSub.CashEmployeeNO
                       where 1=1");
            strSql.Append(strsql);
            strSql.Append(@" group by  dbo.CashDetail.CashWay
union all
select '----收银总额-----',SUM(dbo.CashDetail.CashNumber) from dbo.Employee INNER JOIN
             dbo.Department ON dbo.Employee.DepartmentNO = dbo.Department.DepartmentNO RIGHT OUTER JOIN
             dbo.Cash INNER JOIN
             dbo.CashSub ON dbo.Cash.OrderNO = dbo.CashSub.OrderNO INNER JOIN
             dbo.CashDetail ON dbo.CashSub.CashNO = dbo.CashDetail.CashNO ON dbo.Employee.EmployeeNO = dbo.CashSub.CashEmployeeNO
              where 1=1");
            strSql.Append(strsql);
            return ExecuteDataSet(strSql.ToString(), "frmCollectionWay");
        }


        #endregion

        #region 套系类型统计报表
        /// <summary>
        /// 套系类别
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public DataSet getSerieType()
        {
            string strSql = "select SuiteTypeName,SuiteTypeNO from SuiteType";
            return ExecuteDataSet(strSql, "frmCollectionSerieType");
        }

        /// <summary>
        /// 套系名称
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet getSerieName(string sql)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append("select SuiteName,SuiteNO  from  Suite where 1=1");
            strSql.Append(sql);

            return ExecuteDataSet(strSql.ToString(), "frmCollectionSerieType");
        }

        /// <summary>
        /// 绑定数据详细
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public DataSet getShowAll(string sql)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append(@"SELECT     dbo.SuiteType.SuiteTypeName AS 套系类型, dbo.Suite.SuiteName AS 套系名称, dbo.Cash.SuitePrice AS 套系价格, 
                      dbo.CashDetail.CashNumber AS 收款金额, dbo.CashDetail.CashWay AS 收款方式, dbo.CashSub.BusinessDepartment AS 收款部门, 
                      CashSub.BusinessEmployeeNO   AS 收款人员, dbo.Cash.CustomerName AS 客户姓名, dbo.Cash.OrderNO AS 订单编号, dbo.CashDetail.Number AS 订单数量, 
                      dbo.Orders.OrderDate AS 收款时间
FROM         dbo.Cash INNER JOIN
                      dbo.CashSub ON dbo.Cash.OrderNO = dbo.CashSub.OrderNO INNER JOIN
                      dbo.CashDetail ON dbo.CashSub.CashNO = dbo.CashDetail.CashNO INNER JOIN
                      dbo.Orders ON dbo.Cash.OrderNO = dbo.Orders.OrderNO INNER JOIN
                      dbo.OrderType ON dbo.Cash.OrderType = dbo.OrderType.OrderType INNER JOIN
                      dbo.Suite ON dbo.Orders.SuiteNO = dbo.Suite.SuiteNO INNER JOIN
                      dbo.SuiteType ON dbo.Suite.SuiteTypeNO = dbo.SuiteType.SuiteTypeNO INNER JOIN
                      dbo.Employee ON dbo.CashSub.CashEmployeeNO = dbo.Employee.EmployeeNO
WHERE     (1 = 1)");
            strSql.Append(sql);
            strSql.Append(@"ORDER BY dbo.Suite.SuiteName");//updater njro updateDataTime 2012-03-14
            return ExecuteDataSet(strSql.ToString(), "frmCollectionSerieType");

        }

        /// <summary>
        /// 套系价格汇总
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public DataSet getShowAllHuiZong(string sql)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append(@"SELECT     
case when GROUPING(dbo.SuiteType.SuiteTypeName)=1 then '----金额总计----' 
else dbo.SuiteType.SuiteTypeName end  套系类型,
case when GROUPING(dbo.Suite.SuiteName)=1 and GROUPING(dbo.SuiteType.SuiteTypeName)=0 then '---套系小计---' 
else dbo.Suite.SuiteName end  套系名称, 
SUM(dbo.CashDetail.CashNumber) AS 付款金额
                     
FROM         dbo.Cash INNER JOIN
                      dbo.CashSub ON dbo.Cash.OrderNO = dbo.CashSub.OrderNO INNER JOIN
                      dbo.CashDetail ON dbo.CashSub.CashNO = dbo.CashDetail.CashNO INNER JOIN
                      dbo.Orders ON dbo.Cash.OrderNO = dbo.Orders.OrderNO INNER JOIN
                      dbo.OrderType ON dbo.Cash.OrderType = dbo.OrderType.OrderType INNER JOIN
                      dbo.Suite ON dbo.Orders.SuiteNO = dbo.Suite.SuiteNO INNER JOIN
                      dbo.SuiteType ON dbo.Suite.SuiteTypeNO = dbo.SuiteType.SuiteTypeNO
WHERE     (1 = 1) ");
            strSql.Append(sql);
            strSql.Append(@"group by dbo.SuiteType.SuiteTypeName,dbo.Suite.SuiteName
with rollup");
            return ExecuteDataSet(strSql.ToString(), "frmCollectionSerieType");
        }
        #endregion

        #region 收款事由统计

        /// <summary>
        /// 收款事由
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public DataSet getReason()
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append("select ConfigValue, ConfigNO from  dbo.Config where dbo.Config.ConfigType = '收款事由'");
            return ExecuteDataSet(strSql.ToString(), "frmCollectionReason");
        }

        /// <summary>
        /// 收款事由汇总
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public DataSet getCollectionReason(string sql)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append(@"SELECT     dbo.CashDetail.CashWay 收款方式,dbo.Config.ConfigValue AS 收款事由, 
sum(dbo.CashDetail.CashNumber) AS 付款金额
FROM         dbo.CashDetail INNER JOIN
                      dbo.Config ON dbo.CashDetail.CashPretext = dbo.Config.ConfigNO INNER JOIN
                      dbo.CashSub ON dbo.CashDetail.CashNO = dbo.CashSub.CashNO INNER JOIN
                      dbo.Orders ON dbo.CashSub.OrderNO = dbo.Orders.OrderNO INNER JOIN
                      dbo.Customers ON dbo.Orders.CustomerNO = dbo.Customers.CustomerNO INNER JOIN
                      dbo.OrderProducts ON dbo.Orders.OrderNO = dbo.OrderProducts.OrderNO INNER JOIN
                      dbo.Suite ON dbo.Orders.SuiteNO = dbo.Suite.SuiteNO INNER JOIN
                      dbo.SuiteType ON dbo.Suite.SuiteTypeNO = dbo.SuiteType.SuiteTypeNO
WHERE     (1 = 1)");
            strSql.Append(sql);
            strSql.Append(@"GROUP BY dbo.Config.ConfigValue,dbo.CashDetail.CashWay

 union all
 select '---金额统计---','---------',sum(dbo.CashDetail.CashNumber)
 FROM         dbo.CashDetail INNER JOIN
                      dbo.Config ON dbo.CashDetail.CashPretext = dbo.Config.ConfigNO INNER JOIN
                      dbo.CashSub ON dbo.CashDetail.CashNO = dbo.CashSub.CashNO INNER JOIN
                      dbo.Orders ON dbo.CashSub.OrderNO = dbo.Orders.OrderNO INNER JOIN
                      dbo.Customers ON dbo.Orders.CustomerNO = dbo.Customers.CustomerNO INNER JOIN
                      dbo.OrderProducts ON dbo.Orders.OrderNO = dbo.OrderProducts.OrderNO INNER JOIN
                      dbo.Suite ON dbo.Orders.SuiteNO = dbo.Suite.SuiteNO INNER JOIN
                      dbo.SuiteType ON dbo.Suite.SuiteTypeNO = dbo.SuiteType.SuiteTypeNO
WHERE     (1 = 1)");
            strSql.Append(sql);
            return ExecuteDataSet(strSql.ToString(), "frmCollectionReason");
        }

        /// <summary>
        /// 收款事由明细
        /// updater njro
        /// updateTime 2012-03-15
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public DataSet getCollectionAll(string sql)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append(@"SELECT     
                            dbo.Config.ConfigValue AS 收款事由, 
                            dbo.CashDetail.CashNumber AS 付款金额,
                            dbo.CashDetail.CashWay AS 收银方式, 
                            dbo.Orders.OrderNO AS 订单编号, 
                            dbo.Suite.SuiteName AS 套系名称, 
                            dbo.Orders.SuitePrice AS 套系价格, 
                            dbo.CashSub.CashDate AS 收款时间
                            FROM         dbo.CashDetail INNER JOIN
                            dbo.Config ON dbo.CashDetail.CashPretext = dbo.Config.ConfigNO INNER JOIN
                            dbo.CashSub ON dbo.CashDetail.CashNO = dbo.CashSub.CashNO INNER JOIN
                            dbo.Orders ON dbo.CashSub.OrderNO = dbo.Orders.OrderNO INNER JOIN
                            dbo.Customers ON dbo.Orders.CustomerNO = dbo.Customers.CustomerNO INNER JOIN
                            dbo.OrderProducts ON dbo.Orders.OrderNO = dbo.OrderProducts.OrderNO INNER JOIN
                            dbo.Suite ON dbo.Orders.SuiteNO = dbo.Suite.SuiteNO INNER JOIN
                            dbo.SuiteType ON dbo.Suite.SuiteTypeNO = dbo.SuiteType.SuiteTypeNO
                            WHERE     (1 = 1)");
            strSql.Append(sql);
            strSql.Append(@"GROUP BY 
                            dbo.Config.ConfigValue, dbo.CashDetail.CashNumber, dbo.CashDetail.CashWay,
                            dbo.Orders.OrderNO, dbo.Suite.SuiteName, dbo.Orders.SuitePrice, 
                            dbo.CashSub.CashDate");
            return ExecuteDataSet(strSql.ToString(), "frmCollectionReason");
        }
        #endregion

        #region  开票人金额统计
        /// <summary>
        /// 部门
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public DataSet getDepartmentName()
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append(@"select   BusinessDepartment  from  CashSub
where BusinessDepartment<>'' and 1=1
group by BusinessDepartment
");
            return ExecuteDataSet(strSql.ToString(), "frmKPRAmountStatistic");
        }

        /// <summary>
        /// 人员
        /// </summary>
        /// <param name="sql"></param>
        [WebMethod]
        public DataSet getEmployeeName(string sql)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append(@"select    BusinessEmployeeNO  
from  CashSub
where BusinessEmployeeNO<>'' and 1=1");
            strSql.Append(sql);
            strSql.Append(@"group by BusinessEmployeeNO");
            return ExecuteDataSet(strSql.ToString(), "frmKPRAmountStatistic");
        }
        [WebMethod]
        public DataSet getKPRAmountStatisticeAll(string sql)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append(@"SELECT  (case dbo.Fn_GetEmployeeName(dbo.CashSub.BusinessEmployeeNO)  when ' ' then '开票人员为空'  else dbo.Fn_GetEmployeeName(dbo.CashSub.BusinessEmployeeNO) end) AS 开票人员, SUM(dbo.CashDetail.CashNumber) AS 收款金额
FROM         dbo.CashSub INNER JOIN dbo.CashDetail ON dbo.CashSub.CashNO = dbo.CashDetail.CashNO where 1=1 ");
            strSql.Append(sql);
            strSql.Append(@"group by dbo.CashSub.BusinessEmployeeNO");
            return ExecuteDataSet(strSql.ToString(), "frmKPRAmountStatistic");
        }
        [WebMethod]
        public DataSet getKPRAmountStaisticeMingXi(string sql)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append(@"SELECT  (case dbo.Fn_GetEmployeeName(dbo.CashSub.BusinessEmployeeNO)  when ' ' then '开票人员为空'  else dbo.Fn_GetEmployeeName(dbo.CashSub.BusinessEmployeeNO) end) AS 开票人员, dbo.CashDetail.CashNumber AS 收款金额, dbo.CashDetail.CashWay AS 收银方式, 
                     (case dbo.Fn_GetDepartmentName(dbo.CashSub.BusinessDepartment)  when ' ' then '收银部门为空' else dbo.Fn_GetDepartmentName(dbo.CashSub.BusinessDepartment)  end ) AS 收银部门,(case dbo.Cash.CustomerName when ' ' then '客户姓名为空' else dbo.Cash.CustomerName end) AS 客户姓名, dbo.Cash.CustomerPhone AS 客户电话, dbo.CashDetail.Number AS 订单数量,
                       dbo.CashDetail.CashNO AS 收银编号, dbo.CashSub.CashDate AS 收银时间 FROM    dbo.CashSub INNER JOIN dbo.CashDetail ON dbo.CashSub.CashNO = dbo.CashDetail.CashNO INNER JOIN
                      dbo.Cash ON dbo.CashSub.OrderNO = dbo.Cash.OrderNO WHERE   1=1");
            strSql.Append(sql);
            strSql.Append(@"GROUP BY dbo.CashSub.BusinessEmployeeNO, dbo.CashDetail.CashNumber, dbo.CashDetail.CashWay, dbo.CashSub.BusinessDepartment, dbo.Cash.CustomerName, 
                      dbo.Cash.CustomerPhone, dbo.CashDetail.Number, dbo.CashDetail.CashNO, dbo.CashSub.CashDate  order by dbo.CashSub.BusinessEmployeeNO");
            return ExecuteDataSet(strSql.ToString(), "frmKPRAmountStatistic");
        }
        #endregion

        #region  收银员金额统计
        /// <summary>
        /// updater njro
        /// ypdatetime 2012-04-06
        /// 收银金额统计
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet getSYYCshierAmountHuiZong(string sql)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append(@"SELECT      
                            case when GROUPING(EmployeeName)=1 then '----收银总计----' 
                            else EmployeeName end  EmployeeName,
                            case when GROUPING(CashWay)=1 and GROUPING(EmployeeName)=0 then '---人员小计---' 
                            else CashWay end  CashWay,
                            SUM(dbo.CashDetail.CashNumber) 收银金额
                            FROM         dbo.Employee INNER JOIN
                                                  dbo.Department ON dbo.Employee.DepartmentNO = dbo.Department.DepartmentNO INNER JOIN
                                                  dbo.CashDetail INNER JOIN
                                                  dbo.CashSub ON dbo.CashDetail.CashNO = dbo.CashSub.CashNO ON dbo.Employee.EmployeeNO = dbo.CashSub.CashEmployeeNO
                         where 1=1");
            strSql.Append(sql);
            strSql.Append(@"group by Employee.EmployeeName,dbo.CashDetail.CashWay
                      with rollup");
            return ExecuteDataSet(strSql.ToString(), "frmSYYCashierAmount");
        }
        [WebMethod]
        public DataSet getSYYCshierAmountAll(string sql)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append(@"SELECT      Employee.EmployeeName AS 收银人员, dbo.CashDetail.CashWay AS 收银方式, dbo.CashDetail.CashNumber AS 收银金额, 
                      dbo.Department.DepartmentName AS 收银部门, dbo.CashDetail.CashNO AS 发票编号, dbo.CashSub.CashDate AS 收银时间, dbo.Cash.CustomerName AS 客户姓名, dbo.Cash.CustomerPhone AS 客户电话, dbo.Cash.SuitePrice as  套系价格
FROM         dbo.Orders INNER JOIN
                      dbo.Employee INNER JOIN
                      dbo.Department ON dbo.Employee.DepartmentNO = dbo.Department.DepartmentNO INNER JOIN
                      dbo.CashDetail INNER JOIN
                      dbo.CashSub ON dbo.CashDetail.CashNO = dbo.CashSub.CashNO ON dbo.Employee.EmployeeNO = dbo.CashSub.CashEmployeeNO ON 
                      dbo.Orders.OrderNO = dbo.CashSub.OrderNO INNER JOIN
                      dbo.UserPower ON dbo.Employee.EmployeeNO = dbo.UserPower.EmployeeNO INNER JOIN
                      dbo.SystemPower ON dbo.UserPower.PowerID = dbo.SystemPower.ID INNER JOIN
                      dbo.Cash ON dbo.CashSub.OrderNO = dbo.Cash.OrderNO
WHERE     (1 = 1)");
            strSql.Append(sql);
            strSql.Append(@"ORDER BY 收银人员, 收银方式");
            return ExecuteDataSet(strSql.ToString(), "frmSYYCashierAmount");
        }
        #endregion




        /// <summary>
        /// 看样组统计
        /// creater njro
        /// datatime 2012-06-04
        /// </summary>
        /// <param name="sql"></param>
        [WebMethod]
        public DataSet ChipPlace(string sql)
        {
            //SELECT dbo.Element.ElementName as 看样地点, SUM(dbo.CashDetail.CashNumber) AS 加选金额,COUNT(dbo.CashSub.OrderNO) AS 订单数量 FROM dbo.Department 
            //                INNER JOIN dbo.Element ON dbo.Department.DepartmentNO = dbo.Element.ElementNO INNER JOIN dbo.CashSub 
            //                INNER JOIN dbo.CashDetail ON dbo.CashSub.CashNO = dbo.CashDetail.CashNO ON dbo.Department.DepartmentName = dbo.CashSub.BusinessDepartment 
            //                WHERE (dbo.CashDetail.CashPretext = 'SKSY_3JF') AND (dbo.Element.ElementType = '看样地点') 
            StringBuilder strSql = new StringBuilder();
            strSql.Append(@"  SELECT     
                              dbo.Department.DepartmentName, 
                                dbo.Employee.EmployeeName,
                                SUM(dbo.Orders.SuitePrice)AS 套系价格,
                                SUM(dbo.CashDetail.CashNumber) AS 加选金额,
                                COUNT(dbo.Employee.EmployeeName) AS 订单总量                      
                            FROM      dbo.Orders INNER JOIN
                                                  dbo.Department ON dbo.Orders.ChooseAddress = dbo.Department.DepartmentNO INNER JOIN
                                                  dbo.Employee ON dbo.Orders.ChooseEmployeeNO = dbo.Employee.EmployeeNO INNER JOIN
                                                  dbo.CashSub ON dbo.Orders.OrderNO = dbo.CashSub.OrderNO INNER JOIN
                                                  dbo.CashDetail ON dbo.CashSub.CashNO = dbo.CashDetail.CashNO
                            WHERE    1=1");
            strSql.Append(sql);
            strSql.Append(@"GROUP BY dbo.Department.DepartmentName, dbo.Employee.EmployeeName");
            DataSet ds = ExecuteDataSet(strSql.ToString(), "Orders");
            return ds;
        }
        /// <summary>
        /// 看样业绩统计总表
        /// creater njro
        /// create datatime 2012-05-16
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet GetLookSuites(string sql)
        {//and (datediff(DD,ChooseDate,'2000-01-16 15:29:09')<=0 and  datediff(DD,ChooseDate,'2012-05-16 15:29:09')>=0)
            string sSql = @"select ElementName 看样楼层,EmployeeName 工作人员,
 '艺术1000以下'=COUNT(case when SuitePrice<1000 and SuiteTypeNO='YS' " + sql + @"  then '1000 以下' else null end),
 '金额'= sum(case when  SuitePrice<1000 and SuiteTypeNO='YS' " + sql + @" then SuitePrice else 0 end),
 '艺术1000-2000'=COUNT(case when SuitePrice>=1000 and SuitePrice<2000 and SuiteTypeNO='YS' " + sql + @" then '1000-2000' else null end),
 '金额1'= sum(case when SuitePrice>=1000 and SuitePrice<2000 and SuiteTypeNO='YS' " + sql + @" then SuitePrice else 0 end),
 '艺术2000-3000'=COUNT(case when SuitePrice>=2000 and SuitePrice<3000 and SuiteTypeNO='YS' " + sql + @" then '2000-3000' else null end),
 '金额2'= sum(case when SuitePrice>=2000 and SuitePrice<3000 and SuiteTypeNO='YS' " + sql + @" then SuitePrice else 0 end),
 '艺术3000-4000'=COUNT(case when SuitePrice>=3000 and SuitePrice<4000 and SuiteTypeNO='YS' " + sql + @" then '3000-4000' else null end),
 '金额3'= sum(case when SuitePrice>=3000 and SuitePrice<4000 and SuiteTypeNO='YS' " + sql + @" then SuitePrice else 0 end),
 '艺术4000-5000'=COUNT(case when SuitePrice>=4000 and SuitePrice<5000 and SuiteTypeNO='YS' " + sql + @" then '4000-5000' else null end),
 '金额4'= sum(case when SuitePrice>=4000 and SuitePrice<5000 and SuiteTypeNO='YS' " + sql + @" then SuitePrice else 0 end),
 '艺术5000-6000'=COUNT(case when SuitePrice>=5000 and SuitePrice<6000 and SuiteTypeNO='YS' " + sql + @" then '5000-6000' else null end),
 '金额5'= sum(case when SuitePrice>=5000 and SuitePrice<6000 and SuiteTypeNO='YS' " + sql + @" then SuitePrice else 0 end),
 '艺术6000-7000'=COUNT(case when SuitePrice>=6000 and SuitePrice<7000 and SuiteTypeNO='YS' " + sql + @" then '6000-7000' else null end),
 '金额6'= sum(case when SuitePrice>=6000 and SuitePrice<7000 and SuiteTypeNO='YS' " + sql + @" then SuitePrice else 0 end),
 '艺术7000-8000'=COUNT(case when SuitePrice>=7000 and SuitePrice<8000 and SuiteTypeNO='YS' " + sql + @" then '7000-8000' else null end),
 '金额7'= sum(case when SuitePrice>=7000 and SuitePrice<8000 and SuiteTypeNO='YS' " + sql + @" then SuitePrice else 0 end),
 '艺术8000-9000'=COUNT(case when SuitePrice>=8000 and SuitePrice<9000 and SuiteTypeNO='YS' " + sql + @" then '8000-9000' else null end),
 '金额8'= sum(case when SuitePrice>=8000 and SuitePrice<9000 and SuiteTypeNO='YS' " + sql + @" then SuitePrice else 0 end),
 '艺术9000以上'=COUNT(case when SuitePrice>9000 and SuiteTypeNO='YS' " + sql + @"  then '9000 以上' else null end),
 '金额9'= sum(case when  SuitePrice>9000 and SuiteTypeNO='YS' " + sql + @" then SuitePrice else 0 end), 
 '婚纱1000以下'=COUNT(case when SuitePrice<1000  then '1000 以下' else null end),
 '金额10'= sum(case when  SuitePrice<1000 and SuiteTypeNO='HS' then SuitePrice else 0 end),
 '婚纱1000-2000'=COUNT(case when SuitePrice>=1000 and SuitePrice<2000 and SuiteTypeNO='HS' " + sql + @" then '1000-2000' else null end),
 '金额11'= sum(case when SuitePrice>=1000 and SuitePrice<2000 and SuiteTypeNO='HS'" + sql + @" then SuitePrice else 0 end),
 '婚纱2000-3000'=COUNT(case when SuitePrice>=2000 and SuitePrice<3000 and SuiteTypeNO='HS' " + sql + @" then '2000-3000' else null end),
 '金额12'= sum(case when SuitePrice>=2000 and SuitePrice<3000 and SuiteTypeNO='HS' " + sql + @" then SuitePrice else 0 end),
 '婚纱3000-4000'=COUNT(case when SuitePrice>=3000 and SuitePrice<4000 and SuiteTypeNO='HS' " + sql + @" then '3000-4000' else null end),
 '金额13'= sum(case when SuitePrice>=3000 and SuitePrice<4000 and SuiteTypeNO='HS' " + sql + @" then SuitePrice else 0 end),
 '婚纱4000-5000'=COUNT(case when SuitePrice>=4000 and SuitePrice<5000 and SuiteTypeNO='HS' " + sql + @" then '4000-5000' else null end),
 '金额14'= sum(case when SuitePrice>=4000 and SuitePrice<5000 and SuiteTypeNO='HS' " + sql + @" then SuitePrice else 0 end),
 '婚纱5000-6000'=COUNT(case when SuitePrice>=5000 and SuitePrice<6000 and SuiteTypeNO='HS' " + sql + @" then '5000-6000' else null end),
 '金额15'= sum(case when SuitePrice>=5000 and SuitePrice<6000 and SuiteTypeNO='HS' " + sql + @" then SuitePrice else 0 end),
 '婚纱6000-7000'=COUNT(case when SuitePrice>=6000 and SuitePrice<7000 " + sql + @" then '6000-7000' else null end),
 '金额16'= sum(case when SuitePrice>=6000 and SuitePrice<7000 and SuiteTypeNO='HS' " + sql + @" then SuitePrice else 0 end),
 '婚纱7000-8000'=COUNT(case when SuitePrice>=7000 and SuitePrice<8000 and SuiteTypeNO='HS' " + sql + @" then '7000-8000' else null end),
 '金额17'= sum(case when SuitePrice>=7000 and SuitePrice<8000 and SuiteTypeNO='HS' " + sql + @" then SuitePrice else 0 end),
 '婚纱8000-9000'=COUNT(case when SuitePrice>=8000 and SuitePrice<9000 and SuiteTypeNO='HS' " + sql + @" then '8000-9000' else null end),
 '金额18'= sum(case when SuitePrice>=8000 and SuitePrice<9000 and SuiteTypeNO='HS' " + sql + @" then SuitePrice else 0 end),
 '婚纱9000以上'=COUNT(case when SuitePrice>9000 and SuiteTypeNO='HS' " + sql + @"  then '9000 以上' else null end),
 '金额19'= sum(case when  SuitePrice>9000 and SuiteTypeNO='HS' " + sql + @" then SuitePrice else 0 end),  
 '全家福1000以下'=COUNT(case when SuitePrice<1000 and SuiteTypeNO='YS00000' " + sql + @"  then '1000 以下' else null end),
 '金额20'= sum(case when  SuitePrice<1000 and SuiteTypeNO='YS00000' " + sql + @" then SuitePrice else 0 end),
 '全家福1000-2000'=COUNT(case when SuitePrice>=1000 and SuitePrice<2000 and SuiteTypeNO='YS00000' " + sql + @" then '1000-2000' else null end),
 '金额21'= sum(case when SuitePrice>=1000 and SuitePrice<2000 and SuiteTypeNO='YS00000' " + sql + @" then SuitePrice else 0 end),
 '全家福2000-3000'=COUNT(case when SuitePrice>=2000 and SuitePrice<3000 and SuiteTypeNO='YS00000' " + sql + @" then '2000-3000' else null end),
 '金额22'= sum(case when SuitePrice>=2000 and SuitePrice<3000 and SuiteTypeNO='YS00000' " + sql + @" then SuitePrice else 0 end),
 '全家福3000-4000'=COUNT(case when SuitePrice>=3000 and SuitePrice<4000 and SuiteTypeNO='YS00000' " + sql + @" then '3000-4000' else null end),
 '金额23'= sum(case when SuitePrice>=3000 and SuitePrice<4000 and SuiteTypeNO='YS00000' " + sql + @" then SuitePrice else 0 end),
 '全家福4000-5000'=COUNT(case when SuitePrice>=4000 and SuitePrice<5000 and SuiteTypeNO='YS00000' " + sql + @" then '4000-5000' else null end),
 '金额24'= sum(case when SuitePrice>=4000 and SuitePrice<5000 and SuiteTypeNO='YS00000' " + sql + @" then SuitePrice else 0 end),
 '全家福5000-6000'=COUNT(case when SuitePrice>=5000 and SuitePrice<6000 and SuiteTypeNO='YS00000' " + sql + @" then '5000-6000' else null end),
 '金额25'= sum(case when SuitePrice>=5000 and SuitePrice<6000 and SuiteTypeNO='YS00000' " + sql + @" then SuitePrice else 0 end),
 '全家福6000-7000'=COUNT(case when SuitePrice>=6000 and SuitePrice<7000 " + sql + @"  then '6000-7000' else null end),
 '金额26'= sum(case when SuitePrice>=6000 and SuitePrice<7000 and SuiteTypeNO='YS00000' " + sql + @" then SuitePrice else 0 end),
 '全家福7000-8000'=COUNT(case when SuitePrice>=7000 and SuitePrice<8000 and SuiteTypeNO='YS00000' " + sql + @" then '7000-8000' else null end),
 '金额27'= sum(case when SuitePrice>=7000 and SuitePrice<8000 and SuiteTypeNO='YS00000' " + sql + @" then SuitePrice else 0 end),
 '全家福8000-9000'=COUNT(case when SuitePrice>=8000 and SuitePrice<9000 and SuiteTypeNO='YS00000' " + sql + @" then '8000-9000' else null end),
 '金额28'= sum(case when SuitePrice>=8000 and SuitePrice<9000 and SuiteTypeNO='YS00000' then SuitePrice else 0 end),
 '全家福9000以上'=COUNT(case when SuitePrice>9000 and SuiteTypeNO='YS00000' " + sql + @"  then '9000 以上' else null end),
 '金额29'= sum(case when  SuitePrice>9000 and SuiteTypeNO='YS00000' " + sql + @" then SuitePrice else 0 end) 
 from View_LookSuite where 1=1 " + sql + @"            
 group by  ElementName,EmployeeName Order by ElementName";
            return ExecuteDataSet(sSql, "GetLookSuites");
        }
        //        /// <summary>
        //        /// 看样门市套系分类汇总
        //        /// creater njro
        //        /// create datatime 2012-05-16
        //        /// </summary>
        //        /// <param name="sql"></param>
        //        /// <returns></returns>
        //        [WebMethod]
        //        public DataSet GetLookSuites(string sql)
        //        {//and (datediff(DD,ChooseDate,'2000-01-16 15:29:09')<=0 and  datediff(DD,ChooseDate,'2012-05-16 15:29:09')>=0)
        //            string sSql = @"select ElementName 看样楼层,EmployeeName 工作人员,
        // '艺术1000以下'=COUNT(case when SuitePrice<1000 and SuiteTypeNO='YS' "+sql+@"  then '1000 以下' else null end),
        // '金额'= sum(case when  SuitePrice<1000 and SuiteTypeNO='YS' " + sql + @" then SuitePrice else 0 end),
        // '艺术1000-2000'=COUNT(case when SuitePrice>=1000 and SuitePrice<2000 and SuiteTypeNO='YS' " + sql + @" then '1000-2000' else null end),
        // '金额'= sum(case when SuitePrice>=1000 and SuitePrice<2000 and SuiteTypeNO='YS' " + sql + @" then SuitePrice else 0 end),
        // '艺术2000-3000'=COUNT(case when SuitePrice>=2000 and SuitePrice<3000 and SuiteTypeNO='YS' " + sql + @" then '2000-3000' else null end),
        // '金额'= sum(case when SuitePrice>=2000 and SuitePrice<3000 and SuiteTypeNO='YS' "+sql+@" then SuitePrice else 0 end),
        // '艺术3000-4000'=COUNT(case when SuitePrice>=3000 and SuitePrice<4000 and SuiteTypeNO='YS' "+sql+@" then '3000-4000' else null end),
        // '金额'= sum(case when SuitePrice>=3000 and SuitePrice<4000 and SuiteTypeNO='YS' "+sql+@" then SuitePrice else 0 end),
        // '艺术4000-5000'=COUNT(case when SuitePrice>=4000 and SuitePrice<5000 and SuiteTypeNO='YS' "+sql+@" then '4000-5000' else null end),
        // '金额'= sum(case when SuitePrice>=4000 and SuitePrice<5000 and SuiteTypeNO='YS' "+sql+@" then SuitePrice else 0 end),
        // '艺术5000-6000'=COUNT(case when SuitePrice>=5000 and SuitePrice<6000 and SuiteTypeNO='YS' "+sql+@" then '5000-6000' else null end),
        // '金额'= sum(case when SuitePrice>=5000 and SuitePrice<6000 and SuiteTypeNO='YS' "+sql+@" then SuitePrice else 0 end),
        // '艺术6000-7000'=COUNT(case when SuitePrice>=6000 and SuitePrice<7000 and SuiteTypeNO='YS' "+sql+@" then '6000-7000' else null end),
        // '金额'= sum(case when SuitePrice>=6000 and SuitePrice<7000 and SuiteTypeNO='YS' "+sql+@" then SuitePrice else 0 end),
        // '艺术7000-8000'=COUNT(case when SuitePrice>=7000 and SuitePrice<8000 and SuiteTypeNO='YS' "+sql+@" then '7000-8000' else null end),
        // '金额'= sum(case when SuitePrice>=7000 and SuitePrice<8000 and SuiteTypeNO='YS' "+sql+@" then SuitePrice else 0 end),
        // '艺术8000-9000'=COUNT(case when SuitePrice>=8000 and SuitePrice<9000 and SuiteTypeNO='YS' "+sql+@" then '8000-9000' else null end),
        // '金额'= sum(case when SuitePrice>=8000 and SuitePrice<9000 and SuiteTypeNO='YS' "+sql+@" then SuitePrice else 0 end),
        // '艺术9000以上'=COUNT(case when SuitePrice>9000 and SuiteTypeNO='YS' "+sql+@"  then '9000 以上' else null end),
        // '金额'= sum(case when  SuitePrice>9000 and SuiteTypeNO='YS' "+sql+@" then SuitePrice else 0 end), 
        // '婚纱1000以下'=COUNT(case when SuitePrice<1000  then '1000 以下' else null end),
        // '金额'= sum(case when  SuitePrice<1000 and SuiteTypeNO='HS' then SuitePrice else 0 end),
        // '婚纱1000-2000'=COUNT(case when SuitePrice>=1000 and SuitePrice<2000 and SuiteTypeNO='HS' "+sql+@" then '1000-2000' else null end),
        // '金额'= sum(case when SuitePrice>=1000 and SuitePrice<2000 and SuiteTypeNO='HS'"+sql+@" then SuitePrice else 0 end),
        // '婚纱2000-3000'=COUNT(case when SuitePrice>=2000 and SuitePrice<3000 and SuiteTypeNO='HS' "+sql+@" then '2000-3000' else null end),
        // '金额'= sum(case when SuitePrice>=2000 and SuitePrice<3000 and SuiteTypeNO='HS' "+sql+@" then SuitePrice else 0 end),
        // '婚纱3000-4000'=COUNT(case when SuitePrice>=3000 and SuitePrice<4000 and SuiteTypeNO='HS' "+sql+@" then '3000-4000' else null end),
        // '金额'= sum(case when SuitePrice>=3000 and SuitePrice<4000 and SuiteTypeNO='HS' "+sql+@" then SuitePrice else 0 end),
        // '婚纱4000-5000'=COUNT(case when SuitePrice>=4000 and SuitePrice<5000 and SuiteTypeNO='HS' "+sql+@" then '4000-5000' else null end),
        // '金额'= sum(case when SuitePrice>=4000 and SuitePrice<5000 and SuiteTypeNO='HS' "+sql+@" then SuitePrice else 0 end),
        // '婚纱5000-6000'=COUNT(case when SuitePrice>=5000 and SuitePrice<6000 and SuiteTypeNO='HS' "+sql+@" then '5000-6000' else null end),
        // '金额'= sum(case when SuitePrice>=5000 and SuitePrice<6000 and SuiteTypeNO='HS' "+sql+@" then SuitePrice else 0 end),
        // '婚纱6000-7000'=COUNT(case when SuitePrice>=6000 and SuitePrice<7000 "+sql+@" then '6000-7000' else null end),
        // '金额'= sum(case when SuitePrice>=6000 and SuitePrice<7000 and SuiteTypeNO='HS' "+sql+@" then SuitePrice else 0 end),
        // '婚纱7000-8000'=COUNT(case when SuitePrice>=7000 and SuitePrice<8000 and SuiteTypeNO='HS' "+sql+@" then '7000-8000' else null end),
        // '金额'= sum(case when SuitePrice>=7000 and SuitePrice<8000 and SuiteTypeNO='HS' "+sql+@" then SuitePrice else 0 end),
        // '婚纱8000-9000'=COUNT(case when SuitePrice>=8000 and SuitePrice<9000 and SuiteTypeNO='HS' "+sql+@" then '8000-9000' else null end),
        // '金额'= sum(case when SuitePrice>=8000 and SuitePrice<9000 and SuiteTypeNO='HS' "+sql+@" then SuitePrice else 0 end),
        // '婚纱9000以上'=COUNT(case when SuitePrice>9000 and SuiteTypeNO='HS' "+sql+@"  then '9000 以上' else null end),
        // '金额'= sum(case when  SuitePrice>9000 and SuiteTypeNO='HS' "+sql+@" then SuitePrice else 0 end),  
        // '全家福1000以下'=COUNT(case when SuitePrice<1000 and SuiteTypeNO='YS00000' "+sql+@"  then '1000 以下' else null end),
        // '金额'= sum(case when  SuitePrice<1000 and SuiteTypeNO='YS00000' "+sql+@" then SuitePrice else 0 end),
        // '全家福1000-2000'=COUNT(case when SuitePrice>=1000 and SuitePrice<2000 and SuiteTypeNO='YS00000' "+sql+@" then '1000-2000' else null end),
        // '金额'= sum(case when SuitePrice>=1000 and SuitePrice<2000 and SuiteTypeNO='YS00000' "+sql+@" then SuitePrice else 0 end),
        // '全家福2000-3000'=COUNT(case when SuitePrice>=2000 and SuitePrice<3000 and SuiteTypeNO='YS00000' "+sql+@" then '2000-3000' else null end),
        // '金额'= sum(case when SuitePrice>=2000 and SuitePrice<3000 and SuiteTypeNO='YS00000' "+sql+@" then SuitePrice else 0 end),
        // '全家福3000-4000'=COUNT(case when SuitePrice>=3000 and SuitePrice<4000 and SuiteTypeNO='YS00000' "+sql+@" then '3000-4000' else null end),
        // '金额'= sum(case when SuitePrice>=3000 and SuitePrice<4000 and SuiteTypeNO='YS00000' "+sql+@" then SuitePrice else 0 end),
        // '全家福4000-5000'=COUNT(case when SuitePrice>=4000 and SuitePrice<5000 and SuiteTypeNO='YS00000' "+sql+@" then '4000-5000' else null end),
        // '金额'= sum(case when SuitePrice>=4000 and SuitePrice<5000 and SuiteTypeNO='YS00000' "+sql+@" then SuitePrice else 0 end),
        // '全家福5000-6000'=COUNT(case when SuitePrice>=5000 and SuitePrice<6000 and SuiteTypeNO='YS00000' "+sql+@" then '5000-6000' else null end),
        // '金额'= sum(case when SuitePrice>=5000 and SuitePrice<6000 and SuiteTypeNO='YS00000' "+sql+@" then SuitePrice else 0 end),
        // '全家福6000-7000'=COUNT(case when SuitePrice>=6000 and SuitePrice<7000 "+sql+@"  then '6000-7000' else null end),
        // '金额'= sum(case when SuitePrice>=6000 and SuitePrice<7000 and SuiteTypeNO='YS00000' "+sql+@" then SuitePrice else 0 end),
        // '全家福7000-8000'=COUNT(case when SuitePrice>=7000 and SuitePrice<8000 and SuiteTypeNO='YS00000' "+sql+@" then '7000-8000' else null end),
        // '金额'= sum(case when SuitePrice>=7000 and SuitePrice<8000 and SuiteTypeNO='YS00000' "+sql+@" then SuitePrice else 0 end),
        // '全家福8000-9000'=COUNT(case when SuitePrice>=8000 and SuitePrice<9000 and SuiteTypeNO='YS00000' "+sql+@" then '8000-9000' else null end),
        // '金额'= sum(case when SuitePrice>=8000 and SuitePrice<9000 and SuiteTypeNO='YS00000' then SuitePrice else 0 end),
        // '全家福9000以上'=COUNT(case when SuitePrice>9000 and SuiteTypeNO='YS00000' "+sql+@"  then '9000 以上' else null end),
        // '金额'= sum(case when  SuitePrice>9000 and SuiteTypeNO='YS00000' "+sql+@" then SuitePrice else 0 end) 
        // from View_LookSuite where 1=1 "+sql+@"
        // group by  ElementName,EmployeeName Order by ElementName";
        //            return ExecuteDataSet(sSql, "GetLookSuites");
        //        }
        /// <summary>
        /// 看样人员统计
        /// </summary>
        /// <param name="sql"></param>
        [WebMethod]
        public DataSet ChipPerson(string sql)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append(@"SELECT dbo.Element.ElementName AS 看样地点,dbo.Employee.EmployeeName as 看样人员,SUM(dbo.CashDetail.CashNumber) AS 加选金额, COUNT(dbo.CashSub.OrderNO) AS 订单数量 FROM dbo.Department INNER JOIN dbo.Element ON dbo.Department.DepartmentNO = dbo.Element.ElementNO
                            INNER JOIN dbo.CashSub INNER JOIN dbo.CashDetail ON dbo.CashSub.CashNO = dbo.CashDetail.CashNO ON dbo.Department.DepartmentName = dbo.CashSub.BusinessDepartment 
                            INNER JOIN dbo.Employee ON dbo.CashSub.BusinessEmployeeNO = dbo.Employee.EmployeeName WHERE (dbo.CashDetail.CashPretext = 'SKSY_3JF') AND (dbo.Element.ElementType = '看样地点') 
                            AND (dbo.Employee.EmployeeDuty = 'Duty_35' OR dbo.Employee.EmployeeDuty='Duty_31'or dbo.Employee.EmployeeDuty = 'Duty_36')");
            strSql.Append(sql);
            strSql.Append(@"GROUP BY dbo.Element.ElementName, dbo.Employee.EmployeeDuty, dbo.Employee.EmployeeName order by dbo.Element.ElementName,COUNT(dbo.CashSub.OrderNO) desc");
            DataSet ds = ExecuteDataSet(strSql.ToString(), "Element");
            return ds;
        }
        /// <summary>
        /// 套系销售
        /// </summary>
        /// <param name="sql"></param>
        [WebMethod]
        public DataSet SuiteSale(string sql)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append(@"SELECT 
                            case when GROUPING(SuiteTypeName)=1 then '----总计----' 
                            else SuiteTypeName end  套系类别,
                            case when GROUPING(SuiteName)=1 and GROUPING(SuiteTypeName)=0 then '---套系小计---' 
                            else SuiteName end  套系名,
                            COUNT(SuiteName)as 套系销售数量 FROM dbo.Orders 
                            INNER JOIN dbo.Suite ON dbo.Orders.SuiteNO = dbo.Suite.SuiteNO 
                            INNER JOIN dbo.SuiteType ON dbo.Suite.SuiteTypeNO = dbo.SuiteType.SuiteTypeNO
                            INNER JOIN dbo.Department ON dbo.Orders.orderDepartmentNo = dbo.Department.DepartmentNO 
                            where dbo.Orders.IsDelete=0  and dbo.Orders.OrderState=1");
            strSql.Append(sql);
            strSql.Append(@"GROUP BY dbo.SuiteType.SuiteTypeName,dbo.Suite.SuiteName
                            with rollup");
            DataSet ds = ExecuteDataSet(strSql.ToString(), "SuiteType");
            return ds;
        }
        /// <summary>
        /// 套系类别查询
        /// </summary>
        [WebMethod]
        public DataSet SuiteType()
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append(@" select ID,SuiteTypeNO,SuiteTypeName,[Create],CreateDate from SuiteType");
            DataSet ds = ExecuteDataSet(strSql.ToString(), "SuiteType");
            return ds;
        }
        /// <summary>
        /// 产品销售查询
        /// </summary>
        /// <param name="sql"></param>
        [WebMethod]
        public DataSet ProductSale(string sql)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append("SELECT dbo.ProductType.ProductTypeName as 产品类型, dbo.Products.ProductNO as 产品编号, dbo.Products.ProductName as 产品名称 , SUM(dbo.OrderProducts.ProductQuantity) AS 销售数量 FROM dbo.OrderProducts INNER JOIN dbo.Orders ON dbo.OrderProducts.OrderNO = dbo.Orders.OrderNO INNER JOIN dbo.Products ON dbo.OrderProducts.ProductNO = dbo.Products.ProductNO INNER JOIN dbo.ProductType ON dbo.Products.ProductTypeNO = dbo.ProductType.ProductTypeNO where 1=1");
            strSql.Append(sql);
            strSql.Append("GROUP BY dbo.ProductType.ProductTypeName,dbo.Products.ProductNO, dbo.Products.ProductName order by dbo.ProductType.ProductTypeName,SUM(dbo.OrderProducts.ProductQuantity)desc");
            DataSet ds = ExecuteDataSet(strSql.ToString(), "Products");
            return ds;
        }
        /// <summary>
        /// 查询产品销售详细信息
        /// </summary>
        /// <param name="sql"></param>
        [WebMethod]
        public DataSet ProductDetail(string sql)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append(@"SELECT dbo.Orders.OrderNO AS 订单编号,(dbo.Customers.CustomerName1+'  '+dbo.Customers.CustomerName2) AS 顾客姓名,(dbo.Customers.MobilePhone1+'  '+dbo.Customers.MobilePhone2) AS 电话,dbo.Orders.ChooseDate AS 选片时间,dbo.Orders.PreGetGoodsDate AS 取件时间,dbo.ProductType.ProductTypeName AS 产品类别,dbo.Products.ProductName AS 产品名称, dbo.Products.ProductNO AS 产品编号,SUM(dbo.OrderProducts.ProductQuantity) AS 产品数量 FROM dbo.Orders INNER JOIN dbo.OrderProducts ON dbo.Orders.OrderNO = dbo.OrderProducts.OrderNO INNER JOIN dbo.Customers ON dbo.Orders.CustomerNO = dbo.Customers.CustomerNO INNER JOIN dbo.Products ON dbo.OrderProducts.ProductNO = dbo.Products.ProductNO INNER JOIN dbo.ProductType ON dbo.Products.ProductTypeNO = dbo.ProductType.ProductTypeNO where 1=1");
            strSql.Append(sql);
            strSql.Append("GROUP BY dbo.Orders.ChooseDate, dbo.Orders.PreGetGoodsDate, dbo.Orders.OrderNO, dbo.Customers.CustomerName1, dbo.Customers.CustomerName2,dbo.Customers.MobilePhone1, dbo.Customers.MobilePhone2, dbo.Products.ProductName, dbo.ProductType.ProductTypeName, dbo.Products.ProductNO order by 顾客姓名, 产品数量 desc");
            DataSet ds = ExecuteDataSet(strSql.ToString(), "Customers");
            return ds;
        }
        /// <summary>
        /// 看样产品销售
        /// </summary>
        /// <param name="sql"></param>
        [WebMethod]
        public DataSet ChooseProduct(string sql)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append(@"SELECT isnull(Department_1.DepartmentName,'无选片地点') AS 选片地点, isnull(Employee_1.EmployeeName,'无选片人员') AS 选片人员,
				ProductTypeName as 产品类型, dbo.Products.ProductName as 产品名称, COUNT(*) AS 销售数量
FROM         dbo.Products INNER JOIN 
                   dbo.Department INNER JOIN 
                  dbo.Employee ON dbo.Department.DepartmentNO = dbo.Employee.DepartmentNO  INNER JOIN 
                      dbo.Orders INNER JOIN 
                     dbo.OrderProducts ON dbo.Orders.OrderNO = dbo.OrderProducts.OrderNO ON dbo.Employee.EmployeeNO = dbo.OrderProducts.[Create] ON 
                     dbo.Products.ProductNO = dbo.OrderProducts.ProductNO INNER JOIN 
                      dbo.Element ON dbo.Department.DepartmentNO = dbo.Element.ElementNO LEFT OUTER JOIN 
                      dbo.Employee AS Employee_1 ON dbo.Orders.ChooseEmployeeNO = Employee_1.EmployeeNO LEFT OUTER JOIN 
                     dbo.Department AS Department_1 ON dbo.Orders.ChooseAddress = Department_1.DepartmentNO  inner join
                      dbo.ProductType on dbo.Products.ProductTypeNO=dbo.ProductType.ProductTypeNO
WHERE     dbo.OrderProducts.ProductNO not like '%_sub%' and (dbo.Element.ElementType = '看样地点')");
            strSql.Append(sql);
            strSql.Append("GROUP BY ProductTypeName, dbo.Products.ProductName, Employee_1.EmployeeName, Department_1.DepartmentName ORDER BY 选片地点,选片人员,产品类型");
            DataSet ds = ExecuteDataSet(strSql.ToString(), "ChooseProduct");
            return ds;
        }
        /// <summary>
        /// 看样产品销售详细列表
        /// </summary>
        /// <param name="sql"></param>
        [WebMethod]
        public DataSet ChooseProductDetail(string sql)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append(@"SELECT     TOP (100) PERCENT Department_1.DepartmentName AS 选片地点,Employee_1.EmployeeName AS 选片人员, dbo.ProductType.ProductTypeName as 产品类型,
                      dbo.Products.ProductName as 产品名,dbo.Orders.ChooseDate as 选片时间, (dbo.Customers.CustomerName1+'  '+dbo.Customers.CustomerName2)as 客户姓名,
                      COUNT(*) AS 销售数量,(dbo.Customers.MobilePhone1+'  '+dbo.Customers.MobilePhone2)as 联系电话, dbo.Orders.OrderNO as 订单编号
FROM         dbo.Customers INNER JOIN
                      dbo.Products INNER JOIN
                      dbo.Orders INNER JOIN
                      dbo.OrderProducts ON dbo.Orders.OrderNO = dbo.OrderProducts.OrderNO ON dbo.Products.ProductNO = dbo.OrderProducts.ProductNO ON 
                      dbo.Customers.CustomerNO = dbo.Orders.CustomerNO LEFT OUTER JOIN
                      dbo.Department INNER JOIN
                      dbo.Employee ON dbo.Department.DepartmentNO = dbo.Employee.DepartmentNO INNER JOIN
                      dbo.Element ON dbo.Department.DepartmentNO = dbo.Element.ElementNO ON dbo.OrderProducts.[Create] = dbo.Employee.EmployeeNO LEFT OUTER JOIN
                      dbo.Employee AS Employee_1 ON dbo.Orders.ChooseEmployeeNO = Employee_1.EmployeeNO LEFT OUTER JOIN
                      dbo.Department AS Department_1 ON dbo.Orders.ChooseAddress = Department_1.DepartmentNO inner join
                      dbo.ProductType on dbo.Products.ProductTypeNO=dbo.ProductType.ProductTypeNO
WHERE     (dbo.Element.ElementType = '看样地点') AND (dbo.OrderProducts.ProductNO NOT LIKE '%_sub%')");
            strSql.Append(sql);
            strSql.Append(@"GROUP BY dbo.Products.ProductTypeNO, dbo.Products.ProductName, Employee_1.EmployeeName, Department_1.DepartmentName, dbo.Orders.ChooseDate,dbo.ProductType.ProductTypeName, 
                      dbo.Customers.CustomerName1, dbo.Customers.CustomerName2, dbo.Customers.MobilePhone1, dbo.Customers.MobilePhone2, dbo.Orders.OrderNO
ORDER BY 选片地点, 选片人员,销售数量 desc");
            DataSet ds = ExecuteDataSet(strSql.ToString(), "ChooseProductDetail");
            return ds;
        }
        /// <summary>
        /// 套系销售详细信息
        /// </summary>
        /// <param name="sql"></param>
        [WebMethod]
        public DataSet SuiteDetail(string sql)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append(@"SELECT     TOP (100) PERCENT dbo.SuiteType.SuiteTypeName AS 套系类型, dbo.Suite.SuiteName AS 套系名称, dbo.Orders.SuitePrice AS 套系价格, 
                      COUNT(dbo.Suite.SuiteName) AS 销售数量, dbo.Orders.OrderNO AS 订单编号, dbo.Department.DepartmentName AS 选片地点, 
                      dbo.Customers.CustomerName1 + '  ' + dbo.Customers.CustomerName2 AS 顾客姓名, 
                      dbo.Customers.MobilePhone2 + '  ' + dbo.Customers.MobilePhone1 AS 联系电话
FROM         dbo.SuiteType INNER JOIN
                      dbo.Orders ON dbo.SuiteType.SuiteTypeNO = dbo.Orders.SuiteTypeNO INNER JOIN
                      dbo.Department ON dbo.Orders.orderDepartmentNo = dbo.Department.DepartmentNO INNER JOIN
                      dbo.Customers ON dbo.Orders.CustomerNO = dbo.Customers.CustomerNO INNER JOIN
                      dbo.Suite ON dbo.Orders.SuiteNO = dbo.Suite.SuiteNO
WHERE     (dbo.Orders.IsDelete = 0) AND (dbo.Orders.OrderState = 1)");
            strSql.Append(sql);
            strSql.Append(@"GROUP BY dbo.SuiteType.SuiteTypeName, dbo.Orders.OrderNO, dbo.Orders.SuitePrice, dbo.Department.DepartmentName, dbo.Customers.CustomerName1, 
                      dbo.Customers.CustomerName2, dbo.Customers.MobilePhone2, dbo.Customers.MobilePhone1, dbo.Suite.SuiteName
ORDER BY 套系类型, 销售数量 DESC");
            DataSet ds = ExecuteDataSet(strSql.ToString(), "SuiteDetail");
            return ds;
        }
        /// <summary>
        /// 看样人员详细信息
        /// </summary>
        /// <param name="sql"></param>
        [WebMethod]
        public DataSet ChipPersonDetail(string sql)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append(@"SELECT     TOP (100) PERCENT dbo.Element.ElementName AS 看样地点, dbo.Employee.EmployeeName AS 看样人员, dbo.CashSub.OrderNO AS 订单编号, 
                      Department_1.DepartmentName AS 订单地点, Employee_1.EmployeeName AS 订单人员, 
                      dbo.Customers.CustomerName1 + '  ' + dbo.Customers.CustomerName2 AS 顾客姓名, dbo.Customers.MobilePhone1 + ' ' + dbo.Customers.MobilePhone2 AS 顾客电话,
                       dbo.Orders.ChooseDate AS 看样时间,dbo.CashDetail.CashWay as 付款方式, dbo.CashDetail.CashNumber AS 加选金额, 
                      dbo.CashSub.CashDate as 付款时间, dbo.Suite.SuiteName AS 套系名称, dbo.Suite.SuitePrice AS 套系价格 
FROM         dbo.Employee AS Employee_1 INNER JOIN
                      dbo.Suite INNER JOIN
                      dbo.Orders INNER JOIN
                      dbo.Customers ON dbo.Orders.CustomerNO = dbo.Customers.CustomerNO ON dbo.Suite.SuiteNO = dbo.Orders.SuiteNO INNER JOIN
                      dbo.Department AS Department_1 ON dbo.Orders.orderDepartmentNo = Department_1.DepartmentNO ON 
                      Employee_1.EmployeeNO = dbo.Orders.OrderEmployeeNO LEFT OUTER JOIN
                      dbo.Element RIGHT OUTER JOIN
                      dbo.Department ON dbo.Element.ElementNO = dbo.Department.DepartmentNO ON dbo.Orders.ChooseAddress = dbo.Department.DepartmentNO LEFT OUTER JOIN
                      dbo.Employee ON dbo.Orders.ChooseEmployeeNO = dbo.Employee.EmployeeNO LEFT OUTER JOIN
                      dbo.CashSub INNER JOIN
                      dbo.CashDetail ON dbo.CashSub.CashNO = dbo.CashDetail.CashNO ON dbo.Orders.OrderNO = dbo.CashSub.OrderNO
WHERE     (dbo.CashDetail.CashPretext = 'SKSY_3JF') AND (dbo.Employee.EmployeeDuty = 'Duty_35' OR
                      dbo.Employee.EmployeeDuty = 'Duty_31' OR
                      dbo.Employee.EmployeeDuty = 'Duty_36') AND (dbo.Element.ElementType = '看样地点')");
            strSql.Append(sql);
            strSql.Append("ORDER BY dbo.Element.ElementName DESC");
            DataSet ds = ExecuteDataSet(strSql.ToString(), "ChipPerson");
            return ds;
        }
        /// <summary>
        /// 看样业绩加选金额详细信息
        /// creater njro
        /// createdatatime 2012-06-04
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet ChipChooseDetail(string sql)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append(@"SELECT     
                          dbo.Department.DepartmentName AS 看样地点, dbo.Employee.EmployeeName AS 看样人员,
                          dbo.Orders.SuitePrice AS 套系价格,dbo.Suite.SuiteName  套系名称, 
                          dbo.CashDetail.CashNumber AS 加选金额, dbo.Orders.orderDepartmentNo AS 订单部门, dbo.Orders.OrderNO AS 订单编号, 
                          dbo.Customers.CustomerName1 + '  ' + dbo.Customers.CustomerName2 AS 顾客姓名, 
                          dbo.Customers.MobilePhone1 + ' ' + dbo.Customers.MobilePhone2 AS 顾客电话, dbo.Orders.ChooseDate AS 看样时间, 
                          dbo.CashDetail.CashWay AS 付款方式, dbo.CashSub.CashDate AS 付款时间
                    FROM  dbo.Orders INNER JOIN
                          dbo.Department ON dbo.Orders.ChooseAddress = dbo.Department.DepartmentNO INNER JOIN
                          dbo.Employee ON dbo.Orders.ChooseEmployeeNO = dbo.Employee.EmployeeNO INNER JOIN
                          dbo.CashSub ON dbo.Orders.OrderNO = dbo.CashSub.OrderNO INNER JOIN
                          dbo.CashDetail ON dbo.CashSub.CashNO = dbo.CashDetail.CashNO INNER JOIN
                          dbo.Customers ON dbo.Orders.CustomerNO = dbo.Customers.CustomerNO INNER JOIN
                          dbo.Suite ON dbo.Orders.SuiteNO = dbo.Suite.SuiteNO
                    WHERE     (1 = 1)");
            strSql.Append(sql);
            strSql.Append(@"GROUP BY dbo.Department.DepartmentName, dbo.Employee.EmployeeName, dbo.Orders.SuitePrice, dbo.CashDetail.CashNumber, 
                             dbo.Orders.orderDepartmentNo, dbo.Orders.OrderNO, dbo.Orders.ChooseDate, dbo.CashDetail.CashWay, dbo.CashSub.CashDate, 
                             dbo.Customers.CustomerName1, dbo.Customers.CustomerName2, dbo.Customers.MobilePhone1, dbo.Customers.MobilePhone2,SuiteName");
            DataSet ds = ExecuteDataSet(strSql.ToString(), "ChipChooseDetail");
            return ds;
        }
        /// <summary>
        /// creater njro
        /// createtime 2012-03-28
        /// 得到所有部门
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet GetAllDepartment(string sql)
        {
            string sSql = "select DepartmentNO,ParDepartmentNO,DepartmentName,DepartmentManager,DepartmentDescribe,DepartmentPhone,DepartmentAddress from Department WHERE 1=1";
            return ExecuteDataSet(sSql, "GetAllDepartment");

        }
        /// <summary>
        /// creater njro
        /// createtime 2012-03-29
        /// 得到所有客人
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet GetAllCustomerName()
        {
            string sSql = "SELECT [CustomerName1]+' '+[CustomerName2] as CustomerName,[CustomerNO],[IntroducerType]FROM [ERP].[dbo].[Customers] where [IntroducerType]='客人'";
            return ExecuteDataSet(sSql, "GetAllDepartment");

        }
        #region  门市接单成交额报表统计
        //        /// <summary>
        //        /// 门市接单成交额报表统计
        //        /// </summary>
        //        /// <returns></returns>
        //        [WebMethod]
        //        public DataSet getOrder()
        //        {
        //            string strsql = string.Format(@"SELECT     Department.DepartmentName, 
        //           Employee.EmployeeName,
        //           Orders.OrderNO, 
        //           (Customers.CustomerName1+'  '+Customers.CustomerName2) as CustomersName,
        //           Orders.OrderSuitePrice, 
        //           SUM(CashDetail.CashNumber) as Payment, 
        //           (Orders.OrderSuitePrice-SUM(CashDetail.CashNumber))as NoPayment,            
        //           Orders.OrderDate 
        //FROM         Employee INNER JOIN
        //                      Department ON Employee.DepartmentNO = Department.DepartmentNO RIGHT OUTER JOIN
        //                      Orders INNER JOIN
        //                      Cash ON Orders.OrderNO = Cash.OrderNO INNER JOIN
        //                      CashSub ON Cash.OrderNO = CashSub.OrderNO INNER JOIN
        //                      CashDetail ON CashSub.CashNO = CashDetail.CashNO ON Employee.EmployeeNO = Orders.OrderEmployeeNO INNER JOIN
        //                      Customers On Orders.CustomerNO=Customers.CustomerNO
        //where      Orders.IsDelete=0 and Orders.OrderState=1
        //GROUP BY Orders.OrderNO, Orders.OrderSuitePrice, Department.DepartmentName, Employee.EmployeeName, Orders.OrderDate,Customers.CustomerName1,Customers.CustomerName2
        //");
        //            return GetDataSet(strsql);

        //        }
        #endregion

        #region 根据部门 人员 时间来查询接单
        /// <summary>
        /// 根据部门 人员 时间来查询接单 
        /// </summary>
        /// <param name="Columns"></param>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet OrderCrown(string Columns, string sql)
        {
            string sSql = "select DepartmentName ,EmployeeName ,OrderNO , CustomersName ,OrderSuitePrice,ActualSuite,PayableSuite,OrderDate from View_CrownCount a where 1=1" + sql + "Order by DepartmentName,EmployeeName";
            return ExecuteDataSet(sSql, "OrderTurnover");
        }
        /// <summary>
        /// 部门接单成交额统计
        /// </summary>
        /// <param name="Columns"></param>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet getCount(string Columns, string sql)
        {
            string sSql = @"select 
case when GROUPING(DepartmentName)=1 then '----总计----' 
else DepartmentName end  OrderDepartment,
case when GROUPING(EmployeeName)=1 and GROUPING(DepartmentName)=0 then '---部门小计---' 
else EmployeeName end  EmployeeName,
sum(TaoXiPice) 
taoxiPrice,sum(YiFuPrice) YiFuPrice,
sum(WeiFuPrice) WeiFuPrice 
from VIEW_OrderCountSum a where 1=1" + sql + @"group by DepartmentName,EmployeeName 
with rollup";
            return ExecuteDataSet(sSql, "OrderTurnover");
        }
        #endregion
        /// <summary>
        /// 摄影师业绩统计及摄影场地统计
        /// </summary>
        /// <param name="sColumns"></param>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet getChootCount(string sColumns, string sql)
        {
            string sSql = @"select DepartmentName,EmployeeName,sum(Counts) orderCounts,sum(SuitePrice) SuitePricCount from VIEW_getChooseCount
where 1=1 " + sql + @"
 group by   DepartmentName,EmployeeName
 order by DepartmentName,EmployeeName";
            return ExecuteDataSet(sSql, "OrderShootCount");
        }

        /// <summary>
        /// author:zjj
        /// date:2011-12-21
        /// date:2011-03-05zjj修改
        /// 统计摄影师的照片统计
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet GetPhotoSum(string sql)
        {

            string sSql = "SELECT od.ChooseDate, od.OrderNO,dbo.Employee.EmployeeName,od.ShootEmployeeNON, dbo.Department.DepartmentName, od.ImageCount, (select count(*)from OrderFiles  as odf2 where 1=1 and odf2.SelectType='淘汰' and odf2.OrderNO=od.orderno  and odf2.FileName not like '%美工档%') as FaildImage,(od.ImageCount-(select count(*)from OrderFiles  as odf2 where 1=1 and odf2.SelectType='淘汰' and odf2.OrderNO=od.orderno and odf2.FileName not like '%美工档%' ))as ChoosedImage,od.OrderDate FROM dbo.Orders as od left join dbo.OrderFiles ON od.OrderNO = dbo.OrderFiles.OrderNO left join dbo.Employee ON od.ShootEmployeeNON = dbo.Employee.EmployeeNO2 left join dbo.Department ON od.ShootAddressN = dbo.Department.DepartmentNO  WHERE 1=1 and Employee.EmployeeName!=''";
            if (sql != "")
                sSql += sql;
            sSql += " GROUP BY od.OrderNO ,od.ChooseDate, dbo.Employee.EmployeeName, dbo.Department.DepartmentName, od.ImageCount, od.OrderDate,od.ShootEmployeeNON order by od.ShootEmployeeNON";
            return ExecuteDataSet(sSql, "GetPhotoSum");
        }
        /// <summary>
        /// 统计摄影师的照片淘汰率统计
        /// updater njro    
        /// updatetime 2012-03-19
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet GetPhotoSumTwo(string sql)
        {

            string sSql = @"select 
                            DepartmentName 摄影地点, 
                            EmployeeName 摄影师, 
                            ImageSum=sum(ImageCount),
                            ImageTT=SUM(FaildImage),
                            ImageXZ=sum(ChoosedImage),
                            case when SUM(ImageCount)=sum(ChoosedImage) then '0%'
                            else 
                             SUBSTRING ( CONVERT(varchar(20),(sum(cast(FaildImage as decimal))/SUm(ImageCount))*100),1,4)+'%' 
                             end as 照片淘汰率
                             from View_ProduceDel
                            where  EmployeeName!=''"
                    + sql +
                            @"group by DepartmentName,EmployeeName
                              order by DepartmentName,EmployeeName";
            return ExecuteDataSet(sSql, "GetPhotoSum");
        }

        /// <summary>
        /// 统计摄影师的照片淘汰率明细
        /// creater njro    
        /// createtime 2012-03-19
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet GetPhotoInfo(string sql)
        {
            string sSql = @"SELECT od.ChooseDate, od.OrderNO,dbo.Employee.EmployeeName,
                            dbo.Department.DepartmentName, od.ImageCount, 
                            (select count(*)from OrderFiles  as odf2 where 1=1 
                            and odf2.SelectType='淘汰' 
                            and odf2.OrderNO=od.orderno  
                            and odf2.FileName not like '%美工档%')
                            as FaildImage,
                            (od.ImageCount-(select count(*)from OrderFiles  as odf2 where 1=1
                            and odf2.SelectType='淘汰' and odf2.OrderNO=od.orderno 
                            and odf2.FileName not like '%美工档%' ))as   ChoosedImage,
                            od.OrderDate FROM dbo.Orders as od 
                            left join dbo.OrderFiles ON 
                            od.OrderNO = dbo.OrderFiles.OrderNO 
                            left join dbo.Employee ON 
                            od.ShootEmployeeNON = dbo.Employee.EmployeeNO2
                            left join dbo.Department ON 
                            od.ShootAddressN = dbo.Department.DepartmentNO 
                            WHERE 1=1 
                            and Employee.EmployeeName!='' "
                      + sql +
                              @"GROUP BY 
     od.OrderNO ,od.ChooseDate, dbo.Employee.EmployeeName, 
     dbo.Department.DepartmentName, od.ImageCount,
      od.OrderDate,od.ShootEmployeeNON order by 
      od.ShootEmployeeNON";
            return ExecuteDataSet(sSql, "GetPhotoInfo");
        }


        #region 订单消费报表及其其他汇总    20120201：QiuQianQuan
        [WebMethod]
        public DataSet GetOrderReportSelect(string sql)
        {
            StringBuilder strsql = new StringBuilder();
            strsql.Append(@"select   OrderNO as 订单编号,CustomerName1 as 客户1, MobilePhone1 as 电话1, CustomerName2  as 客户2, 
                      MobilePhone2 电话2,EmployeeName 收银人员,ConfigValue 收款事由,CashWay 收款方式,CashNumber 收款金额,CashDate 收款时间,PreGetGoodsDate 预约取件时间,GetGoodsDate  实际取件时间
from    view_OrderXiaoFeiHuiZongReport    
                       where 1=1 ");
            strsql.Append(sql);
            strsql.Append(@"and IsDelete=0 and ConfigType='收款事由'");
            strsql.Append("order by CustomerName1,CashDate,PreGetGoodsDate,GetGoodsDate desc");
            return ExecuteDataSet(strsql.ToString(), "GetOrderReportSelect");
        }


        [WebMethod]
        public string GetAllOrderReportYong()
        {
            string sql = string.Format(@"select SUM(view_OrderXiaoFeiHuiZongReport.CashNumber) From view_OrderXiaoFeiHuiZongReport where 1=1");
            return sql;
        }
        //一次
        [WebMethod]
        public DataSet GetoneOrderReportOneMoneys(string sql)
        {
            StringBuilder strsql = new StringBuilder();
            strsql.Append(GetAllOrderReportYong());
            strsql.Append(sql);
            strsql.Append(@"and IsDelete=0   and  ConfigType='收款事由'");
            strsql.Append(@"and (
                          ConfigValue like '%预付%'
                       or ConfigValue like '%补款%'
                       or ConfigValue like '%全款%'
                       or ConfigValue like '%预约%'
                       or ConfigValue like '%预定%')");
            return ExecuteDataSet(strsql.ToString(), "GetoneOrderReportOneMoneys");
        }

        //二次
        [WebMethod]
        public DataSet GetoneOrderReportTwoMoneys(string sql)
        {
            StringBuilder strsql = new StringBuilder();
            strsql.Append(GetAllOrderReportYong());
            strsql.Append(sql);
            strsql.Append(@"and IsDelete=0   and  ConfigType='收款事由'");
            strsql.Append(@"and ConfigValue like '%加选%' ");
            return ExecuteDataSet(strsql.ToString(), "GetoneOrderReportTwoMoneys");
        }

        //其他
        [WebMethod]
        public DataSet GetoneOrderReportQiTaMoneys(string sql)
        {
            StringBuilder strsql = new StringBuilder();
            strsql.Append(GetAllOrderReportYong());
            strsql.Append(sql);
            strsql.Append(@"and IsDelete=0   and  ConfigType='收款事由'");
            strsql.Append(@"and ConfigValue not like '%加选%'
                       and  ConfigValue not like '%预付%'
                       and ConfigValue  not like '%补款%'
                       and ConfigValue not like '%全款%'
                       and ConfigValue not like '%预约%'
                       and ConfigValue not like '%预定%'");
            return ExecuteDataSet(strsql.ToString(), "GetoneOrderReportQiTaMoneys");
        }

        //现金
        [WebMethod]
        public DataSet GetOrderReportXianJinMoneys(string sql)
        {
            StringBuilder strsql = new StringBuilder();
            strsql.Append(GetAllOrderReportYong());
            strsql.Append(sql);
            strsql.Append(@"and IsDelete=0   and  ConfigType='收款事由'");
            strsql.Append(@"and CashWay='现金'");
            return ExecuteDataSet(strsql.ToString(), "GetOrderReportXianJinMoneys");
        }


        //刷卡
        [WebMethod]
        public DataSet GetOrderReportShuaKaMoneys(string sql)
        {
            StringBuilder strsql = new StringBuilder();
            strsql.Append(GetAllOrderReportYong());
            strsql.Append(sql);
            strsql.Append(@"and IsDelete=0   and  ConfigType='收款事由'");
            strsql.Append(@"and CashWay='刷卡'");
            return ExecuteDataSet(strsql.ToString(), "GetOrderReportShuaKaMoneys");
        }

        //其他
        [WebMethod]
        public DataSet GetOrderReportQiTaMoneys(string sql)
        {
            StringBuilder strsql = new StringBuilder();
            strsql.Append(GetAllOrderReportYong());
            strsql.Append(sql);
            strsql.Append(@"and IsDelete=0   and  ConfigType='收款事由'");
            strsql.Append(@"and CashWay!='现金'");
            strsql.Append(@"and CashWay!='刷卡'");
            return ExecuteDataSet(strsql.ToString(), "GetOrderReportQiTaMoneys");
        }

        #endregion
        #region     订单消费汇总    20120204：QiuQianQuan
        [WebMethod]
        public DataSet GetOrdersReportHuiZong(string sql)
        {
            StringBuilder strsql = new StringBuilder();
            strsql.Append(@"select ElementName as 订单地点,ConfigValue 收款事由,CashNumber  as 收款金额 from view_OrderXiaoFeiHuiZongReport
 where  1=1");
            strsql.Append(sql);
            strsql.Append(@"and IsDelete=0 and ConfigType='收款事由' order by ElementName");
            return ExecuteDataSet(strsql.ToString(), "GetOrdersReportHuiZong");
        }
        #endregion
        #region 摄影，选片，取件，礼服：新增消费 20120210：QiuQianQuan
        [WebMethod]
        public DataSet GetOrderDingDanXiaoFeiSelectMeage(string Keys, string OrderNo, string addmoney)
        {
            StringBuilder strsql = new StringBuilder();
            #region 礼服
            if (Keys.Equals("礼服"))
            {
                if (addmoney.Equals("0"))
                {
                    strsql.Append(@"if exists(select * from OrdersPayState where OrderNO='" + OrderNo + "')");
                    strsql.Append(@"select OrderNO,PayableClothes,ActualClothes  from OrdersPayState where OrderNO='" + OrderNo + "'");
                    strsql.Append(@"else  begin insert into OrdersPayState (OrderNO,PayableSuite,ActualSuite,PayableShoot,ActualShoot,PayableClothes,ActualClothes,PayableChoose,ActualChoose,PayableGetGoods,ActuaGetGoods,PayableOther,ActuaOther) values ('" + OrderNo + "',0,0,0,0,0,0,0,0,0,0,0,0)");
                    strsql.Append(@"select OrderNO,PayableClothes,ActualClothes  from OrdersPayState where OrderNO='" + OrderNo + "' end");
                }
                else
                {
                    if (addmoney.Equals("0")) addmoney = "0";
                    strsql.Append(@"update OrdersPayState set PayableClothes=PayableClothes+" + addmoney + " where OrderNO='" + OrderNo + "' ");
                }
            }
            #endregion
            #region 摄影
            if (Keys.Equals("摄影"))
            {
                if (addmoney.Equals("0"))
                {
                    strsql.Append(@"if exists(select * from OrdersPayState where OrderNO='" + OrderNo + "')");
                    strsql.Append(@"select OrderNO,PayableShoot,ActualShoot  from OrdersPayState where OrderNO='" + OrderNo + "'");
                    strsql.Append(@"else  begin insert into OrdersPayState (OrderNO,PayableSuite,ActualSuite,PayableShoot,ActualShoot,PayableClothes,ActualClothes,PayableChoose,ActualChoose,PayableGetGoods,ActuaGetGoods,PayableOther,ActuaOther) values ('" + OrderNo + "',0,0,0,0,0,0,0,0,0,0,0,0)");
                    strsql.Append(@"select OrderNO,PayableShoot,ActualShoot  from OrdersPayState where OrderNO='" + OrderNo + "' end");
                }
                else
                {
                    if (addmoney.Equals("0")) addmoney = "0";
                    strsql.Append(@"update OrdersPayState set PayableShoot=(PayableShoot+" + addmoney + ") where OrderNO='" + OrderNo + "'");
                }
            }
            #endregion
            #region 选片
            if (Keys.Equals("选片"))
            {
                if (addmoney.Equals("0"))
                {
                    strsql.Append(@"if exists(select * from OrdersPayState where OrderNO='" + OrderNo + "')");
                    strsql.Append(@"select OrderNO,PayableChoose,ActualChoose  from OrdersPayState where OrderNO='" + OrderNo + "'");
                    strsql.Append(@"else  begin insert into OrdersPayState (OrderNO,PayableSuite,ActualSuite,PayableShoot,ActualShoot,PayableClothes,ActualClothes,PayableChoose,ActualChoose,PayableGetGoods,ActuaGetGoods,PayableOther,ActuaOther) values ('" + OrderNo + "',0,0,0,0,0,0,0,0,0,0,0,0)");
                    strsql.Append(@"select OrderNO,PayableChoose,ActualChoose  from OrdersPayState where OrderNO='" + OrderNo + "' end");
                }
                else
                {
                    if (addmoney.Equals("0")) addmoney = "0";
                    strsql.Append(@"update OrdersPayState set PayableChoose=(PayableChoose+" + addmoney + ") where OrderNO='" + OrderNo + "'");
                }
            }
            #endregion
            #region 取件
            if (Keys.Equals("取件"))
            {
                if (addmoney.Equals("0"))
                {
                    strsql.Append(@"if exists(select * from OrdersPayState where OrderNO='" + OrderNo + "')");
                    strsql.Append(@"select OrderNO,PayableGetGoods,ActuaGetGoods  from OrdersPayState where OrderNO='" + OrderNo + "'");
                    strsql.Append(@"else  begin insert into OrdersPayState (OrderNO,PayableSuite,ActualSuite,PayableShoot,ActualShoot,PayableClothes,ActualClothes,PayableChoose,ActualChoose,PayableGetGoods,ActuaGetGoods,PayableOther,ActuaOther) values ('" + OrderNo + "',0,0,0,0,0,0,0,0,0,0,0,0)");
                    strsql.Append(@"select OrderNO,PayableGetGoods,ActuaGetGoods  from OrdersPayState where OrderNO='" + OrderNo + "' end");
                }
                else
                {
                    if (addmoney.Equals("0")) addmoney = "0";
                    strsql.Append(@"update OrdersPayState set PayableGetGoods=(PayableGetGoods+" + addmoney + ") where OrderNO='" + OrderNo + "'");
                }
            }
            #endregion
            return ExecuteDataSet(strsql.ToString(), "GetOrderDingDanXiaoFeiSelectMeage");
        }
        #endregion
        [WebMethod]
        public bool delete(string id)
        {
            string str = "delete [DresserManager] where  [Id]='" + id + "'";
            return ExecuteSQL_czb(str, CommandType.Text);
        }


        /// <summary>
        /// 设计的时候，单击某张照片出现对应的批注信息
        /// 20120223：QiuQianQuan
        /// 单击照片显示对应的批注
        /// <param name="sFileName"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchOrderImageAnnotates(string sOrderNO, string sFileName)
        {
            StringBuilder strsql = new StringBuilder();
            strsql.Append(@"Select distinct Annotate from ImageAnnotate where  OrderNO=");
            strsql.Append("'" + sOrderNO + "'");
            strsql.Append(@"and ( 1<>1 or [FileName]='\客像\" + sFileName + ".jpg' )  ");
            return ExecuteDataSet(strsql.ToString(), "SearchOrderImageAnnotates");
        }

        /// <summary>
        /// 查询预约套系产品
        /// zjj2012-02-24
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sqlwhere"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchPreProduct(string sOrderNO, string sqlwhere)
        {
            string sSql = "SELECT OrderNO, ProductNO, OrderIndex FROM PreProducts where OrderNO='" + sOrderNO + "' " + sqlwhere + "  Order by OrderIndex";
            return ExecuteDataSet(sSql, "PreProducts");
        }
        /// <summary>
        /// 查询预约套系产品特定订单号的最大订单索引
        /// zjj2012-02-24
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sqlwhere"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchPreProductMax(string sOrderNO)
        {
            string sSql = "SELECT MAX(OrderIndex)   FROM PreProducts where OrderNO='" + sOrderNO + "' ";
            return ExecuteDataSet(sSql, "PreProducts");
        }
        /// <summary>
        /// 查询订单产品特定订单号的最大订单索引
        /// zjj2012-03-16
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sqlwhere"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchOrderProductMax(string sOrderNO)
        {
            string sSql = "SELECT MAX(OrderIndex)   FROM OrderProducts where OrderNO='" + sOrderNO + "' ";
            return ExecuteDataSet(sSql, "OrderProducts");
        }
        /// <summary>
        /// creater njro
        /// create datatime 2012-03-08
        /// 产品包装统计
        /// </summary>
        /// <param name="sSql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet PackProducts(string sSql)
        {
            StringBuilder strsql = new StringBuilder();
            strsql.Append(@"SELECT
                            dbo.RequireSub.RequireValue as 包装名称, 
                            CONVERT(varchar(20), dbo.Products.ProductSizeA) + '*' + CONVERT(varchar(20), dbo.Products.ProductSizeB) AS 包装规格, 
                            COUNT(dbo.OrderProducts.Box) AS 包装数量
                            FROM 
                            dbo.OrderProducts INNER JOIN
                            dbo.Products ON dbo.OrderProducts.ProductNO = dbo.Products.ProductNO INNER JOIN
                            dbo.RequireSub ON dbo.OrderProducts.Box = dbo.RequireSub.RequireNO INNER JOIN
                            dbo.Orders ON dbo.OrderProducts.OrderNO = dbo.Orders.OrderNO
                            WHERE (dbo.RequireSub.RequireID = 6)
                            ");
            strsql.Append(sSql);
            strsql.Append(@"GROUP BY 
                            dbo.Products.ProductSizeA,dbo.Products.ProductSizeB,
                            dbo.RequireSub.RequireValue
                            ORDER BY 包装数量 DESC");
            return ExecuteDataSet(strsql.ToString(), "PackProducts");
        }
        /// <summary>
        /// creater njro
        /// create datatime 2012-03-08
        /// 产品包装统计明细
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet PackProductsDetail(string sql)
        {
            StringBuilder strsql = new StringBuilder();
            strsql.Append(@"SELECT  dbo.Orders.OrderNO AS 订单编号, 
                            dbo.Customers.CustomerName1 + '  ' + dbo.Customers.CustomerName2 AS 顾客姓名, 
                            dbo.Customers.MobilePhone1 + '  ' + dbo.Customers.MobilePhone2 AS 顾客电话,
                            dbo.Orders.ChooseDate AS 选片时间,dbo.Orders.PreGetGoodsDate AS 取件时间, 
                            dbo.ProductType.ProductTypeName AS 产品类别, dbo.Products.ProductName AS 产品名称, 
                            dbo.RequireSub.RequireValue as 产品包装,COUNT(dbo.OrderProducts.Box) AS 包装数量
                            FROM 
                            dbo.Orders INNER JOIN
                            dbo.OrderProducts ON dbo.Orders.OrderNO = dbo.OrderProducts.OrderNO INNER JOIN
                            dbo.Customers ON dbo.Orders.CustomerNO = dbo.Customers.CustomerNO INNER JOIN
                            dbo.Products ON dbo.OrderProducts.ProductNO = dbo.Products.ProductNO INNER JOIN
                            dbo.ProductType ON dbo.Products.ProductTypeNO = dbo.ProductType.ProductTypeNO INNER JOIN
                            dbo.RequireSub ON dbo.RequireSub.RequireNO = dbo.OrderProducts.Box
                            WHERE     (dbo.RequireSub.RequireID = 6) ");
            strsql.Append(sql);
            strsql.Append(@"GROUP BY 
                            dbo.Orders.ChooseDate, dbo.Orders.PreGetGoodsDate, dbo.Orders.OrderNO, dbo.Customers.CustomerName1, 
                            dbo.Customers.CustomerName2, dbo.Customers.MobilePhone1,dbo.Customers.MobilePhone2, 
                            dbo.Products.ProductName, dbo.ProductType.ProductTypeName, dbo.RequireSub.RequireValue
                            ORDER BY 包装数量 DESC");
            return ExecuteDataSet(strsql.ToString(), "PackProductsDetail");
        }
        /// <summary>
        /// creater njro
        /// createtime 2012-03-28
        /// 介绍人介绍顾客统计
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet GetEmpIntroduce(string sql)
        {
            string sSql = @"SELECT dbo.Employee.EmployeeNO, dbo.Employee.EmployeeName, 
                            dbo.Department.DepartmentName,dbo.Customers.IntroducerType,
                            COUNT(dbo.Customers.CustomerNO) AS count
                             FROM dbo.Department INNER JOIN dbo.Employee ON 
                             dbo.Department.DepartmentNO = dbo.Employee.DepartmentNO 
                             INNER JOIN dbo.Customers ON 
                             dbo.Employee.EmployeeNO = dbo.Customers.IntroducerCardNO 
                             WHERE 1=1" + sql + @"GROUP BY 
  dbo.Employee.EmployeeNO, dbo.Employee.EmployeeName, dbo.Department.DepartmentName,Customers.IntroducerType
   ORDER BY count DESC";
            return ExecuteDataSet(sSql, "GetEmpIntroduce");
        }
        /// <summary>
        /// 查询订单号是否已存在
        /// zjj2012-03-16
        /// </summary>
        /// <param name="orderNo"></param>
        /// <returns></returns>
        [WebMethod]
        public int SearchExistOrderNo(string orderNo)
        {
            string sql = "select count(*) from  Orders where OrderNO='" + orderNo + "'";
            return Int32.Parse(ExecuteDataSet(sql, "existOrderNo").Tables[0].Rows[0][0].ToString());
        }

        //public DataSet selectQuJianIsCunZaiJiLuMessges(string sOrderNo, string timers)
        //{
        //    string strsql = "select DISTINCT PreGetGoodsDate from OrderProducts where  OrderNO='" + sOrderNo + "'";
        //    strsql += " select DISTINCT PreGetGoodsDate from OrderProducts where OrderNO='" + sOrderNo + "'  and (DATEDIFF(dd, PreGetGoodsDate, '" + timers + "') <= 0)";
        //    return ExecuteDataSet(strsql, "selectQuJianIsCunZaiJiLuMessges");
        //}

        [WebMethod]
        public DataSet selectQuJianIsCunZaiJiLuMessges(string orderno, string timers)
        {
            StringBuilder strsql = new StringBuilder();
            strsql.Append("");
            return ExecuteDataSet(strsql.ToString(), "selectQuJianIsCunZaiJiLuMessges");
        }

        /// <summary>
        /// 根据用户选择的日期和当前选中的单元格的索引查询处对应的产品的索引  取件
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sPreGetGoodsDate"></param>
        /// <param name="p"></param>
        /// <param name="p_4"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet GetOrderNoDataTimesUserSelectedRowSelectedCol(string sOrderNO, string sPreGetGoodsDate, string userselectedrowsindex, string userselectedcolindex)
        {
            StringBuilder strsql = new StringBuilder();
            if (userselectedrowsindex == null && userselectedcolindex == null)
            {
                strsql.Append(
                   " select op.OrderIndex from ControlTableFormat ctf join orderproducts op on ctf.OrderNO=op.OrderNO  and ctf.orderindex=op.orderindex where op.OrderNO='" +
                   sOrderNO + "' and datediff(dd,op.PreGetGoodsDate,'" + sPreGetGoodsDate + "')=0 ");
            }
            else
            {
                strsql.Append(
                    " select op.OrderIndex from ControlTableFormat ctf join orderproducts op on ctf.OrderNO=op.OrderNO  and ctf.orderindex=op.orderindex where op.OrderNO='" +
                    sOrderNO + "' and datediff(dd,op.PreGetGoodsDate,'" + sPreGetGoodsDate + "')=0 and GetGoodsRow='" +
                    userselectedrowsindex + "'and GetGoodsCol='" + userselectedcolindex + "'");
            }
            return ExecuteDataSet(strsql.ToString(), "GetOrderNoDataTimesUserSelectedRowSelectedCol");
        }


        /// <summary>
        /// 根据用户选择的日期和当前选中的单元格的索引查询处对应的产品的索引 看板
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sPreGetGoodsDate"></param>
        /// <param name="p"></param>
        /// <param name="p_4"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet GetOrderNoDataTimesUserSelectedRowSelectedColKanBan(string sOrderNO, string sPreGetGoodsDate, string userselectedrowsindex, string userselectedcolindex)
        {
            StringBuilder strsql = new StringBuilder();
            strsql.Append("select p.OrderIndex from ControlTableFormat t join OrderProducts p on t.OrderNO=p.OrderNO and t.OrderIndex=p.OrderIndex where p.OrderNO='" + sOrderNO + "' and datediff(dd,p.PreLookDate,'" + sPreGetGoodsDate + "')=0 and LookRow='" + userselectedrowsindex + "'and LookCol='" + userselectedcolindex + "'");
            return ExecuteDataSet(strsql.ToString(), "GetOrderNoDataTimesUserSelectedRowSelectedColKanBan");

        }


        /// <summary>
        /// 还没排入全套或者内景时候在安排外景
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sShootTimeN"></param>
        /// <param name="sShootAddress"></param>
        /// <param name="sShootEmployeeNO"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateN_PreShootWSlectedN(string sOrderNO, string sShootTime, string sShootAddress, string sShootEmployeeNO, string sShootMemory)
        {
            string sSql = "Update Orders Set PreShootDateW='" + sShootTime + "',ShootEmployeeNOW='" + sShootEmployeeNO + "',ShootMemoryW='" + sShootMemory + "',ShootDateW=null,ShootAddressN='" + sShootAddress + "' where OrderNO='" + sOrderNO + "' ";//ShootAddressW='" + sShootAddress + "',
            return ExecuteSql(sSql);
        }

        [WebMethod]//根据订单编号查询出对应的内景地点编号
        public string GetOrderNoSelectDuiYinDeSheYingAddressW(string orderno)
        {
            string strsql = @"select ShootAddressN from Orders where OrderNO='" + orderno + "'";
            DataSet ds = ExecuteDataSet(strsql, "GetOrderNoSelectDuiYinDeSheYingAddressW");
            StringBuilder strsqls = new StringBuilder();
            strsqls.Append(@"select ElementName from Element where  ElementType='摄影地点' and  ElementNO='" + ds.Tables[0].Rows[0][0].ToString() + "'");
            DataSet dss = ExecuteDataSet(strsqls.ToString(), "GetOrderNoSelectDuiYinDeSheYingAddressWs");
            //if (dss.Tables[0].Rows.Count > 0)
            //{
            return dss.Tables[0].Rows[0][0].ToString();

            //}
            //return null;
        }

        /// <summary>
        /// 导出选择的日期的当天的所有取件产品信息
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public DataSet OutExcelGetGoodOrderProducts(string strsql)
        {
            StringBuilder str = new StringBuilder();
            str.Append(@"SELECT       RIGHT(CONVERT(varchar, dbo.OrderProducts.PreGetGoodsDate, 120),9) AS 取件时间,(CONVERT(varchar,dbo.Products.ProductSizeA,2)+'*'+CONVERT(varchar,dbo.Products.ProductSizeB,2)) as 产品规格,dbo.Products.ProductName AS 取件产品名称,dbo.OrderProducts.ProductQuantity AS 产品数量,dbo.OrderProducts.ProductMemory AS 产品备注,dbo.Orders.OrderNO AS 订单编号,dbo.Orders.SuitePrice AS 订单价格,dbo.Customers.CustomerName1 AS 顾客姓名1, dbo.Customers.CustomerName2 AS 客户姓名2,dbo.Customers.MobilePhone1 AS 联系电话1,dbo.Customers.MobilePhone2 AS 联系电话2,dbo.Letters.[Address] AS 送货地址    
FROM         dbo.Customers INNER JOIN
                      dbo.Orders ON dbo.Customers.CustomerNO = dbo.Orders.CustomerNO INNER JOIN
                      dbo.OrderProducts ON dbo.Orders.OrderNO = dbo.OrderProducts.OrderNO INNER JOIN
                      dbo.Products ON dbo.OrderProducts.ProductNO = dbo.Products.ProductNO INNER JOIN
                      dbo.Element ON dbo.OrderProducts.GetGoodsAddress = dbo.Element.ElementNO LEFT JOIN 
                      dbo.Letters ON dbo.Customers.CustomerNO=dbo.Letters.CustomerNO
WHERE   1=1 ");
            str.Append(strsql);
            str.Append(@"AND (dbo.OrderProducts.ProduceState = '正常') AND 
                      (dbo.Orders.IsDelete = '0')
ORDER BY dbo.OrderProducts.PreGetGoodsDate,dbo.OrderProducts.OrderNO  ");
            return ExecuteDataSet(str.ToString(), "OutExcelGetGoodOrderProducts");
        }
        #region  图形报表方法 creater njro createdatetime：2012-04-09
        /// <summary>
        /// 摄影场地图形报表
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet ShootCountTwo(string sql)
        {
            string sSql = @"SELECT DepartmentName 摄影场地
      ,riqi 摄影日期
      ,SUM(Expr1) as 摄影对数
  FROM View_ShootCounts 
   where 1=1" + sql +
                              @"group by DepartmentName,riqi order by DepartmentName";
            return ExecuteDataSet(sSql, "ShootCountTwo");
        }

        /// <summary>
        /// 根据摄影日期和摄影场地查询出项目的摄影场地的所有订单对数
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet GetSubShootCount(string sql)
        {
            string sSql = @"select 摄影对数
  FROM View_SubShootCounts 
   where " + sql;
            return ExecuteDataSet(sSql, "ShootCountTwo");
        }
        /// <summary>
        /// 得到所有的摄影场地
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public DataSet GetShootDepartmentName(string sql)
        {
            string sSql = @"select DepartmentName from View_ShootCounts where 1=1 " + sql + @" group by DepartmentName";
            return ExecuteDataSet(sSql, "GetShootDepartmentName");
        }
        /// <summary>
        /// 得到所有的摄影日期段
        /// creater njro
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public DataSet GetShootDateTime(string sql)
        {
            string sSql = @"select riqi from View_ShootCounts where 1=1 " + sql + " group by riqi";
            return ExecuteDataSet(sSql, "GetShootDateTime");
        }
        /// <summary>
        /// 得到所有订单日期
        /// creater njr
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet GetOrderDatatime(string sql)
        {
            // DATEPART(YY,CONVERT(varchar(10), dbo.Orders.PreShootDateN, 120)) years,
            //,
            //DATEPART(DD,CONVERT(varchar(10), dbo.Orders.PreShootDateN, 120)) as ri 
            string sSql = @"select distinct 
            DATEPART(YY, CONVERT(varchar(10), dbo.Orders.PreShootDateN, 120)) as years,          
            DATEPART(MM,CONVERT(varchar(10), dbo.Orders.PreShootDateN, 120)) as maoth
            from Orders where 1=1"
                + sql +
            @"group by PreShootDateN ";
            return ExecuteDataSet(sSql, "GetOrderDatatime");
        }
        /// <summary>
        /// 得到套系价格段
        /// njr
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet GetDateTime(string sql)
        {
            string sSql = @"select suite,count(*) counts
                        from (
                                select OrderNO,
                                case when 
                                OrderSuitePrice<1000 
                                then '1000 以下'  when OrderSuitePrice>=1000 and OrderSuitePrice<2000 
                                then '1000-2000' when OrderSuitePrice>=2000 and OrderSuitePrice<3000 
                                then '2000-3000' when OrderSuitePrice>=3000 and OrderSuitePrice<4000 
                                then '3000-4000' when OrderSuitePrice>=4000 and OrderSuitePrice<5000 
                                then '4000-5000' when OrderSuitePrice>=5000 and OrderSuitePrice<6000 
                                then '5000-6000' when OrderSuitePrice>=6000 and OrderSuitePrice<7000 
                                then '6000-7000' when OrderSuitePrice>=7000 and OrderSuitePrice<8000 
                                then '7000-8000' when OrderSuitePrice>=8000 and OrderSuitePrice<9000 
                                then '8000-9000' when OrderSuitePrice>=9000 then '9000 以上' 
                                end as Suite from 
                                dbo.Orders 
                        where 1=1" + sql +
                              @") 
                                as OrderCount 
                                group by Suite 
                                order by Suite";
            return ExecuteDataSet(sSql, "GetDateTime");
        }
        /// <summary>
        /// 订单套系价格折线图
        /// creater njr
        /// create datatime 2010-05-08
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet OraderCounts(string sql)
        {
            string sSql = @"select  OrderCount.maoth, suite,count(*) counts
            from (
                    select distinct 
        DATEPART(MM,CONVERT(varchar(10), dbo.Orders.PreShootDateN, 120)) as maoth,OrderNO,
                    case when 
                    OrderSuitePrice<1000 
                    then '1000 以下'  when OrderSuitePrice>=1000 and OrderSuitePrice<2000 
                    then '1000-2000' when OrderSuitePrice>=2000 and OrderSuitePrice<3000 
                    then '2000-3000' when OrderSuitePrice>=3000 and OrderSuitePrice<4000 
                    then '3000-4000' when OrderSuitePrice>=4000 and OrderSuitePrice<5000 
                    then '4000-5000' when OrderSuitePrice>=5000 and OrderSuitePrice<6000 
                    then '5000-6000' when OrderSuitePrice>=6000 and OrderSuitePrice<7000 
                    then '6000-7000' when OrderSuitePrice>=7000 and OrderSuitePrice<8000 
                    then '7000-8000' when OrderSuitePrice>=8000 and OrderSuitePrice<9000 
                    then '8000-9000' when OrderSuitePrice>=9000 then '9000 以上' 
                    end as Suite from 
                    dbo.Orders 
            where 1=1 " + sql + @")
                    as OrderCount 
                    group by maoth,Suite
                    order by maoth,Suite";
            return ExecuteDataSet(sSql, "OraderCounts");
        }
        /// <summary>
        /// 套系价格饼图报表
        /// creater njr
        /// create datatime 2012-04-20
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet OraderCountTwo(string sql)
        {
            string sSql = @"select suite,sum(t.price) price,sum(counts)counts from
                            (select suite,sum(OrderCount.price) price,count(*) counts
                            from (select sum(SuitePrice) as price, OrderNO,
                                    case when 
                                    OrderSuitePrice<1000 
                                    then '1000 以下'  when OrderSuitePrice>=1000 and OrderSuitePrice<2000 
                                    then '1000-2000' when OrderSuitePrice>=2000 and OrderSuitePrice<3000 
                                    then '2000-3000' when OrderSuitePrice>=3000 and OrderSuitePrice<4000 
                                    then '3000-4000' when OrderSuitePrice>=4000 and OrderSuitePrice<5000 
                                    then '4000-5000' when OrderSuitePrice>=5000 and OrderSuitePrice<6000 
                                    then '5000-6000' when OrderSuitePrice>=6000 and OrderSuitePrice<7000 
                                    then '6000-7000' when OrderSuitePrice>=7000 and OrderSuitePrice<8000 
                                    then '7000-8000' when OrderSuitePrice>=8000 and OrderSuitePrice<9000 
                                    then '8000-9000' when OrderSuitePrice>=9000 then '9000 以上' 
                                    end as Suite from 
                                    dbo.Orders  
                            where 1=1 " + sql + @"group by OrderNO,OrderSuitePrice )OrderCount 
		                            group by Suite,price
		                    )t group by suite order by suite";
            return ExecuteDataSet(sSql, "OraderCountTwo");
        }

        #endregion
        /// <summary>
        /// zjj2012-04-25
        /// </summary>
        /// <param name="sSql"></param>
        /// <returns></returns>
        [WebMethod]
        public bool UpdateOrders(string sSql)
        {
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// zjj-2012-05-17
        /// 批量添加订单所有产品操作信息(只记录流程,不改变状态)
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sProcess"></param>
        /// <param name="sDepartmentNO"></param>
        /// <param name="sCreate"></param>
        /// <param name="sCreateDate"></param>
        /// <returns></returns>
        [WebMethod]
        public bool InsertOrderLogoBatZO(string sOrderNO, string sProcess, string sDepartmentNO, string sCreate, string sCreateDate, string sLogoType, string sLogoContext)
        {
            DataSet myds = new DataSet();
            try
            {
                OpenConn();
                string Sql = "select OrderNO, OrderIndex, SeparateNO from OrderProducts where OrderNO='" + sOrderNO + "' ";
                SqlDataAdapter myda = new SqlDataAdapter(Sql, Conn);
                myda.Fill(myds, "OrderProducts");
                CloseConn();
            }
            catch { return false; }
            if (myds.Tables[0].Rows.Count > 0)
            {
                DataRow[] dr = myds.Tables[0].Select("1=1");
                for (int i = 0; i < dr.Length; i++)
                {
                    InsertOrderLogoZO(sOrderNO, dr[i]["OrderIndex"].ToString(), dr[i]["SeparateNO"].ToString(), "", sProcess, "", sCreate, sCreateDate, "0", sLogoType, sLogoContext);
                }
            }
            return true;
        }
        /// <summary>
        /// zjj2012-05-17
        /// 新增操作日志
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sOrderIndex"></param>
        /// <param name="sSeparateNO"></param>
        /// <param name="sLogoIndex"></param>
        /// <param name="sProcess"></param>
        /// <param name="sDepartmentNO"></param>
        /// <param name="sCreate"></param>
        /// <param name="sCreateDate"></param>
        /// <param name="sLogoType"></param>
        /// <param name="sLogoContext"></param>
        /// <returns></returns>
        [WebMethod]
        public bool InsertOrderLogoZO(string sOrderNO, string sOrderIndex, string sSeparateNO, string sLogoIndex, string sProcess, string sDepartmentNO, string sCreate, string sCreateDate, string sState, string sLogoType, string sLogoContext)
        {
            string sSql = ""; //"Update OrderLogo set State=0 where OrderNO='" + sOrderNo + "' and ProductNO='" + sProductNO + "' and SeparateNO='" + sSeparateNO + "' ";
            sSql += "declare @a int set @a=isnull((SELECT MAX(LogoIndex) AS Expr1 FROM OrderLogo where OrderNO='" + sOrderNO + "' and OrderIndex='" + sOrderIndex + "' and SeparateNO='" + sSeparateNO + "'),0)+1 set @a=right(cast(@a+10000 as varchar(20)),3) Insert into Logo (OrderNO, OrderIndex, SeparateNO, LogoIndex, Process, DepartmentNO, [Create], CreateDate, State,LogoType,LogoContext) values ('" + sOrderNO + "','" + sOrderIndex + "','" + sSeparateNO + "',@a,'" + sProcess + "','" + sDepartmentNO + "','" + sCreate + "','" + sCreateDate + "','" + sState + "','" + sLogoType + "','" + sLogoContext + "')";
            return ExecuteSql(sSql);
        }

        /// <summary>
        /// zjj2012-05-17新增操作流程
        /// </summary>
        /// <param name="sProcess"></param>
        /// <param name="sDepartmentNO"></param>
        /// <param name="sCreate"></param>
        /// <param name="sCreateDate"></param>
        /// <param name="sState"></param>
        /// <param name="sLogoType"></param>
        /// <param name="sLogoContext"></param>
        /// <returns></returns>
        [WebMethod]
        public bool InsertOrderLogoCustZO(string sProcess, string sDepartmentNO, string sCreate, string sCreateDate, string sState, string sLogoType, string sLogoContext)
        {
            string sSql = "";
            sSql += "Insert into Logo (Process, DepartmentNO, [Create], CreateDate, State,LogoType,LogoContext) values ('" + sProcess + "','" + sDepartmentNO + "','" + sCreate + "','" + sCreateDate + "','" + sState + "','" + sLogoType + "','" + sLogoContext + "')";
            return ExecuteSql(sSql);
        }
        /// <summary>
        /// qqq2012-05-17
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sProcess"></param>
        /// <param name="sDepartmentNO"></param>
        /// <param name="sCreate"></param>
        /// <param name="sCreateDate"></param>
        /// <param name="sState"></param>
        /// <param name="sLogoType"></param>
        /// <param name="sLogoContext"></param>
        /// <returns></returns>
        [WebMethod]
        public bool InsertOrderLogoZON(string sOrderNO, string sProcess, string sDepartmentNO, string sCreate, string sCreateDate, string sState, string sLogoType, string sLogoContext)
        {
            string sSql = "";
            sSql += "Insert into Logo (OrderNO, Process, DepartmentNO, [Create], CreateDate, State,LogoType,LogoContext) values ('" + sOrderNO + "','" + sProcess + "','" + sDepartmentNO + "','" + sCreate + "',getdate(),'" + sState + "','" + sLogoType + "','" + sLogoContext + "')";//update by wujianbo 20121106 更新时间取服务器时间

            return ExecuteSql(sSql);
        }
        /// <summary>
        /// qiuqianquan 20120526
        /// </summary>
        /// <param name="orderno"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet GetPreLookDateGetAllTimers(string orderno)
        {
            string str = @"SELECT distinct  PreLookDate
  FROM OrderProducts where   PreLookDate!='1900-01-01 00:00:00.000' and OrderNO='" + orderno + "'";
            return ExecuteDataSet(str, "GetPreLookDateGetAllTi mers");
        }
        /// <summary>
        /// qiuqianquan 20120526
        /// </summary>
        /// <param name="orderno"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet GetCompanyRegisterInformation(string SelectedOrInserted, string textstring)
        {
            string strsql = string.Format(@" declare @SelectOrUpdate varchar(20)
 set @SelectOrUpdate='" + SelectedOrInserted + @"'
 if(@SelectOrUpdate='查询')
 begin
 select Configuration from CompanyRegisterInformation where IsDeleteStates=0
 end
 else if(@SelectOrUpdate='修改')
 begin
 update CompanyRegisterInformation set Configuration='" + textstring + @"' where CompanyBM='LZ' and IsDeleteStates=0
 select Configuration from CompanyRegisterInformation where IsDeleteStates=0
 end");
            return ExecuteDataSet(strsql, "GetCompanyRegisterInformation");
        }

        /// <summary>
        /// 绑定部门摄影地址
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public DataSet GetElementNameDaoKa()
        {
            string strsql = "select ElementNO, ElementName from Element where Element.ElementType='摄影地点'";
            return ExecuteDataSet(strsql, "GetElementNameDaoKa");
        }



        /// <summary>
        /// 绑定导卡师
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public DataSet GetInitDaoKaiShi()
        {
            string strsql = "select distinct Employee.EmployeeName,Employee.EmployeeNO from dbo.Employee where EmployeeDuty='Duty_97' and IsDelete=0";
            return ExecuteDataSet(strsql, "GetInitDaoKaiShi");
        }

        [WebMethod]
        public DataSet GetDaoAllImagesFile(string strsql)
        {

            StringBuilder stb = new StringBuilder();
            stb.Append(@"select distinct Orders.OrderNO ,Orders.ImageCount ,Orders.ImagePath,Orders.BackupPath ,Orders.Process ,Employee.EmployeeName,Customers.CustomerName1,Customers.CustomerName2
   from OrderLogo  inner join Orders on Orders.OrderNO=OrderLogo.OrderNO  
                   inner join Employee on Employee.EmployeeNO=OrderLogo.[Create] 
                   inner join Customers on Customers.CustomerNO=Orders.CustomerNO
   where 1=1 and Orders.IsDelete=0");
            stb.Append(strsql);

            return ExecuteDataSet(stb.ToString(), "GetInitDaoKaiShi");
        }

        [WebMethod]
        public DataSet countsize(string str)
        {
            return ExecuteDataSet(str.ToString(), "countsize");
        }

        /// <summary>
        /// 根据订单编号修改订单上传订单路径
        /// </summary>
        /// <param name="sorderno"></param>
        /// <returns></returns>

        [WebMethod]
        public DataSet GetOrdersNoUpdateImagePath(string sorderno)
        {
            return ExecuteDataSet(@"declare @selectcount int, @selectimagecount int,@sorderno varchar(50)
SET @sorderno='" + sorderno + @"'
set @selectcount=(select COUNT(ImagePath) from Orders  where Orders.OrderNO=@sorderno)  
set @selectimagecount=(select distinct COUNT(OrderNO) from OrderFiles where OrderNO=@sorderno)  
if(@selectcount>0)
begin
update Orders set ImagePath='',Orders.ImageCount='0' where Orders.OrderNO=@sorderno
end
if(@selectimagecount>0)
begin
delete OrderFiles where  OrderNO=@sorderno
end", "countsize");
        }

        /// <summary>
        /// qiuqianquan 20120606
        /// </summary>
        /// <param name="OrdersNo"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet GetGoodsAddressQuKong(string OrdersNo, string save, string txtboxtent)
        {
            StringBuilder strsql = new StringBuilder();
            if (save == "查询")
            {
                strsql.Append(@"declare @OrdersNo varchar(200),@CustomerNOCount int,@CustomerNO varchar(200)
set @OrdersNo='" + OrdersNo + @"'
set @CustomerNOCount=(select COUNT(CustomerNO) from Orders where OrderNO=@OrdersNo)
set @CustomerNO=(select CustomerNO from Orders where OrderNO=@OrdersNo) 
if(@CustomerNOCount>0)
begin
select (isnull([Address],'')) as [Address] from Letters where CustomerNO=@CustomerNO and Letters.IsEnableAddress=0
end");
            }
            //            if (save == "保存")
            //            {
            //                strsql.Append(@"declare @OrdersNo varchar(200),@CustomerNO varchar(200),@counts int,@yuanlaiaddress varchar(max)
            //set @OrdersNo='" + OrdersNo + @"'
            //set @counts=(select COUNT(CustomerNO) from Orders where OrderNO=@OrdersNo) 
            //set @CustomerNO=(select CustomerNO from Orders where OrderNO=@OrdersNo)
            //set @yuanlaiaddress=(select GetGoodsAddress from Letters where CustomerNO=@CustomerNO)
            //if(@counts>0)
            //begin 
            //update Letters set GetGoodsAddress=isnull(@yuanlaiaddress,'')+';" + txtboxtent + @"' where CustomerNO=@CustomerNO
            //end");

            //            }
            return ExecuteDataSet(strsql.ToString(), "GetGoodsAddressQuKong");
        }


        /// <summary>
        /// 根据订单编号查询对应的取件地址信息
        /// </summary>
        /// <param name="sordersno"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet getGoodsaddress(string sordersno)
        {
            string strsql = @"declare @OrdersNo varchar(200),@CustomerNOCount int,@CustomerNO varchar(200)
set @OrdersNo='" + sordersno + @"'
set @CustomerNOCount=(select COUNT(CustomerNO) from Orders where OrderNO=@OrdersNo)
set @CustomerNO=(select CustomerNO from Orders where OrderNO=@OrdersNo) 
if(@CustomerNOCount>0)
begin
select (isnull([Address],'')) as [Address],id,IsEnableAddress from Letters where CustomerNO=@CustomerNO
end";
            return ExecuteDataSet(strsql, "getGoodsaddress");
        }

        /// <summary>
        /// 得到所有的ID
        /// </summary>
        /// <param name="ordersno"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet returndatatable(string ordersno)
        {
            string sqlselected = "";

            sqlselected = @"select Letters.ID from Letters where Letters.CustomerNO=(select distinct CustomerNO from Orders where OrderNO='" + ordersno + @"') ";//得到多行或者一行ID  
            return ExecuteDataSet(sqlselected, "returndatatable");
        }
        /// <summary>
        /// 批量修改
        /// </summary>
        /// <param name="shuzhuid"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet UpLettersGetByID(string[] shuzhuid)
        {
            StringBuilder sqlselected = new StringBuilder();
            for (int i = 0; i < shuzhuid.Length; i++)
            {
                sqlselected.Append(@" update Letters set IsEnableAddress=1 where Letters.ID='" + shuzhuid[i] + @"' and Letters.IsEnableAddress=0  ");
            }
            return ExecuteDataSet(sqlselected.ToString(), "UpLettersGetByID");
        }


        /// <summary>
        /// 新增取件送货地址
        /// </summary>
        /// <param name="ordersno"></param>
        /// <param name="context"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet InsertintoLetters(string ordersno, string context)
        {
            string strsql = @"declare @OrdersNo varchar(200),@CustomerNOCount int,@CustomerNO varchar(200)
set @OrdersNo='" + ordersno + @"'
set @CustomerNOCount=(select COUNT(CustomerNO) from Orders where OrderNO=@OrdersNo)
set @CustomerNO=(select CustomerNO from Orders where OrderNO=@OrdersNo) 
if(@CustomerNOCount>0)
begin
insert into Letters (CustomerNO,CustomerName,[Address],ZipCode,IsEnableAddress,CreateGoodTime) values(@CustomerNO,'NULL','" + context + @"','',0,GETDATE()) 
end";
            return ExecuteDataSet(strsql, "InsertintoLetters");
        }

        /// <summary>
        /// 连接的选择的修改
        /// </summary>
        /// <param name="customerid"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet UpGetCustomerID(int customerid)
        {
            return ExecuteDataSet(@"declare @count int,@Customerid int
set @Customerid='" + customerid + @"'
set @count=(select COUNT(ID) from Letters where ID=@Customerid)
if(@count>0)
begin 
update Letters set IsEnableAddress=0 where ID=@Customerid
end", "UpGetCustomerID");
        }
        /// <summary>
        /// 根据登陆的用户名进行查询
        /// </summary>
        /// <param name="name"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet getuserLogin(string name)
        {
            return ExecuteDataSet(@"select  dbo.Employee.DepartmentNO, dbo.Employee.EmployeeNO, dbo.Employee.EmployeeNO2,dbo.Employee.EmployeePassword,dbo.Employee.EmployeeDuty, dbo.FinancialPricing.Percentum   from dbo.Employee  inner join FinancialPricing on dbo.Employee.EmployeeDuty=dbo.FinancialPricing.ConfigNO where dbo.Employee.IsDelete=0 and dbo.Employee.EmployeeNO2='" + name + @"'", "getuserLogin");
        }

        /// <summary>
        /// 获取登陆员工信息
        /// add by wujianbo 20130201
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet getLoginUser(string sql)
        {
            return ExecuteDataSet(@"select  dbo.Employee.DepartmentNO, dbo.Employee.EmployeeNO, dbo.Employee.EmployeeNO2,dbo.Employee.EmployeePassword,dbo.Employee.EmployeeDuty, dbo.FinancialPricing.Percentum   from dbo.Employee  inner join FinancialPricing on dbo.Employee.EmployeeDuty=dbo.FinancialPricing.ConfigNO where dbo.Employee.IsDelete=0 " + sql, "getuserLogin");
        }

        /// <summary>
        /// 报表权限首次查询
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public DataSet FinancialPricingSelected()
        {
            return ExecuteDataSet(@"select Config.ConfigValue as 职务,FinancialPricing.Percentum as 成本百分比,FinancialPricing.CreateDate as 时间,FinancialPricing.ConfigNO as 权限 from FinancialPricing inner join Config on FinancialPricing.ConfigNO=Config.ConfigNO", "FinancialPricingSelected");
        }

        /// <summary>
        /// 报表权限首次查询
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public DataSet UpdateFinancialPricing(string sql)
        {
            return ExecuteDataSet(sql, "UpdateFinancialPricing");
        }

        [WebMethod]
        public DataSet getDutyPercentum(string DutyPercentum)
        {
            return ExecuteDataSet(@"select Percentum from dbo.FinancialPricing where FinancialPricing.ConfigNO='" + DutyPercentum + "'", "getDutyPercentum");
        }

        [WebMethod]
        public bool AddShengAddress(string shengaddress)
        {
            string sql = string.Format(@"declare @fujiidcount int,@shengname varchar(100)
set @shengname='" + shengaddress + @"'
begin 
set @fujiidcount=(select COUNT(*) from Area where Area.menuparent=0)
 if(@fujiidcount=0)
 begin
  insert into Area values(100,0,@shengname,default)
   select * from Area
 end
 else
 begin
 set @fujiidcount=(select MAX(Area.menuid) from Area )
 insert into Area values(@fujiidcount+1,0,@shengname,default)
 select * from Area 
 end
end");
            return ExecuteSql(sql.ToString());
        }



        [WebMethod]
        public DataSet SelectedShengName()
        {
            return ExecuteDataSet(" select Area.menuid,Area.menuname,Area.IsCheked from Area where Area.menuparent=0", "SelectedShengName");
        }

        [WebMethod]
        public DataSet SelectedShiName(int pid)
        {
            return ExecuteDataSet(" select Area.menuid,Area.menuname,Area.IsCheked from Area where  Area.menuparent=" + pid + "", "SelectedShiName");
        }

        [WebMethod]
        public DataSet SelectedQuName(int cpid)
        {
            return ExecuteDataSet(" select menuid,menuname,Area.IsCheked from Area  where Area.MenuParent=" + cpid + "", "SelectedQuName");
        }
        [WebMethod]
        public bool AddShiAddress(int shengid, string shiaddress)
        {
            string sql = string.Format(@"declare @fujiid int,@zijiid int,@fujicount int,@zijifcount int,@index int,@shengname varchar(100)
 set @fujiid=" + shengid + @"
 set @shengname='" + shiaddress + @"'
 begin
   set @fujicount=(select COUNT(*) from area where area.menuid=@fujiid) 
   if(@fujicount>0)
   begin
   set @zijifcount=( select COUNT(*) from area where area.menuparent=@fujiid ) 
   set @zijiid=(select max(area.menuid) from area) 
     if(@zijifcount>0)
		 begin
		  insert into area values(@zijiid+1,@fujiid,@shengname,default) 
		  select * from Area
		 end
     else if(@zijifcount=0)
		 begin 
		    set @zijiid=(select MAX(area.MenuId) from area) 
		    insert into area values(@zijiid+1,@fujiid,@shengname,default)
		    select * from Area
		 end
   end 
 end");
            return ExecuteSql(sql.ToString());
        }



        //        [WebMethod]
        //        public bool AddquxianAddress(int shengid, int shiid, string shiaddress)
        //        {
        //            string sql = string.Format(@"declare @menuid int ,@menuparentid int,@count int ,@val int,@size int,@addressname varchar(100),@id int,@idva int
        //set @menuid=" + shiid + @"
        //set @menuparentid=" + shengid + @"
        //set @addressname='" + shiaddress + @"'
        //begin
        //  set @count=(select COUNT(*) from Area where Area.MenuParent=@menuparentid and Area.MenuId=@menuid)
        //  if(@count>0)
        //  begin
        //   set @val=( select Area.MenuId from Area where Area.MenuParent=@menuparentid and Area.MenuId=@menuid)
        //   set @size= (select count(*) from Area where Area.MenuParent=@val)
        //   if(@size>0)
        //     begin
        //      set @idva=( select MAX(Area.MenuId) from Area where Area.MenuParent=@val) 
        //       insert into Area values(@idva+1,@menuid,@addressname,default) 
        //     end
        //    else
        //     begin 
        //      set @id=CONVERT(nvarchar(6),@val)+CONVERT(nvarchar(3),'001')
        //      print @id
        //       print @val
        //       insert into Area values(@id,@val,@addressname,default)
        //     end
        //  end 
        //end");
        //    return ExecuteSql(sql.ToString());
        //}

        [WebMethod]
        public DataSet all()
        {
            return ExecuteDataSet("select   Area.MenuId,Area.MenuParent,Area.MenuName,Area.IsCheked from Area", "all");
        }

        #region Add by Caijinsong 2013-3-4
        /// <summary>
        /// 
        /// </summary>
        /// <param name="oldTime"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet DownloadArea(DateTime oldTime)
        {
            String sSql = "select Area.MenuId,Area.MenuParent,Area.MenuName,Area.IsCheked from Area";
            if (DateTime.Compare(oldTime, DateTime.Parse("1989-1-1")) > 0)
            {
                sSql += " where DATEDIFF(DD,LastUpdateTime,'" + oldTime + "')<0";
            }
            try
            {
                return ExecuteDataSet(sSql, "Area");
            }
            catch (System.Exception ex)
            {
                this._Msg = ex.Message;
                return null;
            }
        }
        #endregion

        [WebMethod]
        public bool areadelete(string menuid)
        {
            bool reult = false;
            if (menuid.Length > 0)
            {
                reult = ExecuteSql(@"with Allmenu
                    as
                    (
	                    select id,MenuId,MenuParent,MenuName,IsCheked 
	                    from Area
	                    where MenuId = " + menuid + @"
		                    --and IsCheked = 0
	                    union all
	                    select Ar.id,Ar.MenuId,Ar.MenuParent,Ar.MenuName,Ar.IsCheked 
	                    from Allmenu Allm,Area Ar
	                    where --Ar.IsCheked = 0
		                    --and
		                     Ar.MenuParent = Allm.MenuId
                    )
                    delete A 
                    from Area A,Allmenu B
                    where A.id = B.id");
            }

            return reult;
        }
        [WebMethod]
        public bool updata_area_shengjiandshiji(int pmenuid, int cmenuid)
        {
            return ExecuteSql(@"declare @fujimenuid int,@zijimenuid int,@fijicount int,@zijicount int
 set @fujimenuid=" + pmenuid + @"
 set @zijimenuid=" + cmenuid + @"
 begin 
  set @fijicount=(select COUNT(*) from Area where Area.MenuId=@fujimenuid)
  set @zijicount=(select COUNT(*) from Area where Area.MenuId=@zijimenuid)
  if(@fijicount>0 and @zijicount>0)
  begin
   update Area set Area.IsCheked=1 where Area.MenuId=@fujimenuid and Area.MenuParent=0
  update Area set Area.IsCheked=1 where Area.MenuId=@zijimenuid and Area.MenuParent=@fujimenuid 
   update Area set Area.IsCheked=0 where Area.MenuId!=@fujimenuid and Area.MenuParent=0
   update Area set Area.IsCheked=0 where Area.MenuId!=@fujimenuid and Area.MenuParent!=@fujimenuid 
   select * from Area
  end 
  select * from Area
 end");
        }
        /// <summary>
        /// 区域数据
        /// </summary>
        /// <returns></returns>
        public DataSet GetArea(string sql)
        {
            string sqlString = "select MenuId,MenuParent,MenuName,IsCheked from Area where 1=1 " + sql;
            return ExecuteDataSet(sqlString, "Area");
        }

        [WebMethod]
        public bool updateCleanOut(string dressChipNO, string DressRemark, string DressState, string DressRemark2, string DressDestionation, string DressEstimateDate, string DressOperator, string DressRemark1)
        {
            string sql = string.Format("update DressInfo set DressRemark='" + DressRemark + "',DressState='" + DressState + "',DressRemark1='" + DressRemark1 + "',DressDestionation='" + DressDestionation + "',DressOperator='" + DressOperator + "',DressRemark2='" + DressRemark2 + "',DressEstimateDate='" + DressEstimateDate + "' where DressChipNO='" + dressChipNO + "' ");
            return ExecuteSQL_czb(sql, CommandType.Text);
        }


        [WebMethod]
        public bool insert_area(string str)
        {
            return ExecuteSql(str);
        }


        /// <summary>
        /// 查找部门编码
        /// Caijinsong:2012-11-21
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchCompanyBM()
        {
            String sSql = String.Empty;

            sSql += "select CompanyChinese,CompanyBM,CompanyEnglish from CompanyRegisterInformation;";
            return ExecuteDataSet(sSql, "CompanyBM");
        }




        /// <summary>
        /// qiuqianquan 2013-01-07
        /// </summary>
        /// <param name="SmsPhone">客户电话</param>
        /// <param name="SmsContent">短信内容</param>
        /// <param name="SmsStatus">发送状态</param>
        /// <param name="CustomerName">客户姓名</param>
        /// <param name="sex">客户性别</param>
        /// <returns></returns>
        [WebMethod]
        public bool InsetSendMessages(string SmsPhone, string SmsContent, string SmsStatus, string CustomerName, string sex)
        {
            return ExecuteSql(@"insert into SMSOld ([CustomerNO] ,[EmployeeNO] ,[SmsN] ,[SmsPWD] ,[SmsPhone] ,[SmsContent] ,[SmsTime] ,[SmsPriority] ,[SmsStatus] ,[SmsAiStatus]  ,[CustomerName] ,[CustomerSex])
     values('无','无',null,null,'" + SmsPhone + "','" + SmsContent + "',GETDATE(),5,'" + SmsStatus + "',0,'" + CustomerName + "',null)");
        }

        /// <summary>
        /// qiuqianquan 2013-01-07
        /// </summary>
        /// <param name="SmsPhone">客户电话</param>
        /// <param name="SmsContent">短信内容</param>
        /// <param name="SmsStatus">发送状态</param>
        /// <param name="CustomerName">客户姓名</param>
        /// <param name="sex">客户性别</param>
        /// <returns></returns>
        [WebMethod]
        public bool InsetSendMessages1(string SmsPhone, string SmsContent, string SmsStatus, string CustomerName, string sex)
        {
            return ExecuteSql(@"insert into SMSOld1 ([CustomerNO] ,[EmployeeNO] ,[SmsN] ,[SmsPWD] ,[SmsPhone] ,[SmsContent] ,[SmsTime] ,[SmsPriority] ,[SmsStatus] ,[SmsAiStatus]  ,[CustomerName] ,[CustomerSex])
     values('无','无',null,null,'" + SmsPhone + "','" + SmsContent + "',GETDATE(),5,'" + SmsStatus + "',0,'" + CustomerName + "',null)");
        }


        /// <summary>
        /// qiuqianquan 2013-01-07
        /// </summary>
        /// <param name="typename">短信类型</param>
        /// <returns></returns>
        [WebMethod]
        public DataTable MessageSend_GetData(string typename)
        {
            return ExecuteDataSet(@"select su.id as id, name,content1,forwarddays,sendtime from SMSAi sa,SMSUsefulExpressions su where sa.id=su.id
and sa.name like '%" + typename + "%'", "CompanyBM").Tables[0];
        }


        /// <summary>
        /// 增删改
        /// </summary>
        /// <param name="sql"></param>
        /// <param name="sps"></param>
        public static void ENQ(string sql, params SqlParameter[] sps)
        {
            //创建数据库连接
            SqlConnection conn = new SqlConnection(ConnString);
            //打开数据库
            conn.Open();
            //创建命令对象
            SqlCommand cmd = new SqlCommand(sql, conn);
            //添加参数
            cmd.Parameters.AddRange(sps);
            //执行增删改
            cmd.ExecuteNonQuery();
            //关闭数据库
            conn.Close();
        }
        /// <summary>
        /// 返回第一行第一列
        /// </summary>
        /// <param name="sql"></param>
        /// <param name="sps"></param>
        /// <returns></returns>
        public static object ES(string sql, params SqlParameter[] sps)
        {
            //创建数据库连接
            SqlConnection conn = new SqlConnection(ConnString);
            //打开数据库
            conn.Open();
            //创建命令对象
            SqlCommand cmd = new SqlCommand(sql, conn);
            //添加参数
            cmd.Parameters.AddRange(sps);
            //执行返回第一行第一列
            object o = cmd.ExecuteScalar();
            //关闭数据库
            conn.Close();
            return o;
        }
        /// <summary>
        /// 返回数据表
        /// </summary>
        /// <param name="sql"></param>
        /// <param name="sps"></param>
        /// <returns></returns>
        public static DataSet DS(string sql, params SqlParameter[] sps)
        {
            //创建数据库连接
            SqlConnection conn = new SqlConnection(ConnString);
            //创建数据适配器
            SqlDataAdapter sda = new SqlDataAdapter(sql, conn);
            //添加数参数
            sda.SelectCommand.Parameters.AddRange(sps);
            //创建数据集
            DataSet ds = new DataSet();
            //填充数据集
            sda.Fill(ds);
            return ds;
        }


        #region KQSystem

        /// <summary>
        /// Caijinsong 2013-1-23
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public DataSet GetKQUser()
        {
            String sSql = "SELECT [KQ_ID],[Name],[FingerIndex],[TemData],[Privilege],[Password],[Enabled],[Flag] FROM [KQ_Employee]";
            DataSet ds = null;
            try
            {
                ds = ExecuteDataSet(sSql, "KQUser");
            }
            catch (System.Exception ex)
            {
                return null;
            }
            return ds;
        }

        /// <summary>
        /// Caijinsong:Add 2013-1-23
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public bool AddKQLog(int enrollNumber, int verifyMode, int inOutModel, String dateTime, int workCode)
        {
            bool success = false;
            StringBuilder sql = new StringBuilder();
            sql.Append(@"declare @date varchar(50)  declare @count int");
            sql.Append(@" set @date='" + dateTime + @"'
                    set @count=( select COUNT(*) from KQ_AttendanceLogs where KQ_AttendanceLogs.Date=@date)
                    if(@count<=0)
                    begin ");
            sql.Append("insert into KQ_AttendanceLogs(EnrollNumber,VerifyMode,InOutMoel,Date,WorkCode,weekdays) values (" + enrollNumber + "," + verifyMode + "," + inOutModel + ",'" + dateTime + "'," + workCode + ", (select datename(weekday,getdate()))" + ") end ");


            try
            {
                success = ExecuteSql(sql.ToString());
            }
            catch (System.Exception ex)
            {

            }
            return success;
        }

        /// <summary>
        /// 查询服务器保存的 考勤记录
        /// Caijinsong:2013-1-13
        /// </summary>
        /// <returns></returns>
        [WebMethod]
        public DataSet SearchKQLog()
        {
            String sSql = @"select [EnrollNumber],E.KQDepartmentName,E.Name,case [VerifyMode] when 0 then '密码' when 1 then '指纹' when 2 then '卡' else '其他' end as [VerifyMode],[InOutMoel],[Date],[WorkCode] 
                            from KQ_AttendanceLogs A left outer join (select distinct KQ_ID,Name,KQDepartmentName from KQ_Employee) E on A.EnrollNumber=E.KQ_ID
                            order by [EnrollNumber]";
            DataSet ds = null;
            try
            {
                ds = ExecuteDataSet(sSql, "KQLog");
            }
            catch (System.Exception ex)
            {
                return null;
            }
            return ds;
        }

        /// <summary>
        /// 获得考勤用户名
        /// Caijinsong:2013-1-13
        /// </summary>
        /// <param name="kqID"></param>
        /// <returns></returns>
        [WebMethod]
        public String SearchKQUserNameByKQID(int kqID)
        {
            String sSql = "select distinct Name from KQ_Employee where KQ_ID=" + kqID;
            try
            {
                return ExecuteSqlToString(sSql);
            }
            catch (System.Exception ex)
            {
                throw ex;
            }
        }

        [WebMethod]
        public DataSet GetStandardTime(DateTime clockTime, String userID)
        {
            DataSet ds = null;
            try
            {
                String sSql = @"select [KQ_Classe].ClasseUpTime,[KQ_Classe].ClasseDownTime,KQ_Classe.ClasseName,[KQ_InsertClasse].StateType
                                from [KQ_Classe] inner join [KQ_InsertClasse] on [KQ_Classe].Id = [KQ_InsertClasse].InsertClasseId inner join [KQ_Employee] on KQ_InsertClasse.UserID = KQ_Employee.UserID
                                where KQ_InsertClasse.IsDelete=0 and KQ_Classe.IsDelete=0 and KQ_InsertClasse.InsertClasseValues=DATENAME(weekday,'" + clockTime + "') and KQ_Employee.UserID='" + userID + "'";
                ds = ExecuteDataSet(sSql, "StandardTime");
            }
            catch (System.Exception ex)
            {
                this._Msg = ex.Message;
            }
            return ds;
        }

        #region liguangjian 2013-1-23   考勤机信息插入数据库
        /// <summary>
        /// liguangjian 2013-1-23
        /// 考勤机信息插入数据库
        /// </summary>
        /// <param name="dt">考勤机数据</param>
        /// <returns>返回插入结果</returns>
        public bool QX_Insert(DataTable dt, string config_ID)
        {
            StringBuilder sql = new StringBuilder();
            sql.Append("declare   @KQ_ID  int,@count int ");
            //遍历dataTable的数据并拼接出入语句
            foreach (DataRow dr in dt.Rows)
            {
                sql.Append(string.Format(@"   set @KQ_ID=" + dr["KQ_ID"] + @"
                                       set @count=( select   count(*) from   KQ_Employee  where KQ_Employee.KQ_ID=@KQ_ID )
                                       if(@count<=0) 
                                       begin  insert into KQ_Employee values({0},'{1}','{2}',{3},'{4}',{5},'{6}','{7}',{8},{9},'') end ", new object[] { dr[0], "0", dr[2], dr[3], dr[4], dr[5], dr[6], dr[7], "0", config_ID }));
            }
            //调用插入方法
            return ExecuteSql(sql.ToString());
        }
        #endregion

        #region  liguangjian 2013-1-23    查询TCP/IP
        /// <summary>
        /// 查询TCP/IP
        /// </summary>
        /// <returns>返回查询结果</returns>
        public DataSet QueryQX_TCP_IP()
        {
            //查询sql
            string sql = "select KQ_Config.Reamk '部门名称',KQ_Config.Id,KQ_Config.TcpIpName  as '连接地址', KQ_Config.PoitName as '端口号',case when KQ_Config.IsDelete=0 then '正常' else '禁用' end as '状态' from  KQ_Config";
            //调用查询方法
            return ExecuteDataSet(sql, "KQ_Config");
        }
        #endregion

        #region  liguangjian 2013-1-23    修改TCP/IP
        /// <summary>
        /// 修改TCP/IP
        /// </summary>
        /// <param name="TCP">TCP/IP</param>
        /// <param name="id">修改id</param>
        /// <returns>返回修改结果</returns>
        public bool UpdateTCP_IP(string TCP, string id, string poit)
        {
            //sql
            string sql = @"declare @name varchar(100) declare @poitName varchar(100)
                            set @name='" + TCP + @"' set @poitName = '" + poit + @"'
                            declare @count int
                            set @count=(select COUNT(*) from  KQ_Config where KQ_Config.TcpIpName=@name)
                             if(@count<0)
                             begin
                              select GETDATE()
                             end
                             else
                             begin
                             update KQ_Config set KQ_Config.TcpIpName = @name,PoitName = @poitName where KQ_Config.Id = " + id + " end";
            return ExecuteSql(sql);
        }
        #endregion

        #region  liguangjian 2013-1-23
        /// <summary>
        /// 查询考勤机上员工考勤ID
        /// </summary>
        /// <param name="config_ID">考勤机编号</param>
        /// <returns></returns>
        public DataSet QueryUserIDList(string config_ID)
        {
            string sql = "select distinct KQ_Employee.KQ_ID from dbo.KQ_Employee where KQ_Employee.Config_ID = " + config_ID;
            //调用查询方法
            return ExecuteDataSet(sql, "KQ_Config");
        }

        /// <summary>
        /// 修改服务器考勤表信息
        /// </summary>
        /// <param name="userId">员工编号</param>
        /// <param name="name">员工姓名</param>
        /// <param name="kQ_ID">员工考勤编号</param>
        /// <returns></returns>
        public bool UpdateKQ_Employee(string userId, string name, string kQ_ID)
        {
            string sql = string.Format("update KQ_Employee set UserID = '{0}',Name='{1}',KQDepartmentName=(select Department.DepartmentName from Employee left join Department on Department.DepartmentNO = Employee.DepartmentNO where Employee.EmployeeNO2 ='{2}') where KQ_ID = {3}",
                                    new object[] { userId, name, userId, kQ_ID });
            return ExecuteSql(sql);
        }

        /// <summary>
        /// 删除服务器所有考勤信息
        /// </summary>
        /// <returns></returns>
        public bool DeleteQXService()
        {
            string sql = "delete KQ_AttendanceLogs delete KQ_Employee delete dbo.KQ_Remark";
            return ExecuteSql(sql);
        }
        #endregion

        #region liguangjian 2013-1-31
        //        public DataSet QueryDepartment1()
        //        {
        //            string sql = "select * from dbo.Department where Department.ParDepartmentNO='G01'";
        //            //调用查询方法
        //            return ExecuteDataSet(sql, "ParDepartmentNO");
        //        }

        //        public DataSet QueryDepartment2(string DepartmentName)
        //        {
        //            string sql = "select Department.DepartmentName from dbo.Department where Department.ParDepartmentNO=(select Department.DepartmentNO from dbo.Department where Department.DepartmentName='" + DepartmentName + "')";
        //            //调用查询方法
        //            return ExecuteDataSet(sql, "DepartmentName");
        //        }

        //        public DataSet QueryStaff(string DepartmentName1, string DepartmentName2, string DepartmentName3)
        //        {
        //            string sql = string.Format(@"select e.EmployeeName from Employee e left join Department d on e.DepartmentNO = d.DepartmentNO 
        //                            where d.DepartmentName = '{0}' or d.DepartmentName = '{1}' or d.DepartmentName = '{2}'",new object[]{DepartmentName1,DepartmentName2,DepartmentName3});
        //            //调用查询方法
        //            return ExecuteDataSet(sql, "EmployeeName");
        //        }

        //        public DataSet QueryKQ_Info()
        //        {
        //            return null;
        //        }


        /// <summary>
        /// 查询部门员工
        /// </summary>
        /// <param name="DepartmentName">部门名称</param>
        /// <returns>员工信息</returns>
        public DataSet QueryStaff(string DepartmentName)
        {
            string sSql = "select  EmployeeNO '员工编号',EmployeeName '员工姓名' from dbo.v_SearchEmployee where 1=1 and IsDelete=0 and DepartmentName='" + DepartmentName + "' order by EmployeeName";
            return ExecuteDataSet(sSql, "SearchEmployee");
        }

        /// <summary>
        /// 查询考勤信息
        /// </summary>
        /// <param name="time1">时间1</param>
        /// <param name="time2">时间2</param>
        /// <param name="uId">员工编号</param>
        /// <returns>考勤信息</returns>
        public DataSet QueryKQ_Info(string time1, string time2, string uId)
        {
            string sql = string.Format(@"select KQ_Employee.Name, MIN(KQ_AttendanceLogs.Date),MAX(KQ_AttendanceLogs.Date) from KQ_Employee 
                         inner join KQ_AttendanceLogs on KQ_Employee.KQ_ID = KQ_AttendanceLogs.EnrollNumber  
                         where KQ_AttendanceLogs.Date>='{0}' and KQ_AttendanceLogs.Date<'{1}' and KQ_Employee.UserID = '{2}'
                          group by KQ_Employee.Name,KQ_Employee.UserID", new object[] { time1, time2, uId });
            return ExecuteDataSet(sql, "KQ_Employee.Name");
        }
        #endregion

        #region liguangjian 2013-2-3
        /// <summary>
        /// 查询班次信息
        /// </summary>
        /// <returns></returns>
        public DataSet KQ_QueryClasse()
        {
            string sql = @"select KQ_Classe.Id '班次编号',KQ_Classe.ClasseName '班次名称',KQ_Classe.ClasseUpTime '上班时间'
                         ,KQ_Classe.ClasseDownTime '下班时间',(CASE 
	                    when IsDelete = 0 then '有效' 
	                    when IsDelete = 1 then '无效'
	                    end) '是否有效' from KQ_Classe";
            return ExecuteDataSet(sql, "KQ_Employee.KQ_Classe");
        }

        /// <summary>
        /// 添加班次
        /// </summary>
        /// <param name="classeName">班次名称</param>
        /// <param name="upTime">上班时间</param>
        /// <param name="downTime">下班时间</param>
        /// <returns></returns>
        public bool KQ_InsertClasse(string classeName, string upTime, string downTime)
        {
            string sql = "insert into KQ_Classe values('" + classeName + "','" + upTime + "','" + downTime + "',default)";
            return ExecuteSql(sql);
        }

        /// <summary>
        /// 修改班次
        /// </summary>
        /// <param name="classeId">班次编号</param>
        /// <param name="classeName">班次名称</param>
        /// <param name="upTime">上班时间</param>
        /// <param name="downTime">下班时间</param>
        /// <param name="isDelete">是否有效</param>
        /// <returns></returns>
        public bool KQ_UpdateClasse(string classeId, string classeName, string upTime, string downTime, string isDelete)
        {
            string sql = string.Format("update KQ_Classe set ClasseName ='{0}', ClasseUpTime='{1}', ClasseDownTime='{2}', IsDelete={3} where Id = {4}", new object[] { classeName, upTime, downTime, isDelete, classeId });
            return ExecuteSql(sql);
        }

        /// <summary>
        /// 排班
        /// </summary>
        /// <param name="sql"></param>
        /// <returns></returns>
        public bool KQ_IsertClasse(StringBuilder sql)
        {
            return ExecuteSql(sql.ToString());
        }

        /// <summary>
        /// 查询排班信息
        /// </summary>
        /// <param name="KQDepartmentName">部门名称</param>
        /// <returns></returns>
        public DataSet KQ_QueryInsertClasse(string KQDepartmentName)
        {
            string sql = @"select distinct KQ_Employee.UserID '员工编号',KQ_Employee.KQDepartmentName '部门',KQ_Employee.Name '员工名称' ,KQ_InsertClasse.InsertClasseValues '日期' ,KQ_InsertClasse.StateType '是否上班',
                            case when KQ_InsertClasse.StateType='休息' then '休息' else KQ_Classe.ClasseName end as '班次',
                            case when KQ_InsertClasse.StateType='休息' then '休息' else KQ_Classe.ClasseUpTime end as '上班时间',
                            case when KQ_InsertClasse.StateType='休息' then '休息' else KQ_Classe.ClasseDownTime end as '下班时间'  
                            from KQ_InsertClasse 
                            inner join KQ_Employee on KQ_Employee.UserID=KQ_InsertClasse.UserID
                            inner join KQ_Classe on KQ_Classe.Id=KQ_InsertClasse.InsertClasseId where KQ_Employee.KQDepartmentName = '" + KQDepartmentName + "'";
            return ExecuteDataSet(sql, "KQ_Employee.KQ_Classe");
        }
        #endregion

        /// <summary>
        /// Caijinsong:2012-2-3 add
        /// </summary>
        /// <param name="p"></param>
        /// <param name="uId"></param>
        /// <returns></returns>
        [WebMethod]
        public DataSet GetKQRemark(string KQTime, string uId)
        {
            String sSql = @"select KQ_Remark.RemarkContent,KQ_Remark.RemarkDateTime,Employee.EmployeeName from KQ_Remark left outer join Employee on KQ_Remark.AddEmployeeNO=Employee.EmployeeNO2
                    where KQ_Remark.UserID='" + uId + "' and DATEDIFF(DD,KQDate,'" + KQTime + "')=0";
            DataSet ds = null;
            try
            {
                ds = ExecuteDataSet(sSql, "Remark");
            }
            catch (System.Exception ex)
            {
                _Msg = ex.Message;
            }
            return ds;
        }

        /// <summary>
        /// Caijinsong:2012-2-3 add
        /// </summary>
        /// <param name="p"></param>
        /// <param name="addRemarkTime"></param>
        /// <param name="p_3"></param>
        /// <param name="userID"></param>
        /// <param name="KQTime"></param>
        /// <returns></returns>
        [WebMethod]
        public bool SaveKQRemark(string remarkContent, DateTime addRemarkTime, string addEmployeeNO, string userID, DateTime KQTime)
        {
            String sSql = @"declare @count int=0;
                            select @count=COUNT(ID) from KQ_Remark where UserID='" + userID + "' and DATEDIFF(DD,KQDate,'" + KQTime + @"')=0
                            if @count<1
                            begin
	                            insert into KQ_Remark (UserID,KQDate,RemarkDateTime,AddEmployeeNO,RemarkContent) values ('" + userID + "','" + KQTime + "','" + addRemarkTime + "','" + addEmployeeNO + "','" + remarkContent + @"')
                            end
                            else
                            begin
	                            update KQ_Remark set RemarkDateTime='" + addRemarkTime + "' ,AddEmployeeNO='" + addEmployeeNO + "',RemarkContent='" + remarkContent + "' where DATEDIFF(DD,KQDate,'" + KQTime + "')=0 and UserID='" + userID + @"'
                            end";
            bool success = false;
            try
            {
                success = ExecuteSql(sSql);
            }
            catch (System.Exception ex)
            {
                _Msg = ex.Message;
            }
            return success;
        }

        public bool KQ_AddTCP_IP(string tcp_IP, string port, string reamk)
        {
            string sql = string.Format("insert into dbo.KQ_Config values('{0}','{1}','{2}',0)", new object[] { tcp_IP, port, reamk });
            return ExecuteSql(sql);
        }
        #endregion

        #region liguangjian 20130226 add
        /// <summary>
        /// 模糊查询员工考勤机编号
        /// </summary>
        /// <param name="like_id"></param>
        /// <returns></returns>
        public DataSet queryLikeKQ_Id(string like_id)
        {
            string sql = "select * from dbo.KQ_Employee where KQ_ID like '%" + like_id + "%'";
            return ExecuteDataSet(sql, "KQ_Employee");
        }

        /// <summary>
        /// 查询员工当天是否应该上班
        /// </summary>
        /// <param name="uid"></param>
        /// <param name="date"></param>
        /// <returns></returns>
        public DataSet queryIsClases(string uid, string date)
        {
            string sql = "select * from dbo.KQ_InsertClasse where userid = '" + uid + "' and InsertClasseValues=DATENAME(weekday,'" + date + "')";
            return ExecuteDataSet(sql, "KQ_InsertClasse");
        }
        #endregion

        #region Add by Caijinsong 2013-3-15
        /// <summary>
        /// 
        /// </summary>
        /// <param name="strNO2"></param>
        /// <returns></returns>
        public bool VerifyEmployeeNO2(string strNO2)
        {
            string sSql = "select count(EmployeeNO2) as count from Employee where EmployeeNO2='" + strNO2 + "'";
            try
            {
                DataSet ds = ExecuteDataSet(sSql, "verify");
                if (ds == null || ds.Tables.Count == 0)
                {
                    string strMsg = "访问数据库出错！";
                    if (!String.Empty.Equals(_Msg))
                    {
                        strMsg = _Msg;
                    }
                    throw new Exception(strMsg);
                }
                if (int.Parse(ds.Tables[0].Rows[0]["count"].ToString()) > 0)
                {
                    return true;
                }
                return false;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region add by 20130408 guo.ty
        public DataSet SelectCustomerQuestion(string sql)
        {
            DataSet ds = new DataSet();
            ds = ExecuteDataSet(sql, "CustomerQuestio");
            return ds;
        }

        public string SelectOnlyOne(string cloumName, string tablename, string where)
        {
            string s = null;
            string sql = "select " + cloumName + " from " + tablename + " where 1=1 " + where;
            DataSet ds = new DataSet();
            ds = ExecuteDataSet(sql, "OnlyOne");
            if (ds.Tables.Count > 0)
            {
                if (ds.Tables[0].Rows.Count == 0)//update by wujianbo 20130415
                {
                    return null;
                }
                s = ds.Tables[0].Rows[0][0].ToString();
            }
            return s;
        }

        public string SelectOnlyOne(string sql)
        {
            string s = null;
            DataSet ds = new DataSet();
            ds = ExecuteDataSet(sql, "OnlyOne");
            if (ds.Tables.Count > 0)
            {
                if (ds.Tables[0].Rows.Count == 0)//update by wujianbo 20130415
                {
                    return null;
                }
                s = ds.Tables[0].Rows[0][0].ToString();
            }
            return s;
        }

        public int InsertCustomerQuestion(CustomerProblem model)
        {
            string flagColorSql = "insert into FlagCustomer(CustomerNO,OrderNO,FlagID,CustomerService) values('" + model.CustomerNO + "','" + model.OrderNO + "'," + model.ProblemGrade + ",'" + model.CustomService + "')";
            string trackingSql = "insert into CustomerIssueTracking(CustomerNO,OrderNO,Process,Issue,Result,CustomerServerNO,CurrentLink)values('" + model.CustomerNO + "','" + model.OrderNO + "','" + model.ProblemLink + "','" + model.ProblemDescription + "','" + model.Result + "','" + model.CustomService + "'," + model.CurrentLink1 + ")";
            return SqlHelper.ExecuteNonQuery(Conn, CommandType.Text, flagColorSql + trackingSql);
        }

        public int ExecuteNonQueryCustomerQuestion(string sql)
        {
            using (SqlConnection conn = new SqlConnection(ConnString))
            {
                int i = 0;
                conn.Open();
                using (SqlTransaction tra = conn.BeginTransaction())
                {
                    try
                    {
                        i = SqlHelper.ExecuteNonQuery(tra, CommandType.Text, sql);
                        tra.Commit();
                    }
                    catch (Exception e)
                    {
                        tra.Rollback();
                    }
                    return i;
                }
            }

        }

        public int UpdateCustomerQuestion(CustomerProblem model)
        {
            string flagColorSql = "update FlagCustomer set FlagID = '" + model.ProblemGrade + "' where OrderNO = '" + model.OrderNO + "'";

            string trackingSql = "update CustomerIssueTracking set Process = '" + model.ProblemLink + "' , Issue = '" + model.ProblemDescription + "' , Result = '" + model.Result + "' where OrderNO = '" + model.OrderNO + "',CurrentLink= " + model.CurrentLink1;
            return SqlHelper.ExecuteNonQuery(Conn, CommandType.Text, flagColorSql + trackingSql);
        }

        public int InsertImage(string sql, params SqlParameter[] sps)
        {
            //创建数据库连接
            SqlConnection conn = new SqlConnection(ConnString);
            //打开数据库
            conn.Open();
            //创建命令对象
            SqlCommand cmd = new SqlCommand(sql, conn);
            //添加参数
            cmd.Parameters.AddRange(sps);
            //执行增删改
            int i = cmd.ExecuteNonQuery();
            //关闭数据库
            conn.Close();
            return i;
        }

        #endregion



        /// <summary>
        /// 门市收入与成本明细
        /// </summary>
        /// <param name="where"></param>
        /// <returns></returns>
        public DataSet SelectIncomeAndCost(string where)
        {
            DataSet ds = new DataSet();
            /*string sql = @"select oc.OrderNO '订单号',oc.OrderDate as '订单时间',oc.SuiteName as '套系名称',oc.SuiteTypeName '套系类型',oc.OrderSuitePrice '套系金额',oc.ClothesCount as '礼服套数',oc.成本线,ops.PayableSuite '一销金额',ops.PayableChoose '二销金额',ops.PayableClothes '礼服金额',(ops.PayableOther + ops.PayableGetGoods + ops.PayableShoot) '其他金额',oc.一销付款,
                            oc.二销付款,oc.礼服付款,oc.其他付款,cf.ConfigValue as '信息来源',c.CustomerName1 as '先生姓名',c.CustomerName2 as '小姐姓名',oc.Process as '订单状态',
                            (c.N_Address_1 + c.N_Address_2 + c.N_Address_3+c.address1) as '先生住址',(c.V_Address_1 + c.V_Address_2 + c.V_Address_3) as '女士住址',
                            case c.IsLetterAddress when 0 then (c.N_Address_1 + c.N_Address_2 + c.N_Address_3) else (c.V_Address_1 + c.V_Address_2 + c.V_Address_3+c.address2) end as '邮址',
                            dbo.Fn_GetDepartmentName(oc.orderDepartmentNo) as '接单门店',dbo.Fn_GetEmployeeName(oc.OrderEmployeeNO) as '接单人员',oc.shootSites as '拍摄类型',
                            dbo.Fn_GetEmployeeName(oc.ShootEmployeeNON) as '内景摄影师',dbo.Fn_GetEmployeeName(oc.LightEmployeeNON) '内景灯光师',dbo.Fn_GetEmployeeName(oc.DressEmployeeNON) '内景化妆师',
                            dbo.Fn_GetEmployeeName(oc.DressAssistantEmployeeNON) '内景化妆师助理',dbo.Fn_GetDepartmentName(oc.ShootAddressN) as '内景地点',dbo.Fn_GetEmployeeName(oc.ShootEmployeeNOW) as '外景摄影师',
                            oc.LightEmployeeNOW '外景灯光师',dbo.Fn_GetEmployeeName(oc.DressEmployeeNOW) '外景化妆师',dbo.Fn_GetEmployeeName(oc.DressAssistantEmployeeNOW) '外景化妆师助理',
                            dbo.Fn_GetDepartmentName(oc.ShootAddressW) as '外景地点',dbo.Fn_GetEmployeeName(oc.ChooseEmployeeNO) as '看样师',dbo.Fn_GetEmployeeName(oc.ClothesEmployeeNO) as '礼服师',oc.SampleDate '样修时间',dbo.Fn_GetEmployeeName(oc.SampleEmployeeNO) as '设计人员',case when oc.designDate is null then '1900-01-01' else oc.designDate end as '设计完成时间',dbo.Fn_GetEmployeeName(oc.XsEmployeeNO) as '校色人员',case when oc.XsDate is null then '1900-01-01' else oc.XsDate end as '校色完成时间'
                            from OrdersPayState ops right join 
                            (
	                            SELECT o.OrderNO,o.OrderDate,s.SuiteName,st.SuiteTypeName,o.OrderSuitePrice,o.CustomerNO,o.Process,o.orderDepartmentNo,o.OrderEmployeeNO,
	                            v.ShootEmployeeNON,v.LightEmployeeNON,v.DressAssistantEmployeeNON,v.ShootEmployeeNOW,v.LightEmployeeNOW,v.DressAssistantEmployeeNOW,v.DressEmployeeNON,v.DressEmployeeNOW,
	                            o.ChooseEmployeeNO,v.ShootAddressN,v.ShootAddressW,shootSites,lifu.ClothesCount,o.ClothesEmployeeNO,o.SampleDate,o.SampleEmployeeNO,o.designDate,o.XsDate,o.XsEmployeeNO,
	                            case when SUM(case cf.CashPretextTypeNO when 'CashType_01' then cd.CashNumber end ) is null then 0 else SUM(case cf.CashPretextTypeNO when 'CashType_01' then cd.CashNumber end ) end as '一销付款',
	                            case when SUM(case cf.CashPretextTypeNO when 'CashType_04' then Case cf.CashPretextName when '送件费' then 0 else cd.CashNumber end end ) is null then 0 else SUM(case cf.CashPretextTypeNO when 'CashType_04' then cd.CashNumber end ) end as '二销付款',
	                            case when SUM(case cf.CashPretextTypeNO when 'CashType_03' then cd.CashNumber end ) is null then 0 else SUM(case cf.CashPretextTypeNO when 'CashType_03' then cd.CashNumber end ) end as '礼服付款',
	                            case when SUM(case cf.CashPretextTypeNO when 'CashType_06' then cd.CashNumber end ) is null then 0 else SUM(case cf.CashPretextTypeNO when 'CashType_06' then cd.CashNumber end ) end as '其他付款',
	                            case when o.OrderSuitePrice > 0 then (
	                            ltrim(Convert(numeric(9,2),(opp.BackCostPrice*100/o.OrderSuitePrice))) + '%') when o.OrderSuitePrice = 0 then '0%' end as '成本线'
	                            FROM 
	                            Orders o left join View_ShootNew v on o.OrderNO=v.OrderNO
	                            left join Suite s on o.SuiteNO = s.SuiteNO 
	                            left join suiteType st on o.SuiteTypeNO = st.SuiteTypeNO 
	                            left join Cash c on o.OrderNO = c.OrderNO 
	                            left join CashDetail cd on cd.CashNO like(o.OrderNO + '%') 
	                            left join CashSub cs on cd.CashNO = cs.CashNO 
	                            left join CashPretext cf on cd.CashPretext = cf.CashPretextNO 
	                            left join (select SUM(op.BackCostPrice) BackCostPrice,op.OrderNO from  PreProducts p,OrderProducts op where op.ProductNO = p.ProductNO and op.OrderNO = p.OrderNO group by op.orderNo) as opp on opp.OrderNO = o.OrderNO 
	                            left join (select count(pt.ProductTypeName)as ClothesCount,o.OrderNO  from orders o 
	                            left join OrderProducts op on o.OrderNO = op.OrderNO 
	                            left join Products p on op.ProductNO = p.ProductNO 
	                            left join ProductType pt on p.ProductTypeNO = pt.ProductTypeNO  where pt.ProductTypeName = '礼服' group by o.orderNo) as lifu on o.orderno = lifu.OrderNO
	                            where 1=1  and cf.CashPretextName <> '送件费' " + where + @" group by o.OrderNO,o.Process,o.orderDepartmentNo,o.OrderEmployeeNO,v.ShootEmployeeNON,o.ChooseEmployeeNO,v.ShootAddressN,v.ShootAddressW,
	                            o.CustomerNO,o.OrderSuitePrice,v.ShootEmployeeNOW,opp.BackCostPrice,v.LightEmployeeNON,v.LightEmployeeNOW,v.DressAssistantEmployeeNON,
	                            v.DressAssistantEmployeeNOW,v.DressEmployeeNON,v.DressEmployeeNOW,shootSites,o.OrderDate,st.SuiteTypeName,s.SuiteName,lifu.ClothesCount,
	                            o.ClothesEmployeeNO,o.designDate,o.SampleEmployeeNO,o.XsDate,o.XsEmployeeNO,o.SampleDate
                            ) as oc on ops.OrderNO = oc.OrderNO 
                            left join Customers c  on oc.CustomerNO = c.CustomerNO 
                            left join Config cf on cf.ConfigNO = c.ImformationSource";*/
            string sql = @"select oc.OrderNO '订单号',oc.OrderDate as '订单时间',oc.SuiteName as '套系名称',oc.SuiteTypeName '套系类型',oc.OrderSuitePrice '套系金额',oc.ClothesCount as '礼服套数',
oc.成本线,ops.PayableSuite '一销金额',ops.PayableChoose '二销金额',ops.PayableClothes '礼服金额',(ops.PayableOther + ops.PayableGetGoods + ops.PayableShoot) '其他金额',oc.一销付款,
oc.二销付款,oc.礼服付款,oc.其他付款,cf.ConfigValue as '信息来源',c.CustomerName1 as '先生姓名',c.CustomerName2 as '小姐姓名',oc.Process as '订单状态',
(c.N_Address_1 + c.N_Address_2 + c.N_Address_3+c.address1) as '先生住址',(c.V_Address_1 + c.V_Address_2 + c.V_Address_3) as '女士住址',
case c.IsLetterAddress when 0 then (c.N_Address_1 + c.N_Address_2 + c.N_Address_3) else (c.V_Address_1 + c.V_Address_2 + c.V_Address_3+c.address2) end as '邮址',
dbo.Fn_GetDepartmentName(oc.orderDepartmentNo) as '接单门店',dbo.Fn_GetEmployeeName(oc.OrderEmployeeNO) as '接单人员',oc.shootSites as '拍摄类型',
dbo.Fn_GetEmployeeName(oc.ShootEmployeeNON) as '内景摄影师',dbo.Fn_GetEmployeeName(oc.LightEmployeeNON) '内景灯光师',dbo.Fn_GetEmployeeName(oc.DressEmployeeNON) '内景化妆师',
dbo.Fn_GetEmployeeName(oc.DressAssistantEmployeeNON) '内景化妆师助理',dbo.Fn_GetDepartmentName(oc.ShootAddressN) as '内景地点',dbo.Fn_GetEmployeeName(oc.ShootEmployeeNOW) as '外景摄影师',
oc.LightEmployeeNOW '外景灯光师',dbo.Fn_GetEmployeeName(oc.DressEmployeeNOW) '外景化妆师',dbo.Fn_GetEmployeeName(oc.DressAssistantEmployeeNOW) '外景化妆师助理',
dbo.Fn_GetDepartmentName(oc.ShootAddressW) as '外景地点',dbo.Fn_GetEmployeeName(oc.ChooseEmployeeNO) as '看样师',dbo.Fn_GetEmployeeName(oc.ClothesEmployeeNO) as '礼服师',
oc.SampleDate '样修时间',dbo.Fn_GetEmployeeName(oc.SampleEmployeeNO) as '设计人员',case when oc.designDate is null then '1900-01-01' else oc.designDate end as '设计完成时间',
dbo.Fn_GetEmployeeName(oc.XsEmployeeNO) as '校色人员',case when oc.XsDate is null then '1900-01-01' else oc.XsDate end as '校色完成时间',oc.[5.1前],oc.[5.1及后]
from OrdersPayState ops right join 
(
	SELECT o.OrderNO,o.OrderDate,s.SuiteName,st.SuiteTypeName,o.OrderSuitePrice,o.CustomerNO,o.Process,o.orderDepartmentNo,o.OrderEmployeeNO,
	v.ShootEmployeeNON,v.LightEmployeeNON,v.DressAssistantEmployeeNON,v.ShootEmployeeNOW,v.LightEmployeeNOW,v.DressAssistantEmployeeNOW,v.DressEmployeeNON,v.DressEmployeeNOW,
	o.ChooseEmployeeNO,v.ShootAddressN,v.ShootAddressW,shootSites,
	(select count(1) from OrderProducts op left join Products p on op.ProductNO = p.ProductNO where p.ProductTypeNO = 'LF' and op.OrderNO=o.OrderNO group by op.orderNo) ClothesCount,
	o.ClothesEmployeeNO,o.SampleDate,o.SampleEmployeeNO,o.designDate,o.XsDate,o.XsEmployeeNO,
	ISNULL(SUM(case cf.CashPretextTypeNO when 'CashType_01' then cd.CashNumber end),0) 一销付款,
	ISNULL(SUM(case cf.CashPretextTypeNO when 'CashType_04' then cd.CashNumber end),0) 二销付款,
	ISNULL(SUM(case cf.CashPretextTypeNO when 'CashType_03' then cd.CashNumber end),0) 礼服付款,
	ISNULL(SUM(case cf.CashPretextTypeNO when 'CashType_06' then cd.CashNumber end),0) 其他付款,

	sum(case when cf.CashPretextTypeNO='CashType_01' and datediff(dd,cs.CashDate,'2016-5-1')>0 then cd.CashNumber else 0 end) [5.1前],
	sum(case when cf.CashPretextTypeNO='CashType_01' and datediff(dd,cs.CashDate,'2016-5-1')<=0 then cd.CashNumber else 0 end) [5.1及后],

	case when o.OrderSuitePrice > 0 then (ltrim(Convert(numeric(9,2),(opp.BackCostPrice*100/o.OrderSuitePrice))) + '%') else '0%' end as '成本线'
	FROM 
	Orders o left join View_ShootNew v on o.OrderNO=v.OrderNO
	left join Cash c on o.OrderNO = c.OrderNO 
	left join CashSub cs on cs.OrderNO=o.OrderNO
	left join CashDetail cd on cd.CashNO = cs.CashNO 
	left join CashPretext cf on cd.CashPretext = cf.CashPretextNO 
	left join (select SUM(op.BackCostPrice) BackCostPrice,op.OrderNO from  PreProducts p,OrderProducts op where op.ProductNO = p.ProductNO and op.OrderNO = p.OrderNO group by op.orderNo) as opp on opp.OrderNO = o.OrderNO 
	left join Suite s on o.SuiteNO = s.SuiteNO 
	left join suiteType st on o.SuiteTypeNO = st.SuiteTypeNO 
	where 1=1  and cf.CashPretextName <> '送件费' " + where + @" 
	group by o.OrderNO,o.Process,o.orderDepartmentNo,o.OrderEmployeeNO,v.ShootEmployeeNON,o.ChooseEmployeeNO,v.ShootAddressN,v.ShootAddressW,
	o.CustomerNO,o.OrderSuitePrice,v.ShootEmployeeNOW,opp.BackCostPrice,v.LightEmployeeNON,v.LightEmployeeNOW,v.DressAssistantEmployeeNON,
	v.DressAssistantEmployeeNOW,v.DressEmployeeNON,v.DressEmployeeNOW,shootSites,o.OrderDate,st.SuiteTypeName,s.SuiteName,
	o.ClothesEmployeeNO,o.designDate,o.SampleEmployeeNO,o.XsDate,o.XsEmployeeNO,o.SampleDate
) as oc on ops.OrderNO = oc.OrderNO 
left join Customers c  on oc.CustomerNO = c.CustomerNO 
left join Config cf on cf.ConfigNO = c.ImformationSource";
            ds = ExecuteDataSet(sql, "IncomeAndCost");
            return ds;
        }

        /// <summary>
        /// 获取设计师一销二销业绩
        /// </summary>
        /// <param name="sql">查询条件</param>
        /// <param name="flag">校色/设计</param>
        /// <returns></returns>
        public DataSet GetDesignSalesCount(string sql, string flag)
        {
            string sSql = "";
            if (flag == "设计")
            {
                sSql = "select distinct o.OrderNO as 订单编号,o.CustomerName1 as 顾客姓名1,o.CustomerName2 as 顾客姓名2,o.SuiteName as 套系名称," +
                        "o.ShootAddressN as 摄影场馆," +
                        "case when d.AllDesignDate is not null then dbo.Fn_GetEmployeeName(d.AllDesignEmployeeNO) else dbo.Fn_GetEmployeeName(d.HCEmployeeNO) end as 设计师," +
                        "case when d.AllDesignDate is not null then d.AllDesignDate else d.HCDate end as 设计时间," +
                        "p.PayableSuite as 订单金额,(select isnull(Sum(CashNumber),0) from VIEW_Cash where CashPretextTypeName='套系收银' and OrderNO=o.OrderNO) as 订单实付," +
                        "p.PayableChoose as 加选金额,(select isnull(Sum(CashNumber),0) from VIEW_Cash where BusinessDepartment='G0103010103'/*看样组*/ and CashPretextNO not in ('SKSY_DBF','SKSY_7SJF')/*SKSY_DBF打包费;SKSY_7SJF送件费*/ and OrderNO=o.OrderNO) as 加选实付 " +
                        "from VIEW_Orders o inner join DesignProcess d on o.OrderNO=d.OrderNO left join OrdersPayState p on o.OrderNO=p.OrderNO " +
                        "where 1=1 " + sql;
            }
            else if (flag == "校色")
            {
                sSql = "select distinct o.OrderNO as 订单编号,o.CustomerName1 as 顾客姓名1,o.CustomerName2 as 顾客姓名2,o.SuiteName as 套系名称," +
                        "o.ShootAddressN as 摄影场馆," +
                        "dbo.Fn_GetEmployeeName(d.XSEmployeeNO) as 设计师," +
                        "d.XSDate as 设计时间," +
                        "p.PayableSuite as 订单金额,(select isnull(Sum(CashNumber),0) from VIEW_Cash where CashPretextTypeName='套系收银' and OrderNO=o.OrderNO) as 订单实付," +
                        "p.PayableChoose as 加选金额,(select isnull(Sum(CashNumber),0) from VIEW_Cash where BusinessDepartment='G0103010103'/*看样组*/ and CashPretextNO not in ('SKSY_DBF','SKSY_7SJF')/*SKSY_DBF打包费;SKSY_7SJF送件费*/ and OrderNO=o.OrderNO) as 加选实付 " +
                        "from VIEW_Orders o inner join DesignProcess d on o.OrderNO=d.OrderNO left join OrdersPayState p on o.OrderNO=p.OrderNO " +
                        "where 1=1 " + sql;
            }
            return ExecuteDataSet(sSql, "DesignSalesCount");
        }

        public DataSet SelectDailySheet(string time, string shop)
        {
            DataSet ds = new DataSet();
            string sql = @"select o.OrderNO,o.OrderSuitePrice,st.SuiteTypeName,c.CashNumber,c.CashWay,c.CashPretextName,CashEmployeeName,c.FPH,c.dxfphm,c.CashState,c.CashPretextTypeName from Orders o left join SuiteType st on o.SuiteTypeNO = st.SuiteTypeNO left join VIEW_Cash c on o.OrderNO = c.OrderNO where DATEDIFF(DD,c.CashDate,'" + time + "') = 0 and c.CashDepartmentNO = '" + shop + "' order by c.CashDate";
            ds = ExecuteDataSet(sql, "DailySheet");
            return ds;
        }

        public double SelectDailySheet(string time1, string time2, string shop)
        {
            DataSet ds = new DataSet();
            string sql = @"select Sum(c.CashNumber) '当月累计' from Orders o left join SuiteType st on o.SuiteTypeNO = st.SuiteTypeNO left join VIEW_Cash c on o.OrderNO = c.OrderNO where (c.CashDate <= '" + time1 + " 23:59:59' and c.CashDate >= '" + time2 + "-1 00:00:00') and c.CashDepartmentNO = '" + shop + "'";
            ds = ExecuteDataSet(sql, "DailySheet");
            if (ds.Tables[0].Rows.Count > 0)
            {
                return Convert.ToInt64(ds.Tables[0].Rows[0][0].ToString());
            }
            return 0;
        }


        public DataSet SerachShootSalesAmount(string sql)
        {
            string sSql = @"select sps.OrderNO, sps.CustomerNO, sps.FPH, sps.CustomerName1, sps.CustomerName2, sps.MobilePhone1, sps.MobilePhone2, sps.PreShootDateN, sps.ShootDateN, sps.ShootAddressNNO, sps.ShootAddressN, sps.ShootEmployeeN, sps.DressEmployeeN, sps.ShootMemoryN, sps.PreShootDateW, sps.ShootDateW, sps.ShootEmployeeNOW, sps.ShootAddressW, sps.ShootEmployeeW, sps.DressEmployeeW, sps.ShootAddressWNO, sps.ShootMemoryW, sps.SuiteName, sps.SuitePrice, sps.LF, sps.OrderEmployee, sps.orderDepartmentNo, sps.OrderDepartmentName, sps.MarryDate, sps.Process,sps.OrderMemory,case when (SUM(case cd.CashPretext when '001' then cd.CashNumber when '002' then cd.CashNumber when '003' then cd.CashNumber end)) is null then 0 else (SUM(case cd.CashPretext when '001' then cd.CashNumber when '002' then cd.CashNumber when '003' then cd.CashNumber end)) end as 'one'
,
case when (SUM(case cd.CashPretext when 'SKSY_3JF' then cd.CashNumber when 'SKSY_4KYYF' then cd.CashNumber when 'SKSY_5KYJZ' then cd.CashNumber end)) is null then 0 else (SUM(case cd.CashPretext when 'SKSY_3JF' then cd.CashNumber when 'SKSY_4KYYF' then cd.CashNumber when 'SKSY_5KYJZ' then cd.CashNumber end))end as 'two'
 from 
(
select CustomerNO, OrderNO, FPH, CustomerName1, CustomerName2, MobilePhone1, MobilePhone2, PreShootDateN, ShootDateN, ShootAddressNNO, ShootAddressN, ShootEmployeeN, DressEmployeeN, ShootMemoryN, PreShootDateW, ShootDateW, ShootEmployeeNOW, ShootAddressW, ShootEmployeeW, DressEmployeeW, ShootAddressWNO, ShootMemoryW, SuiteName, SuitePrice, LF, OrderEmployee, orderDepartmentNo, OrderDepartmentName, MarryDate, Process,OrderMemory,CheckN=isnull(CheckN,0) from VIEW_SearchPreShoot where 1=1 " + sql + @") as sps left join CashSub cb on sps.OrderNO = cb.OrderNO left join CashDetail cd on cd.CashNO = cb.CashNO   group by sps.OrderNO, sps.CustomerNO, sps.FPH, sps.CustomerName1, sps.CustomerName2, sps.MobilePhone1, sps.MobilePhone2, sps.PreShootDateN, sps.ShootDateN, sps.ShootAddressNNO, sps.ShootAddressN, sps.ShootEmployeeN, sps.DressEmployeeN, sps.ShootMemoryN, sps.PreShootDateW, sps.ShootDateW, sps.ShootEmployeeNOW, sps.ShootAddressW, sps.ShootEmployeeW, sps.DressEmployeeW, sps.ShootAddressWNO, sps.ShootMemoryW, sps.SuiteName, sps.SuitePrice, sps.LF, sps.OrderEmployee, sps.orderDepartmentNo, sps.OrderDepartmentName, sps.MarryDate, sps.Process,sps.OrderMemory order by sps.OrderNO";
            return ExecuteDataSet(sSql, "SearchPreChoose");
        }

        /// <summary>
        /// 样修完成 Add by Caijinsong 2013-10-28
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <param name="sDepartmentNO"></param>
        /// <param name="sEmployeeNO"></param>
        /// <param name="sampleTime"></param>
        /// <returns></returns>
        public bool UpdateOrdersSample(string sOrderNO, string sDepartmentNO, string sDepartmentName, string sEmployeeNO, string sEmployeeName, DateTime sampleTime)
        {
            bool isSuccess = false;
            string strSql = @"update Orders set SampleAddress='" + sDepartmentNO + @"',SampleEmployeeNO='" + sEmployeeNO + @"',SampleDate='" + sampleTime.ToString("yyyy-MM-dd HH:mm:ss") + @"' where OrderNO='" + sOrderNO + "'";
            strSql += "if exists(select 1 from OrdersSub where OrderNO='" + sOrderNO + "') ";
            strSql += "Update OrdersSub set SampleAddressName='" + sDepartmentName + "', SampleEmployeeName='" + sEmployeeName + "' where OrderNO='" + sOrderNO + "' ";
            strSql += "else ";
            strSql += "insert into OrdersSub (OrderNO, SampleAddressName, SampleEmployeeName) values ('" + sOrderNO + "','" + sDepartmentName + "','" + sEmployeeName + "')";
            try
            {
                isSuccess = ExecuteSql(strSql);
            }
            catch
            {
                isSuccess = false;
            }
            return isSuccess;
        }

        /// <summary>
        /// 获取流程百分比
        /// </summary>
        /// <returns></returns>
        public DataSet GetOrderProcess()
        {
            string strSql = @"select ConfigNO as ProcessID,ConfigValue as ProcessText,PersentValue from Config left outer join ProcessPersent on Config.ConfigNO=ProcessPersent.ProcessID
where ConfigType='流程' order by CONVERT(float,substring(ConfigNO,3,len(ConfigNO)))";
            return ExecuteDataSet(strSql, "ProcessPersent");
        }

        /// <summary>
        /// 添加或更新 流程百分比
        /// </summary>
        /// <param name="dicData"></param>
        /// <param name="sEmployeeNO"></param>
        /// <param name="updateTime"></param>
        /// <returns></returns>
        public bool UpdateOrderProcess(Dictionary<string, string> dicData, string sEmployeeNO, DateTime updateTime)
        {
            string strSql = String.Empty;
            foreach (KeyValuePair<string, string> kvp in dicData)
            {
                strSql += @"if exists (select 1 from ProcessPersent where ProcessID='" + kvp.Key + @"')
begin
update ProcessPersent set PersentValue='" + kvp.Value + @"',UpdateEmployee='" + sEmployeeNO + @"',UpdateTime='" + updateTime.ToString("yyyy-MM-dd HH:mm:ss") + @"' where ProcessID='" + kvp.Key + @"'
end
else
begin
insert into ProcessPersent (ProcessID,PersentValue,UpdateEmployee,UpdateTime) values ('" + kvp.Key + "','" + kvp.Value + "','" + sEmployeeNO + "','" + updateTime.ToString("yyyy-MM-dd HH:mm:ss") + @"')
end
";
            }
            return ExecuteSql(strSql);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sOrderDepartmentNO"></param>
        /// <param name="time"></param>
        /// <returns></returns>
        public DataSet GetOrderProcessDetail(string sOrderDepartmentNO, DateTime time)
        {
            using (SqlConnection connection = new SqlConnection(ConnString))
            {
                using (SqlCommand command = connection.CreateCommand())
                {
                    command.CommandText = "proc_processDetail";
                    command.CommandType = CommandType.StoredProcedure;
                    //command.Parameters.AddRange(new SqlParameter[]{ new SqlParameter("@TimeValue", time.ToString("yyyy-MM-dd")), new SqlParameter("@orderDepartmentNO", sOrderDepartmentNO) });
                    command.Parameters.AddRange(new SqlParameter[] { new SqlParameter("@TimeValue", time.ToString("yyyy-MM-dd")) });
                    DataSet ds = new DataSet();
                    SqlDataAdapter adapter = new SqlDataAdapter(command);
                    adapter.Fill(ds);
                    return ds;
                }
            }
        }

        /// <summary>
        /// 下件查询
        /// </summary>
        /// <param name="sCompleteNO">下件员工编号</param>
        /// <param name="dateTime">时间</param>
        /// <param name="strOthers">其它条件</param>
        /// <returns></returns>
        public DataSet SearchChooseComplete(string sCompleteNO, DateTime dateTime, string strOthers)
        {
            string strComplete = "";
            string strDate = "";
            if (sCompleteNO != "0")
            {
                strComplete = @"e.EmployeeNO='" + sCompleteNO + "' and ";
            }
            if (dateTime.Year != 1)
            {
                strDate = @" and DATEDIFF(DD,ol.CreateDate,'" + dateTime.ToString("yyyy-MM-dd") + @"')=0 ";
            }
            string strSql = @"with CompleteProcess as
(
    select ol.OrderNO,ol.Process,ol.[Create],ol.CreateDate,od.State from OrderLogo ol left join OrderDesign od on od.OrderNO = ol.OrderNO  where ol.Process = 'P_56'" + strDate + @" 
	group by ol.OrderNO,ol.Process,ol.[Create],ol.CreateDate,od.State
)
select v.OrderNO,v.CustomerName1,v.CustomerName2,v.ChooseAddress,v.ChooseEmployee,v.ChooseDate,e.EmployeeName,c.CreateDate,c.State
from VIEW_Orders v join CompleteProcess c on v.OrderNO=c.OrderNO
left outer join Employee e on c.[Create]=e.EmployeeNO
where " + strComplete + @" (v.OrderNO like '" + strOthers + @"' or v.CustomerName1 like '%" + strOthers + @"%' or v.CustomerName2 like '%" + strOthers + @"%' or v.MobilePhone1 like '%" + strOthers + @"%' or v.MobilePhone2 like '%" + strOthers + @"%')";
            return ExecuteDataSet(strSql, "CompleteChoose");
        }

        public bool OrderProcessComplete(string sOrderNO, string sProcess)
        {
            string strSql = @"select 1 from OrderLogo where OrderNO='" + sOrderNO + @"' and Process='" + sProcess + @"'";
            DataSet ds = ExecuteDataSet(strSql, "table");
            if (ds != null && ds.Tables.Count != 0 && ds.Tables[0].Rows.Count != 0)
            {
                return true;
            }
            else
            {
                return false;
            }
        }


        #region
        public DataSet getCashPretextType(string str)
        {
            string sql = "select CashPretextTypeNO as 类别编号,CashPretextTypeName  as 类别名称 from CashPretextType where 1=1" + str;
            return ExecuteDataSet(sql, "CashPretextType");
        }
        public bool addCashPretextType(string CashPretextTypeNO, string CashPretextTypeName)
        {
            string sql = "insert into CashPretextType(CashPretextTypeNO,CashPretextTypeName) values ('" + CashPretextTypeNO + "','" + CashPretextTypeName + "')";
            return ExecuteSql(sql);
        }
        public bool updateCashPretextType(string CashPretextTypeNO, string CashPretextTypeName)
        {
            string sql = "update CashPretextType set CashPretextTypeName='" + CashPretextTypeName + "' where CashPretextTypeNO='" + CashPretextTypeNO + "'";
            return ExecuteSql(sql);
        }

        /// <summary>
        /// 判断收款事由是否存在
        /// </summary>
        public string IfCashPretext(string CashPretextName)
        {
            string sql = "select CashPretextName from CashPretext where CashPretextName = '" + CashPretextName + "'";
            return SelectOnlyOne(sql);
        }

        public DataSet getCashPretext(string str)
        {
            string sql = "select CashPretext.CashPretextTypeNO as 类别编号,CashPretextTypeName as 类别名称,CashPretextNO as 收款事由编号,CashPretextName as 收款事由名称,Creater as 创建人,CreateDate as 创建时间 from CashPretext left join CashPretextType on CashPretextType.CashPretextTypeNO=CashPretext.CashPretextTypeNO where 1=1 and CashPretextName not like '%停用%' and CashPretext.IsDelete = 0 " + str;
            return ExecuteDataSet(sql, "CashPretext");
        }
        public bool insertCashPretext(string CashPretextTypeNO, string CashPretextNO, string CashPretextName, string Creater)
        {
            string sql = "insert into CashPretext(CashPretextTypeNO,CashPretextNO,CashPretextName,Creater,CreateDate,IsDelete) values ('" + CashPretextTypeNO + "','" + CashPretextNO + "','" + CashPretextName + "','" + Creater + "',GETDATE(),0)";
            return ExecuteSql(sql);
        }
        public bool updateCashPretext(string CashPretextTypeNO, string CashPretextNO, string CashPretextName)
        {
            string sql = "update CashPretext set CashPretextTypeNO='" + CashPretextTypeNO + "',CashPretextName='" + CashPretextName + "' where CashPretextNO='" + CashPretextNO + "'";
            return ExecuteSql(sql);
        }
        public bool deleteCashPretext(string CashPretextNO)
        {
            string sql = "update CashPretext SET [IsDelete] = 1 where CashPretextNO='" + CashPretextNO + "'";
            return ExecuteSql(sql);
        }

        public bool UpdateOrderCashPretext(string cashpretextNo, string cashNO)
        {
            string sql = "update CashDetail set CashPretext = '" + cashpretextNo + "' where CashNO = '" + cashNO + "'";
            return ExecuteSql(sql);
        }
        #endregion

        /// <summary>
        /// 生产打包取件时间
        /// </summary>
        /// <param name="orderno"></param>
        /// <returns></returns>
        public string DesignPreGodsDate(string orderno)
        {
            string sql = "select top 1 PreGetGoodsDate from dbo.VIEW_SearchPreGetGoods where OrderNO = '" + orderno + "' group by PreGetGoodsDate order by PreGetGoodsDate desc";
            object date = SqlHelper.ExecuteScalar(SqlHelper.GMS_ConStr, CommandType.Text, sql);
            return date != DBNull.Value ? date.ToString() : "1900/1/1";
        }

        /// <summary>
        /// 获取服务器时间
        /// </summary>
        /// <returns></returns>
        public string GetServerDateTime()
        {
            string sSql = "select getdate()";
            return ExecuteSqlToString(sSql);
        }

        #region 订单的更多信息
        /// <summary>
        /// 添加父类别
        /// </summary>
        /// <param name="iPID">父ID，为0则添加父节点，否则添加子节点</param>
        /// <param name="strItem">项</param>
        /// <param name="strDateTime">时间</param>
        /// <param name="strEmployeeName">人员</param>
        /// <returns>添加父级时，0为成功，-1为失败；添加子级时，返回子级的ID，-1为失败</returns>
        public bool AddMoreInfoItem(int iPID, string strItem, string strDateTime, string strEmployeeName)
        {
            string strSql = "";
            if (iPID == 0)//为0则表示添加父项
            {
                strSql = "INSERT INTO MoreInfo ([Item],CreateDate,CreateEmployee) values ('" + strItem + "','" + strDateTime + "','" + strEmployeeName + "')";
                return ExecuteSql(strSql);
            }
            else
            {
                strSql = "INSERT INTO MoreInfo (PID,[Item],CreateDate,CreateEmployee) values (" + iPID + ",'" + strItem + "','" + strDateTime + "','" + strEmployeeName + "')";
                return ExecuteSql(strSql);
                //strSql += "select MAX(ID) from MoreInfo ";
                //DataSet ds = ExecuteDataSet(strSql,"MoreInfoID");
                //try
                //{
                //    return Convert.ToInt32(ds.Tables[0].Rows[0][0]);
                //}
                //catch (System.Exception ex)
                //{
                //    this.Msg = ex.Message;
                //    return -1;
                //}
            }
        }

        /// <summary>
        /// 修改更多信息的项
        /// </summary>
        /// <param name="iID">ID</param>
        /// <param name="strItem">项</param>
        /// <returns></returns>
        public bool ModifyMoreInfoItem(int iID, string strItem)
        {
            string strSql = "UPDATE MoreInfo set [Item]='" + strItem + "' where ID=" + iID;
            return ExecuteSql(strSql);
        }

        /// <summary>
        /// 删除更多信息
        /// </summary>
        /// <param name="iID"></param>
        /// <returns></returns>
        public bool DeleteMoreInfoItem(int iID)
        {
            DataSet ds = GetMoreInfoItem(iID);
            foreach (DataRow dr in ds.Tables[0].Rows)
            {
                int id = Convert.ToInt32(dr["ID"]);
                DeleteMoreInfoItem(id);
            }
            string strSql = "DELETE FROM MoreInfo where ID=" + iID;
            return ExecuteSql(strSql);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="iPID">父ID，0为顶级</param>
        /// <returns></returns>
        public DataSet GetMoreInfoItem(int iPID)
        {
            string strSql = "";
            if (iPID == 0)
            {
                strSql = "SELECT ID,PID,[Item],CreateDate,CreateEmployee FROM MoreInfo where PID is null";
            }
            else
            {
                strSql = "SELECT ID,PID,[Item],CreateDate,CreateEmployee FROM MoreInfo WHERE PID=" + iPID;
            }
            return ExecuteDataSet(strSql, "MoreInfo");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="strOrderNO"></param>
        /// <param name="iIDs"></param>
        /// <param name="strDateTime"></param>
        /// <param name="strEmployeeName"></param>
        /// <param name="iOption">0为新增，1为编辑</param>
        /// <returns></returns>
        public bool SaveOrderMore(string strOrderNO, int[] iIDs, int[] iPIDs, string[] strOther, string strDateTime, string strEmployeeName, int iOption)
        {
            string strSql = "";
            bool bSuccess = false;
            if (iOption == 1)//编辑
            {
                strSql = "DELETE FROM OrderMore where OrderNO='" + strOrderNO + "'";
                bSuccess = ExecuteSql(strSql);
                if (!bSuccess)
                {
                    return bSuccess;
                }
            }
            strSql = String.Empty;
            foreach (int i in iIDs)
            {
                strSql += "INSERT INTO OrderMore (OrderNO,ItemID,CreateDate,CreateEmployee) values ('" + strOrderNO + "'," + i + ",'" + strDateTime + "','" + strEmployeeName + "')\r\n";
            }
            for (int i = 0; i < iPIDs.Length; ++i)
            {
                strSql += "INSERT INTO OrderMore (OrderNO,ItemID,Other,CreateDate,CreateEmployee) values ('" + strOrderNO + "'," + iPIDs[i] + ",'" + strOther[i] + "','" + strDateTime + "','" + strEmployeeName + "')\r\n";
            }
            if (!String.IsNullOrEmpty(strSql))
            {
                bSuccess = ExecuteSql(strSql);
            }
            return bSuccess;
        }

        /// <summary>
        /// 订单的更多信息
        /// </summary>
        /// <param name="strOrderNO"></param>
        /// <returns></returns>
        public DataSet GetOrderMoreInfo(string strOrderNO)
        {
            string strSql = "select OrderNO,ItemID,Other from OrderMore where OrderNO='" + strOrderNO + "'";
            return ExecuteDataSet(strSql, "OrderMoreInfo");
        }

        #endregion

        /// <summary>
        /// 修改收银备注
        /// </summary>
        /// <param name="strOrderNO"></param>
        /// <param name="strCashNO"></param>
        /// <param name="p"></param>
        /// <returns></returns>
        public bool UpdateCashMemory(string strOrderNO, string strCashNO, string strCashMemory)
        {
            string strSql = "update CashSub set CashMemory='" + strCashMemory + "' where OrderNO='" + strOrderNO + "' and CashNO='" + strCashNO + "'";
            return ExecuteSql(strSql);
        }

        public DataSet SearchNewOrdersCash(string where)
        {
            string sql = @"select o.Process '订单状态',o.CustomerName1 '先生姓名',o.MobilePhone1 '先生电话',o.CustomerName2 '女士姓名',o.MobilePhone2 '女士电话',o.OrderNO '订单号',c.FPH '发票号',o.SuiteName '套系名称',o.SuitePrice '套系价格',o.Discount '打折',o.ReducesPresently '减现',o.OrderSuitePrice '订单实际金额',c.CashPretextName '收银事由',c.CashNumber '收银金额',o.OrderDepartment '订单部门',c.BusinessEmployeeName '开票人员',o.OrderEmployee '接单人员',o.OrderDate '订单时间' from VIEW_Orders o,VIEW_Cash c where o.OrderNO = c.OrderNO and o.IsDelete = 0 and o.OrderState = 1 and c.CashState = '正常' " + where + " order by o.OrderDate";
            DataSet ds = new DataSet();
            ds = ExecuteDataSet(sql, "NewOrdersCash");
            return ds;
        }

        public bool UpdateBusinessEmployee(string CashNO, string BusinessDepartment, string BusinessEmployeeNO)
        {
            bool b = false;
            string sql = "update CashSub set BusinessDepartment = '" + BusinessDepartment + "', BusinessEmployeeNO = '" + BusinessEmployeeNO + "' where CashNO = '" + CashNO + "'";
            b = SqlHelper.ExecuteNonQuery(SqlHelper.GMS_ConStr, CommandType.Text, sql) > 0 ? true : false;
            return b;
        }

        /// <summary>
        /// 在收银时得到所有的员工姓名和编号
        /// </summary>
        public DataSet GetSampleEmployee()
        {
            string strSql = "select DepartmentNO,EmployeeNO,EmployeeName from Employee where IsDelete=0";
            return ExecuteDataSet(strSql, "Employee");
        }

        /// <summary>
        /// 所有有收银权限的员工
        /// </summary>
        /// <returns></returns>
        public DataSet GetCashEmployee()
        {
            string strSql = @"select e.EmployeeNO,EmployeeName,e.DepartmentNO
from Employee e join UserPower up on e.EmployeeNO=up.EmployeeNO 
join SystemPower sp on up.PowerID=sp.ID 
where sp.ID=1 and IsDelete=0";
            return ExecuteDataSet(strSql, "CashEmployee");
        }

        /// <summary>
        /// 摄控改期记录
        /// Add by Caijinsong 
        /// Time:2014-03-06
        /// </summary>
        /// <param name="p"></param>
        /// <param name="strShootChangeLogo"></param>
        public bool SaveShootChangeLogo(string strOrderNO, string strShootChangeLogo)
        {
            string strSql = "Update Orders set ShootChangeLogo='" + strShootChangeLogo + "', set ShootChangeDate=getdate() where OrderNO='" + strOrderNO + "'";
            return ExecuteSql(strSql);
        }

        /// <summary>
        /// 查询改期
        /// Add by Caijinsong 
        /// Time: 2014-03-06
        /// </summary>
        /// <param name="p"></param>
        /// <param name="p_2"></param>
        /// <param name="p_3"></param>
        /// <returns></returns>
        public DataSet SearchShootChange(string strCondition, string[] strShootDate, string[] strChangeDate)
        {
            string strChangeDateCondition = String.Empty;
            if (strChangeDate != null)
            {
                strChangeDateCondition = " and DATEDIFF(DD,O.CreateDate,'" + strChangeDate[0] + @"')<=0 and DATEDIFF(DD,O.CreateDate,'" + strChangeDate[1] + @"')>=0 ";
            }
            string strSql = @"select V.OrderNO,V.CustomerName1,V.CustomerName2,V.MobilePhone1,V.MobilePhone2,O.LogoContext,V.PreShootDateN,V.ShootAddressN,V.PreShootDateW,V.ShootAddressW 
from VIEW_Orders V left join logo O on V.orderNo = O.OrderNO where O.LogoContext like '%摄影改期%'  and  
((DATEDIFF(DD,V.PreShootDateN,'" + strShootDate[0] + "')<=0 and DATEDIFF(DD,V.PreShootDateN,'" + strShootDate[1] + @"')>=0) or 
(DATEDIFF(DD,V.PreShootDateW,'" + strShootDate[0] + "')<=0 and DATEDIFF(DD,V.PreShootDateW,'" + strShootDate[1] + @"')>=0)) "
                              + strChangeDateCondition +
@" and (V.OrderNO like '%" + strCondition + "%' or V.CustomerName1 like '%" + strCondition + "%' or V.CustomerName2 like '%" + strCondition + "%' or V.MobilePhone1 like '%" + strCondition + "%' or V.MobilePhone2 like '%" + strCondition + "%')";
            return ExecuteDataSet(strSql, "ShootChange");
        }

        /// <summary>
        /// 转档人员 关联 校色人员
        /// </summary>
        /// <param name="orderno"></param>
        /// <returns></returns>
        public DataSet SelectXSImportEmployee(string orderno)
        {
            string strSql = "select [Create] from OrderLogo where orderno = '" + orderno + "' and process = 'P_47.2'  GROUP BY [Create],CreateDate order by CreateDate desc ";
            return ExecuteDataSet(strSql, "XSImportEmployee");
        }
        /// <summary>
        /// 样修人员 关联 设计人员
        /// </summary>
        /// <param name="orderno"></param>
        /// <returns></returns>
        public DataSet SelectHCSampleEmployee(string orderno)
        {
            string strSql = "select [Create] from OrderLogo where orderno = '" + orderno + "' and process = 'P_48.6'  GROUP BY [Create],CreateDate order by CreateDate desc ";
            return ExecuteDataSet(strSql, "HCSampleEmployee");
        }

        public DataSet GetShootMemoryTemplates(int iTypeID)
        {
            string strSql = "select sm.ID,smt.ShootMemoryTypeName,sm.ShootMemory from ShootMemoryTemplate sm join ShootMemoryType smt on sm.ShootMemoryTypeID=smt.ID where smt.ID=" + iTypeID;
            return ExecuteDataSet(strSql, "ShootMemoryTemplate");
        }

        public bool AddShootMemoryTemplates(string strShootMemoryTemplate, int iTypeID)
        {
            string strSql = "insert into ShootMemoryTemplate (ShootMemory,ShootMemoryTypeID) values ('" + strShootMemoryTemplate + "'," + iTypeID + ")";
            return ExecuteSql(strSql);
        }

        public bool DeleteShootMemoryTemplates(int[] iID)
        {
            if (null != iID && 0 != iID.Length)
            {
                string strIDs = "";
                bool bFirst = true;
                foreach (int id in iID)
                {
                    if (!bFirst)
                    {
                        strIDs += ",";
                    }
                    strIDs += id.ToString();
                    bFirst = false;
                }
                string strSql = "delete from ShootMemoryTemplate where ID in (" + strIDs + ")";
                return ExecuteSql(strSql);
            }
            else
            {
                return false;
            }
        }

        /// <summary>
        /// 收银查询 联合
        /// </summary>
        /// <param name="strCashDepartmentNOs">收银部门（多个）</param>
        /// <param name="BusinessDepartmentNames">业绩部门（多个）</param>
        /// <param name="strCashPretextNOs">收款事由（多个）</param>
        /// <param name="strCashDate">收银时间（时间段）</param>
        /// <param name="strCreateDate">创建时间（时间段）</param>
        /// <returns></returns>
        public DataSet SearchCashMulti(string[] strCashDepartmentNOs, string[] BusinessDepartmentNames, string[] strCashPretextNOs, string[] strCashDate, string[] strCreateDate)
        {
            string strSqlsub = "";

            #region 收银部门
            bool isFirst = true;
            string strCashDep = "";
            foreach (string str in strCashDepartmentNOs)
            {
                if (!isFirst)
                {
                    strCashDep += ",";
                }
                strCashDep += "'" + str + "'";
                isFirst = false;
            }
            if (strCashDep != "")
            {
                strSqlsub += " CashDepartment.DepartmentNO in (" + strCashDep + ") ";
            }
            #endregion

            #region 业绩部门
            isFirst = true;
            string strBusinessDepName = "";
            foreach (string str in BusinessDepartmentNames)
            {
                if (!isFirst)
                {
                    strBusinessDepName += ",";
                }
                strBusinessDepName += "'" + str + "'";
                isFirst = false;
            }
            if (strBusinessDepName != "")
            {
                if (strSqlsub != "")
                {
                    strSqlsub += " and ";
                }
                strSqlsub += " BusinessDepartment in (" + strBusinessDepName + ") ";
            }
            #endregion

            #region 收款事由
            isFirst = true;
            string strCashPretextNO = "";
            foreach (string str in strCashPretextNOs)
            {
                if (!isFirst)
                {
                    strCashPretextNO += ",";
                }
                strCashPretextNO += "'" + str + "'";
                isFirst = false;
            }
            if (strCashPretextNO != "")
            {
                if (strSqlsub != "")
                {
                    strSqlsub += " and ";
                }
                strSqlsub += " CashDetail.CashPretext in (" + strCashPretextNO + ") ";
            }
            #endregion

            if (strSqlsub != "")
            {
                strSqlsub = "(" + strSqlsub + ") and ";
            }
            //收银时间
            strSqlsub += " (DATEDIFF(DD,CashSub.CashDate,'" + strCashDate[0] + "')<=0 and DATEDIFF(DD,CashSub.CashDate,'" + strCashDate[1] + "')>=0) ";
            //创建时间
            if (strCreateDate != null)
            {
                strSqlsub += " and (DATEDIFF(DD,CashSub.CreateDate,'" + strCreateDate[0] + "')<=0 and DATEDIFF(DD,CashSub.CreateDate,'" + strCreateDate[1] + "')>=0) ";
            }

            string strSql = @"select OrderType.OrderTypeValue as OrderType,CashSub.OrderNO,Cash.CustomerName,Cash.CustomerPhone,
Cash.IntroCardNO,Cash.IntroCustomerName,Cash.SuiteTypeName,Cash.SuitePrice,CashSub.CashNO,CashSub.FPH,
dbo.Fn_GetDepartmentName(CashSub.BusinessDepartment) as BusinessDepartment,dbo.Fn_GetEmployeeName(CashSub.BusinessEmployeeNO) AS BusinessEmployeeName,CashSub.BusinessPoint,
CashSub.CashMemory,CashDetail.Size,CashDetail.Number,CashDetail.Unit,CashPretext.CashPretextName,
CashDetail.CashWay,CashNumber=sum(CashDetail.CashNumber),CashDepartment.DepartmentName as CashDepartmentName,
CashEmployee.EmployeeName as CashEmployeeName,CashSub.CashDate,CreateEmployee.EmployeeName as CreateEmployeeName,
CashSub.CreateDate,CashSub.CashState,CashSub.fphm
from CashSub left outer join Cash on CashSub.OrderNO=Cash.OrderNO
left outer join CashDetail on CashDetail.CashNO=CashSub.CashNO
left outer join Employee CashEmployee on CashSub.CashEmployeeNO=CashEmployee.EmployeeNO
left outer join Department CashDepartment on CashDepartment.DepartmentNO=CashEmployee.DepartmentNO
left outer join CashPretext on CashPretext.CashPretextNO = CashDetail.CashPretext
left outer join TaxCashSub on TaxCashSub.CashNO=CashSub.CashNO
left outer join OrderType on OrderType.OrderType=Cash.OrderType
left outer join Employee CreateEmployee on CreateEmployee.EmployeeNO=CashSub.[Create]
where CashState<>'删除' and " + strSqlsub +
@"group by OrderType.OrderTypeValue,CashSub.OrderNO,Cash.CustomerName,Cash.CustomerPhone,
Cash.IntroCardNO,Cash.IntroCustomerName,Cash.SuiteTypeName,Cash.SuitePrice,CashSub.CashNO,
CashSub.FPH,CashSub.BusinessDepartment,CashSub.BusinessEmployeeNO,CashSub.BusinessPoint,
CashSub.CashMemory,CashDetail.Size,CashDetail.Number,CashDetail.Unit,CashPretext.CashPretextName,
CashDetail.CashWay,CashDepartment.DepartmentName,CashEmployee.EmployeeName,CashSub.CashDate,
CreateEmployee.EmployeeName,CashSub.CreateDate,CashSub.CashState,CashSub.fphm
Order by CreateDate";
            return ExecuteDataSet(strSql, "SearchCashMulti");
        }

        /// <summary>
        /// 摄控模板类别名称验证
        /// </summary>
        /// <param name="strShootMemoryTypeName">摄控模板类别名称</param>
        /// <returns>true or false</returns>
        public bool ExistShootMemoryTypeName(string strShootMemoryTypeName)
        {
            string strSql = "select 1 from ShootMemoryType where ShootMemoryTypeName='" + strShootMemoryTypeName + "'";
            DataSet ds = ExecuteDataSet(strSql, "ShootMemoryType");
            if (ds.Tables[0].Rows.Count > 0)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        /// <summary>
        /// 添加摄控模板类别
        /// </summary>
        /// <param name="strShootMemoryTypeName">摄控模板类别名称</param>
        /// <returns></returns>
        public bool AddShootMemoryType(string strShootMemoryTypeName)
        {
            string strSql = "insert into ShootMemoryType (ShootMemoryTypeName) values ('" + strShootMemoryTypeName + "')";
            return ExecuteSql(strSql);
        }

        /// <summary>
        /// 保存摄控模板类别
        /// </summary>
        /// <param name="strShootMemoryTypeName">摄控模板类别名称</param>
        /// <param name="ID">ID</param>
        /// <returns></returns>
        public bool SaveShootMemoryType(string strShootMemoryTypeName, int ID)
        {
            string strSql = "Update ShootMemoryType set ShootMemoryTypeName='" + strShootMemoryTypeName + "' where ID=" + ID;
            return ExecuteSql(strSql);
        }

        /// <summary>
        /// 删除摄控模板类别
        /// </summary>
        /// <param name="typeID">typeID</param>
        public bool DeleteShootMemoryType(int typeID)
        {
            string strSql = "  delete from ShootMemoryTemplate where ShootMemoryTypeID=" + typeID;
            strSql += "   delete from ShootMemoryType where ID=" + typeID;
            return ExecuteSql(strSql);
        }

        /// <summary>
        /// 获取所有的摄控模板类别
        /// </summary>
        /// <returns></returns>
        public DataSet GetShootMemoryType()
        {
            string strSql = "select ID,ShootMemoryTypeName from ShootMemoryType";
            return ExecuteDataSet(strSql, "ShootMemoryType");
        }

        /// <summary>
        /// 实际收入的钱（对于某个类别）
        /// </summary>
        /// <param name="strStyle">类别</param>
        /// <param name="strOrderNO">订单号</param>
        /// <returns>实际收银</returns>
        public string GetActualMoney(string strStyle, string strOrderNO)
        {
            string strSql = "";
            switch (strStyle)
            {
                case "套系":
                    strSql = "select ActualSuite from OrdersPayState where OrderNO='" + strOrderNO + "'";
                    break;
                case "摄影":
                    strSql = "select ActualShoot from OrdersPayState where OrderNO='" + strOrderNO + "'";
                    break;
                case "礼服":
                    strSql = "select ActualClothes from OrdersPayState where OrderNO='" + strOrderNO + "'";
                    break;
                case "选片":
                    strSql = "select ActualChoose from OrdersPayState where OrderNO='" + strOrderNO + "'";
                    break;
                case "取件":
                    strSql = "select ActuaGetGoods from OrdersPayState where OrderNO='" + strOrderNO + "'";
                    break;
                default:
                    strSql = "select ActuaOther from OrdersPayState where OrderNO='" + strOrderNO + "'";
                    break;
            }
            return ExecuteSqlToString(strSql);
        }

        /// <summary>
        /// 订单-->新单
        /// </summary>
        /// <param name="strOrderNO"></param>
        public bool IsANewOrder(string strOrderNO, bool IsNew)
        {
            string strSql = "";
            if (IsNew)
            {
                strSql = @"declare @new bit
select @new=IsNewOrder from Orders where OrderNO='" + strOrderNO + @"'
if @new=0 or @new is null 
begin
update Orders set IsNewOrder=1,NewOrderDate=getdate() where OrderNO='" + strOrderNO + @"'
end";
            }
            else
            {
                strSql = "update Orders set IsNewOrder=0,NewOrderDate=null where OrderNO='" + strOrderNO + "'";
            }
            return ExecuteSql(strSql);
        }

        public DataSet OrderStatistics(string sqlWhere)
        {
            string sql = "select o.OrderNO '订单号',o.customerName1 '先生姓名',o.CustomerName2 '女士姓名',o.MobilePhone1 '先生电话',o.MobilePhone2 '女士电话',o.OrderDepartment '接单地点',o.OrderEmployee '接单人员',o.OrderDate '接单时间',o.SuiteName '套系名称',o.ShootEmployeeN '摄影师',o.SuitePrice '套系价格',ops.PayableSuite '应付金额',ops.ActualSuite  '实付金额',o.PreShootDateN '摄影预约时间',o.ShootDateN '摄影时间',o.ShootAddressN '摄影地点',o.OrderDate '订单时间' from View_Orders o left join OrdersPayState ops on o.OrderNO = ops.OrderNO where 1=1 " + sqlWhere + " order by o.ShootDateN";
            return ExecuteDataSet(sql, "OrderStatistics");

        }

        /// <summary>
        /// 微信接口
        /// </summary>
        /// <param name="orderid">订单号</param>
        /// <param name="status">状态</param>
        /// <returns></returns>
        public string SendWxInterFace(string orderid, string status)
        {
            try
            {
                string contentType = "application/x-www-form-urlencoded";
                string accept = "image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, application/x-shockwave-flash, application/vnd.ms-excel, application/vnd.ms-powerpoint, application/msword, */*";
                string userAgent = "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; .NET CLR 2.0.50727; .NET CLR 3.0.04506.648; .NET CLR 3.5.21022)";
                Encoding encoding = Encoding.GetEncoding("utf-8");
                string url = "http://222.55.17.162/sendNotice?orderid=" + orderid + "&status=" + status;

                HttpWebRequest httpWebRequest = (HttpWebRequest)HttpWebRequest.Create(url);
                httpWebRequest.ContentType = contentType;
                httpWebRequest.ServicePoint.ConnectionLimit = 300;
                httpWebRequest.Referer = url;
                httpWebRequest.Accept = accept;
                httpWebRequest.UserAgent = userAgent;
                httpWebRequest.Method = "GET";

                using (HttpWebResponse httpWebResponse = (HttpWebResponse)httpWebRequest.GetResponse())
                {
                    Stream responseStream = httpWebResponse.GetResponseStream();
                    StreamReader streamReader = new StreamReader(responseStream, Encoding.UTF8);
                    string html = streamReader.ReadToEnd();
                    streamReader.Close();
                    responseStream.Close();
                    return html;
                }
            }
            catch (Exception ex)
            {
                return ex.Message;
            }
        }

        /// <summary>
        /// 添加日常事务
        /// </summary>
        /// <param name="orderno">订单号</param>
        /// <param name="content">内容</param>
        /// <param name="employeename">员工姓名</param>
        /// <param name="customername">部门名称</param>
        /// <returns>成功/失败</returns>
        public bool InsertDailyOrderTransaction(string orderno, string content, string employeename, string departmenname)
        {
            string sql = "insert into DailyOrderTransaction (OrderNo,Content,EmployeeName,DepartmentName,CreateDate) values('" + orderno + "','" + content + "','" + employeename + "','" + departmenname + "',convert(varchar(20), getdate(), 120))";
            return ExecuteSql(sql);
        }

        /// <summary>
        /// 查询日常事务
        /// </summary>
        /// <param name="orderno">订单号</param>
        /// <returns>数据</returns>
        public DataSet SelectDailyOrderTransaction(string orderno)
        {
            string sql = "select OrderNo '订单号',[Content] '内容',EmployeeName '员工姓名',DepartmentName '部门名称',CreateDate '记录时间' from DailyOrderTransaction where orderno = '" + orderno + "'";
            return ExecuteDataSet(sql, "DailyOrderTransaction");
        }

        /// <summary>
        /// 云商体验中心模板设置
        /// </summary>
        /// <param name="controlType">类型</param>
        /// <param name="addressNO">部门编号</param>
        /// <param name="dateBegin">开始时间</param>
        /// <param name="dateEnd">结束时间</param>
        /// <param name="timeTitles">排控时间（也就是ColTitle）</param>
        /// <param name="createDate"></param>
        /// <param name="createEmployeeNO"></param>
        /// <returns></returns>
        public bool SaveControlTable(string controlType, string addressNO, DateTime dateBegin, DateTime dateEnd, string columnTitle, string rowTitle, DateTime createDate, string createEmployeeNO)
        {
            string sSql = "Insert into dbo.ControlTable (ControlTableType, [Address], Date1, Date2, ColTitle,RowTime, Creater, CreateDate) values ('" + controlType + "','" + addressNO + "', '" + dateBegin + "', '" + dateEnd + "', '" + columnTitle + "', '" + rowTitle + "','" + createEmployeeNO + "', '" + createDate + "') ";
            return ExecuteSql(sSql);
        }
        /// <summary>
        /// 云商体验中心模板 获取
        /// 用于修改模板
        /// </summary>
        /// <param name="controlType">类型</param>
        /// <param name="addressNO">部门编号</param>
        /// <returns></returns>
        public DataSet SearchTopControlTable(string controlType, string addressNO)
        {
            //string strSql = "select top 1 ColTitle,Date1,Date2 from ControlTable where ControlTableType='" + controlType + "' and [Address]='" + addressNO + "' order by CreateDate desc";
            //不使用部门进行筛选
            string strSql = "select top 1 ColTitle,RowTime,Date1,Date2 from ControlTable where ControlTableType='" + controlType + "' order by CreateDate desc";
            return ExecuteDataSet(strSql, "controlTable");
        }
        /// <summary>
        /// 云商体验中心模板 获取
        /// 在数据加载前
        /// </summary>
        /// <param name="controlType">类型</param>
        /// <param name="addressNO">部门编号</param>
        /// <param name="currDate">当前时间</param>
        /// <returns></returns>
        public DataSet SearchControlTable(string controlType, string addressNO, DateTime currDate)
        {
            //string strSql = "select top 1 ColTitle,Date1,Date2 from ControlTable where ControlTableType='" + controlType + "' and [Address]='" + addressNO + "' and DATEDIFF(dd,date1,'" + currDate + "')>=0 and  DATEDIFF(dd,date2,'" + currDate + "')<=0 order by CreateDate desc";
            //不使用部门进行筛选
            string strSql = "select top 1 ColTitle,RowTime,Date1,Date2 from ControlTable where ControlTableType='" + controlType + "' and DATEDIFF(dd,date1,'" + currDate + "')>=0 and  DATEDIFF(dd,date2,'" + currDate + "')<=0 order by CreateDate desc";
            return ExecuteDataSet(strSql, "controlTable");
        }
        /// <summary>
        /// 云商体验中心排控数据
        /// </summary>
        /// <param name="addressNO"></param>
        /// <param name="dateTime"></param>
        public DataSet GetCenterControlData(string addressNO, DateTime dateTime)
        {
            string strSql = @"select a.OrderNO,RowIndex,ColumnTitle,a.OrderState,CustomerName1,CustomerName2,MobilePhone1,MobilePhone2,d.SuiteName,b.SuitePrice
from CloudCenter a join Orders b on a.OrderNO=b.OrderNO
join Customers c on c.CustomerNO=b.CustomerNO 
join Suite d on d.SuiteNO=b.SuiteNO 
where datediff(dd,ExperienceDate,'" + dateTime + "')=0 ";// and AddressNO='" + addressNO + "'"; //不使用部门进行筛选
            return ExecuteDataSet(strSql, "controlData");
        }
        public string GetExperienceOrderDate(string orderNO)
        {
            string sqlString = "select ExperienceDate from CloudCenter where OrderNO='" + orderNO + "'";
            try
            {
                return this.ExecuteSqlToString(sqlString);
            }
            catch (System.Exception ex)
            {
                this._Msg = ex.Message;
                return null;
            }
        }
        /// <summary>
        /// 云商体验中心 订单是否安排
        /// </summary>
        /// <param name="orderNO"></param>
        /// <returns></returns>
        public DataSet CheckExperienceOrder(string orderNO)
        {
            string strSql = "select RowIndex,ColumnTitle,ExperienceDate from CloudCenter where OrderNO='" + orderNO + "'";
            return ExecuteDataSet(strSql, "cloudOrderNO");
        }
        /// <summary>
        /// 云商体验中心 当前空格 true可用，false 不可用
        /// </summary>
        /// <param name="addressNO"></param>
        /// <param name="rowIndex"></param>
        /// <param name="colTitle"></param>
        /// <param name="experienceDate"></param>
        /// <returns></returns>
        public bool CheckCellAvailable(string addressNO, int rowIndex, string colTitle, DateTime experienceDate)
        {
            //string strSql = "select 1 from CloudCenter where AddressNO='" + addressNO + "' and RowIndex=" + rowIndex + " and ColumnTitle='" + colTitle + "' and ExperienceDate='" + experienceDate + "'";
            //不使用部门进行筛选
            string strSql = "select 1 from CloudCenter where RowIndex=" + rowIndex + " and ColumnTitle='" + colTitle + "' and ExperienceDate='" + experienceDate + "'";
            DataSet ds = ExecuteDataSet(strSql, "CheckCellAvailable");
            if (ds.Tables[0].Rows.Count > 0)
            {
                return false;
            }
            return true;
        }
        /// <summary>
        /// 云商体验中心 安排订单 
        /// </summary>
        /// <param name="orderNO"></param>
        /// <param name="addressNO"></param>
        /// <param name="rowIndex"></param>
        /// <param name="colTitle"></param>
        /// <param name="experienceDate"></param>
        /// <param name="createEmp"></param>
        /// <param name="createDate"></param>
        /// <returns>
        /// 返回大于0或等于0，大于0表示成功
        /// </returns>
        public int ArrangeOrderExperience(string orderNO, string addressNO, int rowIndex, string colTitle, DateTime experienceDate, string createEmp, DateTime createDate)
        {
            string strSql = " insert into CloudCenter(OrderNO,AddressNO,RowIndex,ColumnTitle,ExperienceDate,CreateEmployee,CreateDate) values('" + orderNO + "','" + addressNO + "'," + rowIndex + ",'" + colTitle + "','" + experienceDate + "','" + createEmp + "','" + createDate + "') ";
            return ExecuteNoneQuery(strSql);
        }
        /// <summary>
        /// 云商体验中心 改期
        /// </summary>
        /// <param name="orderNO"></param>
        /// <param name="rowIndex"></param>
        /// <param name="colTitle"></param>
        /// <param name="experienceDate"></param>
        /// <returns></returns>
        public int ChangeOrderExperience(string orderNO, int rowIndex, string colTitle, DateTime experienceDate)
        {
            string strSql = " update CloudCenter set RowIndex=" + rowIndex + ",ColumnTitle='" + colTitle + "',ExperienceDate='" + experienceDate + "' where OrderNO='" + orderNO + "' ";
            return ExecuteNoneQuery(strSql);
        }
        /// <summary>
        /// 云商体验中心 取消订单
        /// </summary>
        /// <param name="orderNO"></param>
        /// <returns></returns>
        public int CancelOrderExperience(string orderNO)
        {
            string strSql = "delete from CloudCenter where OrderNO='" + orderNO + "'";
            return ExecuteNoneQuery(strSql);
        }
        /// <summary>
        /// 流失客户
        /// </summary>
        /// <param name="orderNO"></param>
        public bool ChangeOrderState(string orderNO, int orderState)
        {
            string strSql = "update CloudCenter set OrderState=" + orderState + " where OrderNO='" + orderNO + "'";
            if (ExecuteNoneQuery(strSql) > 0)
            {
                return true;
            }
            return false;
        }


        public DataSet SearchExperienceOrder(string addressNO, DateTime dateBegin, DateTime dateEnd, string suiteTypeNO, string suiteNO, bool isShootArrange)
        {
            string strSql = @"select a.OrderNO,d.DepartmentName AddressName,g.SuiteTypeName,f.SuiteName,
c.CustomerName1,c.CustomerName2,c.MobilePhone1,c.MobilePhone2,
CONVERT(varchar(11),a.ExperienceDate,23)+' '+a.ColumnTitle ExperDate,
N.DepartmentName ShootAddressN,case when datediff(dd,b.PreShootDateN,'1900-01-01')=0 then null else b.PreShootDateN end PreShootDateN,
W.DepartmentName ShootAddressW,case when datediff(dd,b.PreShootDateW,'1900-01-01')=0 then null else b.PreShootDateW end PreShootDateW,
case when a.OrderState=1 then '流失' else '正常' end OrderState,
e.EmployeeName CreateEmployee,a.CreateDate
from CloudCenter a join Orders b on a.OrderNO=b.OrderNO
join Customers c on c.CustomerNO=b.CustomerNO
join Department d on d.DepartmentNO=a.AddressNO
left outer join Employee e on e.EmployeeNO=a.CreateEmployee
left outer join Suite f on f.SuiteNO=b.SuiteNO
left outer join SuiteType g on g.SuiteTypeNO=b.SuiteTypeNO
left outer join Department N on N.DepartmentNO=b.ShootAddressN
left outer join Department W on W.DepartmentNO=b.ShootAddressW
where DATEDIFF(dd,a.ExperienceDate,'" + dateBegin + "')<=0 and DATEDIFF(dd,a.ExperienceDate,'" + dateEnd + @"')>=0 "; //and a.AddressNO='" + addressNO + "'"; //不使用部门进行筛选
            if (!string.IsNullOrEmpty(suiteTypeNO))
            {
                strSql += " and b.SuiteTypeNO='" + suiteTypeNO + "' ";
            }
            if (!string.IsNullOrEmpty(suiteNO))
            {
                strSql += " and b.SuiteNO='" + suiteNO + "' ";
            }
            if (isShootArrange)
            {
                strSql += " and ((ShootAddressN is not null and ShootAddressN!='') or (ShootAddressW is not null and ShootAddressW!='')) ";
            }
            return ExecuteDataSet(strSql, "ExperienceOrder");
        }

        public bool AddDesignEmployeeDepartment(string sql)
        {
            if (ExecuteNoneQuery(sql) > 0)
            {
                return true;
            }
            return false;
        }
        #region 电访 add by Caijinsong 2014-10-31
        /// <summary>
        /// 按关键字查询要电访的订单
        /// </summary>
        /// <param name="strKey"></param>
        public string Calling_CheckOrder(string strKey)
        {
            string strSql = "select OrderNO from VIEW_Orders where OrderNO='" + strKey + "' or MobilePhone1='" + strKey + "' or MobilePhone2='" + strKey + "'";
            return ExecuteSqlToString(strSql);
        }

        public DataSet Calling_SearchShoot(DateTime dt1, DateTime dt2)
        {
            string strSql = @"select ShootDateN,o.OrderNO,CustomerName1,CustomerName2,MobilePhone1,MobilePhone2,
OrderDepartment,OrderEmployee,ShootAddressN,
Shoot_OrderDepartment,
case when Shoot_OrderDepartment>8 then '超越' when Shoot_OrderDepartment>6 then '达到' when Shoot_OrderDepartment>0 then '低于' else '-' end OrderDepText,
ShootEmployeeN,
Shoot_ShootEmployee,
case when Shoot_ShootEmployee>8 then '超越' when Shoot_ShootEmployee>6 then '达到' when Shoot_ShootEmployee>0 then '低于' else '-' end ShootEmpText,
DressEmployeeN,
Shoot_DressEmployee,
case when Shoot_DressEmployee>8 then '超越' when Shoot_DressEmployee>6 then '达到' when Shoot_DressEmployee>0 then '低于' else '-' end DressEmpText,
Shoot_Suggestion,Shoot_Solution,
Shoot_Satisfaction,Shoot_Result,Shoot_Connect,Shoot_SendSMS,Shoot_CallDateTime,
e.EmployeeName Shoot_CallEmployee 
from VIEW_Orders o left join CallingBack cb on cb.OrderNO=o.OrderNO
left join Employee e on e.EmployeeNO=cb.Shoot_CallEmployeeNO
where datediff(dd,ShootDateN,'" + dt1 + "')<=0 and DATEDIFF(dd,ShootDateN,'" + dt2 + "')>=0";
            return ExecuteDataSet(strSql, "Shoot");
        }
        public DataSet Calling_SearchChoose(DateTime dt1, DateTime dt2)
        {
            string strSql = @"select o.OrderNO,ChooseDate,CustomerName1,CustomerName2,MobilePhone1,MobilePhone2,ShootAddressN,
ChooseEmployee,
Choose_ServiceQuality,
case when Choose_ServiceQuality>8 then '超越' when Choose_ServiceQuality>6 then '达到' when Choose_ServiceQuality>0 then '低于' else '-' end Choose_SQText,
ShootEmployeeN,DressEmployeeN,SampleEmployee,
Choose_ShootEffect,
case when Choose_ShootEffect>8 then '超越' when Choose_ShootEffect>6 then '达到' when Choose_ShootEffect>0 then '低于' else '-' end Choose_SEText,
Choose_Suggestion,Choose_Reshoot,Choose_Solution,Choose_Satisfaction,
Choose_Connect,Choose_Result,Choose_SendSMS,e.EmployeeName Choose_CallEmployee,Choose_CallDateTime
from VIEW_Orders o left join CallingBack cb on o.OrderNO=cb.OrderNO
left join Employee e on e.EmployeeNO=cb.Choose_CallEmployeeNO
where datediff(dd,ChooseDate,'" + dt1 + "')<=0 and DATEDIFF(dd,ChooseDate,'" + dt2 + "')>=0";
            return ExecuteDataSet(strSql, "Choose");
        }
        public DataSet Calling_SearchGot(DateTime dt1, DateTime dt2)
        {
            string strSql = @"select o.OrderNO,PreGetGoodsDate,CustomerName1,CustomerName2,MobilePhone1,MobilePhone2,'送相' Got_Way,Got_Evaluation,
Got_Recommend,Got_Suggestion,Got_SuggestionType,Got_Solution,Got_Satisfaction,Got_Connect,
Got_Result,Got_SendService,e.EmployeeName Got_CallEmployee,Got_CallDateTime 
from VIEW_Orders o left join CallingBack cb on o.OrderNO=cb.OrderNO
left join Employee e on  e.EmployeeNO=cb.Got_CallEmployeeNO
where datediff(dd,PreGetGoodsDate,'" + dt1 + "')<=0 and DATEDIFF(dd,PreGetGoodsDate,'" + dt2 + "')>=0";
            return ExecuteDataSet(strSql, "Got");
        }
        public DataSet Calling_SearchJiaYi(DateTime dt1, DateTime dt2)
        {
            string strSql = @"select o.OrderNO,Dress_ChooseDate,CustomerName1,CustomerName2,MobilePhone1,MobilePhone2,
Dress_ServicePeople,
JiaYi_ClothesEmployee,
case when JiaYi_ClothesEmployee>8 then '超越' when JiaYi_ClothesEmployee>6 then '达到' when JiaYi_ClothesEmployee>0 then '低于' else '-' end JiaYi_CEText,
JiaYi_Suggestion,JiaYi_Solution,JiaYi_Satisfaction,
JiaYi_Connect,JiaYi_Result,e.EmployeeName JiaYi_CallEmployee,JiaYi_CallDateTime 
from Orders o left join Customers c on o.CustomerNO=c.CustomerNO
left join CallingBack cb on o.OrderNO=cb.OrderNO
left join Employee e on  e.EmployeeNO=cb.JiaYi_CallEmployeeNO
left join Dress_Reventions dr on dr.OrderNO=o.OrderNO
where datediff(dd,Dress_ChooseDate,'" + dt1 + "')<=0 and DATEDIFF(dd,Dress_ChooseDate,'" + dt2 + "')>=0";
            return ExecuteDataSet(strSql, "JiaYi");
        }

        /// <summary>
        /// 查询订单信息 和 电访信息
        /// </summary>
        /// <param name="strOrderNO"></param>
        /// <returns></returns>
        public DataSet SearchOrderCalling(string strOrderNO)
        {
            /*订单信息*/
            string strSql = @"select top 1 a.OrderNO,CustomerName1,CustomerName2,MobilePhone1,MobilePhone2,OrderDepartment,OrderEmployee,
ShootAddressN,ShootDateN,ShootEmployeeN,DressEmployeeN,ChooseDate,ChooseEmployee,SampleEmployee,PreGetGoodsDate,
b.Dress_ServicePeople,b.Dress_ChooseDate
from VIEW_Orders a left join Dress_Reventions b on a.OrderNO=b.OrderNO 
where a.OrderNO='" + strOrderNO + "' order by Dress_OperatorTime desc \r\n";
            /*电访信息*/
            strSql += @"SELECT [OrderNO],[Shoot_OrderDepartment],[Shoot_ShootEmployee],[Shoot_DressEmployee],
[Shoot_Suggestion],[Shoot_Solution],[Shoot_Satisfaction],
[Shoot_Connect],[Shoot_Result],[Shoot_SendSMS],se.EmployeeName as Shoot_CallEmployee,
[Shoot_CallDateTime],[Choose_ServiceQuality],[Choose_ShootEffect],
[Choose_Suggestion],[Choose_Reshoot],[Choose_Solution],[Choose_Satisfaction],
[Choose_Connect],[Choose_Result],[Choose_SendSMS],ce.EmployeeName as Choose_CallEmployee,
[Choose_CallDateTime],[Got_Evaluation],[Got_Recommend],[Got_Suggestion],
[Got_SuggestionType],[Got_Solution],[Got_Satisfaction],[Got_Connect],
[Got_Result],[Got_SendService],ge.EmployeeName as Got_CallEmployee,[Got_CallDateTime],
[JiaYi_ClothesEmployee],[JiaYi_Suggestion],[JiaYi_Solution],[JiaYi_Satisfaction],
[JiaYi_Connect],[JiaYi_Result],jy.EmployeeName as JiaYi_CallEmployee,[JiaYi_CallDateTime]
FROM [CallingBack] a left join Employee se on a.Shoot_CallEmployeeNO=se.EmployeeNO
left join Employee ce on a.Choose_CallEmployeeNO=ce.EmployeeNO
left join Employee ge on a.Got_CallEmployeeNO=ge.EmployeeNO 
left join Employee jy on a.JiaYi_CallEmployeeNO=jy.EmployeeNO 
where a.OrderNO='" + strOrderNO + "'";
            return ExecuteDataSet(strSql, "CallingBack");
        }
        /// <summary>
        /// 保存摄影后电访信息
        /// </summary>
        /// <returns></returns>
        public bool SaveShootCalling(string OrderNO, int Shoot_OrderDepartment, int Shoot_ShootEmployee, int Shoot_DressEmployee, string Shoot_Suggestion, string Shoot_Solution, string Shoot_Satisfaction, string Shoot_Connect, string Shoot_Result, bool Shoot_SendSMS, string Shoot_CallEmployeeNO, DateTime Shoot_CallDateTime)
        {
            string strSql = @"if exists (select 1 from CallingBack where OrderNO='" + OrderNO + @"')
begin
	update CallingBack set Shoot_OrderDepartment=" + Shoot_OrderDepartment + @",Shoot_ShootEmployee=" + Shoot_ShootEmployee + @",Shoot_DressEmployee=" + Shoot_DressEmployee + @",
	Shoot_Suggestion='" + Shoot_Suggestion + @"',Shoot_Solution='" + Shoot_Solution + @"',Shoot_Satisfaction='" + Shoot_Satisfaction + @"',Shoot_Connect='" + Shoot_Connect + @"',
	Shoot_Result='" + Shoot_Result + @"',Shoot_SendSMS='" + Shoot_SendSMS + @"',Shoot_CallEmployeeNO='" + Shoot_CallEmployeeNO + @"',Shoot_CallDateTime='" + Shoot_CallDateTime + @"' where OrderNO='" + OrderNO + @"'
end
else
begin
	insert into CallingBack (OrderNO,Shoot_OrderDepartment,Shoot_ShootEmployee,Shoot_DressEmployee,
	Shoot_Suggestion,Shoot_Solution,Shoot_Satisfaction,Shoot_Connect,Shoot_Result,Shoot_SendSMS,
	Shoot_CallEmployeeNO,Shoot_CallDateTime) 
	values 
	('" + OrderNO + @"'," + Shoot_OrderDepartment + @"," + Shoot_ShootEmployee + @"," + Shoot_DressEmployee + @",'" + Shoot_Suggestion + @"','" + Shoot_Solution + @"','" + Shoot_Satisfaction + @"','" + Shoot_Connect + @"','" + Shoot_Result + @"','" + Shoot_SendSMS + @"','" + Shoot_CallEmployeeNO + @"','" + Shoot_CallDateTime + @"')
end";
            return ExecuteSql(strSql);
        }
        /// <summary>
        /// 保存看样后电访信息
        /// </summary>
        /// <returns></returns>
        public bool SaveChooseCalling(string OrderNO, int Choose_ServiceQuality, int Choose_ShootEffect, string Choose_Suggestion, string Choose_Reshoot, string Choose_Solution, string Choose_Satisfaction, string Choose_Connect, string Choose_Result, bool Choose_SendSMS, string Choose_CallEmployeeNO, DateTime Choose_CallDateTime)
        {
            string strSql = @"if exists (select 1 from CallingBack where OrderNO='" + OrderNO + @"')
begin
	update CallingBack set Choose_ServiceQuality=" + Choose_ServiceQuality + @",Choose_ShootEffect=" + Choose_ShootEffect + @",
	Choose_Suggestion='" + Choose_Suggestion + @"',Choose_Reshoot='" + Choose_Reshoot + @"',Choose_Solution='" + Choose_Solution + @"',Choose_Satisfaction='" + Choose_Satisfaction + @"',Choose_Connect='" + Choose_Connect + @"',
	Choose_Result='" + Choose_Result + @"',Choose_SendSMS='" + Choose_SendSMS + @"',Choose_CallEmployeeNO='" + Choose_CallEmployeeNO + "',Choose_CallDateTime='" + Choose_CallDateTime + "' where OrderNO='" + OrderNO + @"'
end
else
begin
	insert into CallingBack (OrderNO,Choose_ServiceQuality,Choose_ShootEffect,Choose_Suggestion,
	Choose_Reshoot,Choose_Solution,Choose_Satisfaction,Choose_Connect,Choose_Result,Choose_SendSMS,
	Choose_CallEmployeeNO,Choose_CallDateTime) 
	values 
	('" + OrderNO + @"'," + Choose_ServiceQuality + @"," + Choose_ShootEffect + @",'" + Choose_Suggestion + @"','" + Choose_Reshoot + @"','" + Choose_Solution + @"','" + Choose_Satisfaction + @"','" + Choose_Connect + @"','" + Choose_Result + @"','" + Choose_SendSMS + @"','" + Choose_CallEmployeeNO + "','" + Choose_CallDateTime + @"')
end";
            return ExecuteSql(strSql);
        }
        /// <summary>
        /// 保存取件后电访信息
        /// </summary>
        /// <returns></returns>
        public bool SaveGotCalling(string OrderNO, string Got_Evaluation, string Got_Recommend, string Got_Suggestion, string Got_SuggestionType, string Got_Solution, string Got_Satisfaction, string Got_Connect, string Got_Result, string Got_SendService, string Got_CallEmployeeNO, DateTime Got_CallDateTime)
        {
            string strSql = @"if exists (select 1 from CallingBack where OrderNO='" + OrderNO + @"')
begin
	update CallingBack set Got_Evaluation='" + Got_Evaluation + @"',Got_Recommend='" + Got_Recommend + @"',
	Got_Suggestion='" + Got_Suggestion + @"',Got_SuggestionType='" + Got_SuggestionType + @"',Got_Solution='" + Got_Solution + @"',Got_Satisfaction='" + Got_Satisfaction + @"',Got_Connect='" + Got_Connect + @"',
	Got_Result='" + Got_Result + @"',Got_SendService='" + Got_SendService + @"',Got_CallEmployeeNO='" + Got_CallEmployeeNO + @"',Got_CallDateTime='" + Got_CallDateTime + @"' where OrderNO='" + OrderNO + @"'
end
else
begin
	insert into CallingBack (OrderNO,Got_Evaluation,Got_Recommend,Got_Suggestion,
	Got_SuggestionType,Got_Solution,Got_Satisfaction,Got_Connect,Got_Result,Got_SendService,
	Got_CallEmployeeNO,Got_CallDateTime) 
	values 
	('" + OrderNO + @"','" + Got_Evaluation + @"','" + Got_Recommend + @"','" + Got_Suggestion + @"','" + Got_SuggestionType + @"','" + Got_Solution + @"','" + Got_Satisfaction + @"','" + Got_Connect + @"','" + Got_Result + @"','" + Got_SendService + @"','" + Got_CallEmployeeNO + @"','" + Got_CallDateTime + @"')
end";
            return ExecuteSql(strSql);
        }

        public bool SaveJiaYiCalling(string OrderNO, int JiaYi_ClothesEmployee, string JiaYi_Suggestion, string JiaYi_Solution, string JiaYi_Satisfaction, string JiaYi_Connect, string JiaYi_Result, string JiaYi_CallEmployeeNO, DateTime JiaYi_CallDateTime)
        {
            string strSql = @"if exists (select 1 from CallingBack where OrderNO='" + OrderNO + @"')
begin
	update CallingBack set JiaYi_ClothesEmployee=" + JiaYi_ClothesEmployee + @",
	JiaYi_Suggestion='" + JiaYi_Suggestion + @"',JiaYi_Solution='" + JiaYi_Solution + @"',JiaYi_Satisfaction='" + JiaYi_Satisfaction + @"',JiaYi_Connect='" + JiaYi_Connect + @"',
	JiaYi_Result='" + JiaYi_Result + @"',JiaYi_CallEmployeeNO='" + JiaYi_CallEmployeeNO + @"',JiaYi_CallDateTime='" + JiaYi_CallDateTime + @"' where OrderNO='" + OrderNO + @"'
end
else
begin
	insert into CallingBack (OrderNO,JiaYi_ClothesEmployee,JiaYi_Suggestion,
	JiaYi_Solution,JiaYi_Satisfaction,JiaYi_Connect,JiaYi_Result,
	JiaYi_CallEmployeeNO,JiaYi_CallDateTime) 
	values 
	('" + OrderNO + @"'," + JiaYi_ClothesEmployee + @",'" + JiaYi_Suggestion + @"','" + JiaYi_Solution + @"','" + JiaYi_Satisfaction + @"','" + JiaYi_Connect + @"','" + JiaYi_Result + @"','" + JiaYi_CallEmployeeNO + @"','" + JiaYi_CallDateTime + @"')
end";
            return ExecuteSql(strSql);
        }
        /// <summary>
        /// 标记短信已发 - 批量发送后
        /// </summary>
        /// <param name="orderlst"></param>
        /// <param name="callingType"></param>
        public bool Calling_SignSendSMS(List<string> orderlst, string callingType)
        {
            string strSql = "";
            foreach (string str in orderlst)
            {
                //                strSql += @"if exists (select 1 from CallingBack where OrderNO='" + str + @"')
                //begin
                //	update CallingBack set "+callingType+@"_SendSMS='true' where OrderNO='" + str + @"'
                //end
                //else
                //begin
                //	insert into CallingBack (OrderNO, " + callingType + @"_SendSMS) values ('" + str + @"', 'true')
                //end";
                strSql += "Update CallingBack set " + callingType + "_SendSMS='true' where OrderNO='" + str + "'\r\n";
            }
            if (!string.IsNullOrEmpty(strSql))
            {
                return ExecuteSql(strSql);
            }
            return false;
        }
        #endregion

        /// <summary>
        /// 看板控单元格是否可用
        /// </summary>
        /// <param name="sGetGoodsAddress">看板地点</param>
        /// <param name="sGetGoodsDate">看板日期</param>
        /// <param name="sRow">单元格-行</param>
        /// <param name="sCol">单元格-列</param>
        /// <returns>-1表示异常,1表示不可用,0表示可用</returns>
        [WebMethod]
        public bool SetLookOpenOrClose(string sLookAddress, string sLookDate, string sRow, string sCol, bool type)
        {
            string sSql = "SELECT top 1 [ID], ControlTableType, [Address], AddressName, Date1,  Date2, ColTitle, RowTime, Creater, CreateDate FROM VIEW_ControlTable where ControlTableType='看版地点' and Address='" + sLookAddress + "' and datediff(dd,'" + sLookDate + "',Date1)<=0 and datediff(dd,'" + sLookDate + "',Date2)>=0 order by CreateDate desc";
            string sID = ExecuteSqlToString(sSql);
            if (sID.Trim() == "")
                return false;
            if (type)
            {
                sSql = "update ControlTableSub set IsReadOnly = 0 where ControlTableID='" + sID + "' and RowIndex='" + sRow + "' and ColIndex='" + sCol + "' ";
            }
            else
            {
                sSql = "update ControlTableSub set IsReadOnly = 1 where ControlTableID='" + sID + "' and RowIndex='" + sRow + "' and ColIndex='" + sCol + "' ";
            }
            return ExecuteSql(sSql);
        }

        public bool SaveChooseLockCode(string EmployeeNO, string LockCode)
        {
            string strSql = "Update Employee set LockCode='" + LockCode + "' where EmployeeNO='" + EmployeeNO + "'";
            return ExecuteSql(strSql);
        }
        public string GetChooseLockCode(string EmployeeNO)
        {
            string strSql = "select LockCode from Employee where EmployeeNO='" + EmployeeNO + "'";
            return ExecuteSqlToString(strSql);
        }
        /// <summary>
        /// 更据锁码查询员工职务
        /// </summary>
        /// <param name="LockCode"></param>
        /// <returns></returns>
        public string CheckChooseLockCode(string LockCode)
        {
            string strSql = "select EmployeeDuty from Employee where LockCode='" + LockCode + "'";
            return ExecuteSqlToString(strSql);
        }

        public bool ChangeOrderPath(string OrderNO, string source)
        {
            string strSql = "update Orders set ImagePath='" + source + "' where OrderNO='" + OrderNO + "'";
            return ExecuteSql(strSql);
        }

        public bool UpdateOrderXsUpLoadFileDate(string employeeNO, string employeeName, string orderno)
        {
            string sql = "update [Orders] set xsUpLoadFileEmployeeNO = '" + employeeNO + "', xsUpLoadFileDate = CONVERT(varchar(100), GETDATE(), 20) where OrderNO = '" + orderno + "'";
            sql += "if exists(select 1 from OrdersSub where OrderNO='" + orderno + "') ";
            sql += "Update OrdersSub set xsUpLoadFileEmployeeName='" + employeeName + "' where OrderNO='" + orderno + "' ";
            sql += "else ";
            sql += "insert into OrdersSub (OrderNO,xsUpLoadFileEmployeeName) values ('" + orderno + "','" + employeeName + "') ";
            return ExecuteSql(sql);
        }

        public DataSet SelectSampleDesignCount(bool DesignType, string shootDeparment, string beginDate, string endDate)
        {
            string designTypeDate = DesignType ? "o.SampleDate" : "o.xsUpLoadFileDate";
            //            string sql = @"select
            //                        o.OrderNO as 订单编号,
            //                        o.CustomerName1 as 先生,
            //                        o.CustomerName2 as 女士,
            //                        o.SuiteName as 套系名称,
            //                        o.ShootAddressN as 摄影场馆,
            //                        o.SampleEmployee as 样修人员,
            //                        o.SampleDate as 样修时间,
            //                        p.PayableSuite as 订单金额,
            //                        (select isnull(Sum(CashNumber),0) from VIEW_Cash where CashPretextTypeName='套系收银' and OrderNO=o.OrderNO) as 订单实付,
            //                        o.xsUpLoadFileEmployee as 转档人员,
            //                        CONVERT(DATETIME,o.xsUpLoadFileDate) 转档时间
            //                        from VIEW_Orders o left join OrdersPayState p on o.OrderNO=p.OrderNO
            //                        where 1=1 " + shootDeparment + @"
            //                        and (DATEDIFF(dd," + designTypeDate + ",'" + beginDate + "')<=0 and DATEDIFF(dd," + designTypeDate + ",'" + endDate + "')>=0) order by " + designTypeDate;
            string sql = @"with shoot 
as (
	select OrderNO,shootDepartment,ROW_NUMBER()over(partition by OrderNO order by PreShootDate desc) RowNO from OrderShoot where IsDelete=0
)
select o.OrderNO 订单编号,c.CustomerName1 先生,c.CustomerName2 女士,Suite.SuiteName 套系名称,
dbo.Fn_GetDepartmentName(shoot.shootDepartment) 摄影场馆,
dbo.Fn_GetEmployeeName(o.SampleEmployeeNO) 样修人员,o.SampleDate 样修时间,p.PayableSuite 订单金额,
(
	select ISNULL(SUM(cd.CashNumber),0) 
	from CashSub cs 
	join CashDetail cd on cs.CashNO=cd.CashNO 
	where cd.CashPretext in ('001','002','003') and cs.OrderNO=o.OrderNO
) 订单实付,
dbo.Fn_GetEmployeeName(o.xsUpLoadFileEmployeeNO) 转档人员,
CONVERT(DATETIME,o.xsUpLoadFileDate) 转档时间
from Orders o join Customers c on o.CustomerNO=c.CustomerNO
left join shoot on shoot.OrderNO=o.OrderNO and shoot.RowNO=1
left join Suite on Suite.SuiteNO=o.SuiteNO
left join OrdersPayState p on p.OrderNO=o.OrderNO
                        where 1=1 " + shootDeparment + @"
                        and (DATEDIFF(dd," + designTypeDate + ",'" + beginDate + "')<=0 and DATEDIFF(dd," + designTypeDate + ",'" + endDate + "')>=0) order by " + designTypeDate;

            return ExecuteDataSet(sql, "SampleDesignCount");
        }

        /// <summary>
        /// add by Caijinsong 2015-7-6
        /// 订单绑定
        /// </summary>
        /// <param name="time1"></param>
        /// <param name="time2"></param>
        /// <returns></returns>
        public DataSet WeiXinBinding(DateTime time1, DateTime time2)
        {
            /*
            //             string sqlString = @"select e.ElementName,COUNT(o.OrderNO) OrderNumber,COUNT(l.OrderNO) BindingNumber  from 
            // Element e left join 
            // (
            // select OrderNO,orderDepartmentNo from Orders where datediff(dd,OrderDate,'" + time1 + "')<=0 and datediff(dd,OrderDate,'" + time2 + @"')>=0 and IsDelete=0 
            // and SuiteTypeNO in ('HS','YS','YS00000','MODA-01')
            // ) o 
            // on e.ElementNO=o.orderDepartmentNo
            // left join WeiXinBindingLogo l on l.OrderNO=o.OrderNO
            // where e.ElementType='订单地点'
            // group by e.ElementName";
            */
            //            string sqlString = @"select e.ElementName,COUNT(o.OrderNO) OrderNumber,COUNT(l.OrderNO) BindingNumber  from 
            //Element e left join 
            //(
            //select o.OrderNO,orderDepartmentNo from Orders o
            //join (select OrderNO from CashSub cs join CashDetail cd on cs.CashNO=cd.CashNO 
            //group by OrderNO having sum(cd.CashNumber)>200 
            //and datediff(dd,max(cs.CashDate),'" + time1 + @"')<=0 
            //and datediff(dd,max(cs.CashDate),'" + time2 + @"')>=0 ) cash on cash.OrderNO=o.OrderNO
            // where o.IsDelete=0 and o.SuiteTypeNO in ('HS','YS','YS00000','MODA-01')
            //) o 
            //on e.ElementNO=o.orderDepartmentNo
            //left join WeiXinBindingLogo l on l.OrderNO=o.OrderNO
            //where e.ElementType='订单地点'
            //group by e.ElementName";
            string sqlString = @"with cash1 as
(
select cs.OrderNO,SUM(cd.CashNumber) CashNumber from CashSub cs join CashDetail cd on cs.CashNO=cd.CashNO
where cd.CashPretext in ('001','002','003') and DATEDIFF(dd,cs.CashDate,'" + time1 + @"')>0
group by cs.OrderNO having SUM(cd.CashNumber)>=200
),
cash2 as
(
select cs.OrderNO,SUM(cd.CashNumber) CashNumber from CashSub cs join CashDetail cd on cs.CashNO=cd.CashNO
where cd.CashPretext in ('001','002','003') and DATEDIFF(dd,cs.CashDate,'" + time1 + @"')>0
group by cs.OrderNO having SUM(cd.CashNumber)<200
),
cash3 as
(
select cs.OrderNO,SUM(cd.CashNumber) CashNumber from CashSub cs join CashDetail cd on cs.CashNO=cd.CashNO
where cd.CashPretext in ('001','002','003') and cs.OrderNO not in (select OrderNO from cash1)
and DATEDIFF(dd,cs.CashDate,'" + time1 + @"')<=0 and DATEDIFF(dd,cs.CashDate,'" + time2 + @"')>=0
group by cs.OrderNO
),
cash as
(
select cash3.OrderNO from cash3 left join cash2 on cash3.OrderNO=cash2.OrderNO 
where (cash3.CashNumber+isnull(cash2.CashNumber,0))>=200
)
select e.ElementName,COUNT(o.OrderNO) OrderNumber,COUNT(l.OrderNO) BindingNumber  
from Element e left join (
select o.OrderNO,o.orderDepartmentNo from Orders o join cash on o.OrderNO=cash.OrderNO
where o.IsDelete=0 and o.SuiteTypeNO in ('HS','YS','YS00000','MODA-01')
) o on e.ElementNO=o.orderDepartmentNo
left join WeiXinBindingLogo l on l.OrderNO=o.OrderNO
where e.ElementType='订单地点'
group by e.ElementName";
            return ExecuteDataSet(sqlString, "WeiXin");
        }
        /// <summary>
        /// add by Caijinsong 2015-7-7
        /// 订单绑定详情
        /// </summary>
        /// <param name="time1"></param>
        /// <param name="time2"></param>
        /// <returns></returns>
        public DataSet WeiXinBindingDetail(DateTime time1, DateTime time2)
        {
            /*
            //             string sqlString = @"select o.OrderNO,c.CustomerName1,c.CustomerName2,d.DepartmentName,e.EmployeeName,SuiteName,SuiteTypeName,o.OrderSuitePrice,l.OrderNO BindingNO,o.OrderDate
            // from Orders o join Customers c on o.CustomerNO=c.CustomerNO
            // join Suite on Suite.SuiteNO=o.SuiteNO
            // join SuiteType on SuiteType.SuiteTypeNO=o.SuiteTypeNO
            // join Department d on d.DepartmentNO=o.orderDepartmentNo
            // join Employee e on e.EmployeeNO=o.OrderEmployeeNO
            // left join WeiXinBindingLogo l on l.OrderNO=o.OrderNO
            // where datediff(dd,OrderDate,'" + time1 + "')<=0 and datediff(dd,OrderDate,'" + time2 + @"')>=0 and o.IsDelete=0 
            // and o.SuiteTypeNO in ('HS','YS','YS00000','MODA-01')
            // order by d.DepartmentName";
            */
            string sqlString = @"with cash1 as
(
select cs.OrderNO,SUM(cd.CashNumber) CashNumber from CashSub cs join CashDetail cd on cs.CashNO=cd.CashNO
where cd.CashPretext in ('001','002','003') and DATEDIFF(dd,cs.CashDate,'" + time1 + @"')>0
group by cs.OrderNO having SUM(cd.CashNumber)>=200
),
cash2 as
(
select cs.OrderNO,SUM(cd.CashNumber) CashNumber from CashSub cs join CashDetail cd on cs.CashNO=cd.CashNO
where cd.CashPretext in ('001','002','003') and DATEDIFF(dd,cs.CashDate,'" + time1 + @"')>0
group by cs.OrderNO having SUM(cd.CashNumber)<200
),
cash3 as
(
select cs.OrderNO,SUM(cd.CashNumber) CashNumber from CashSub cs join CashDetail cd on cs.CashNO=cd.CashNO
where cd.CashPretext in ('001','002','003') and cs.OrderNO not in (select OrderNO from cash1)
and DATEDIFF(dd,cs.CashDate,'" + time1 + "')<=0 and DATEDIFF(dd,cs.CashDate,'" + time2 + @"')>=0
group by cs.OrderNO
),
cash as
(
select cash3.OrderNO from cash3 left join cash2 on cash3.OrderNO=cash2.OrderNO 
where (cash3.CashNumber+isnull(cash2.CashNumber,0))>=200
)
select o.OrderNO,c.CustomerName1,c.CustomerName2,d.DepartmentName,e.EmployeeName,SuiteName,SuiteTypeName,o.OrderSuitePrice,l.OrderNO BindingNO,o.OrderDate
from Orders o join Customers c on o.CustomerNO=c.CustomerNO
join Suite on Suite.SuiteNO=o.SuiteNO
join SuiteType on SuiteType.SuiteTypeNO=o.SuiteTypeNO
join Department d on d.DepartmentNO=o.orderDepartmentNo
join Employee e on e.EmployeeNO=o.OrderEmployeeNO
join cash on cash.OrderNO=o.OrderNO
left join WeiXinBindingLogo l on l.OrderNO=o.OrderNO
where o.SuiteTypeNO in ('HS','YS','YS00000','MODA-01')
order by d.DepartmentName";
            return ExecuteDataSet(sqlString, "WeiXinDetail");
        }
        /// <summary>
        /// 备注模板
        /// </summary>
        public DataSet GetRemarkTempletes()
        {
            string sqlString = "SELECT rt.[ID],[TypeId],[Content],[Creator],e.EmployeeName CreateName,[CreateTime],[UpdateTime] FROM [RemarkTemplete] rt left join Employee e on rt.Creator=e.EmployeeNO";
            return ExecuteDataSet(sqlString, "RemarkTemplete");
        }
        /// <summary>
        /// 添加
        /// </summary>
        /// <param name="remarkTempleteValue"></param>
        /// <param name="content"></param>
        /// <param name="employeeNO"></param>
        /// <param name="dateTime"></param>
        public bool AddRemarkTemplete(byte remarkType, string content, string employeeNO, DateTime createTime)
        {
            string sqlString = "INSERT INTO [RemarkTemplete] ([TypeId],[Content],[Creator],[CreateTime]) VALUES (" + remarkType + ",'" + content + "','" + employeeNO + "','" + createTime + "')";
            return ExecuteSql(sqlString);
        }
        /// <summary>
        /// 修改
        /// </summary>
        /// <param name="Id"></param>
        /// <param name="remarkType"></param>
        /// <param name="content"></param>
        /// <param name="updateTime"></param>
        /// <returns></returns>
        public bool ModifyRemarkTemplete(int Id, byte remarkType, string content, DateTime updateTime)
        {
            string sqlString = "UPDATE [RemarkTemplete] SET [TypeId] = " + remarkType + ",[Content] = '" + content + "',[UpdateTime] ='" + updateTime + "'  WHERE ID=" + Id;
            return ExecuteSql(sqlString);
        }
        /// <summary>
        /// 删除
        /// </summary>
        /// <param name="_id"></param>
        /// <returns></returns>
        public bool DeleteRemarkTemplete(int id)
        {
            string sqlString = @"DELETE FROM [RemarkTemplete] WHERE ID=" + id;
            return ExecuteSql(sqlString);
        }
        /// <summary>
        /// 根据Typeid查询
        /// </summary>
        /// <param name="remarkType"></param>
        /// <returns></returns>
        public DataSet SelectRemarkTemplete(byte remarkType)
        {
            string sqlString = "SELECT Content from RemarkTemplete where TypeId=" + remarkType;
            return ExecuteDataSet(sqlString, "RemarkTemplete");
        }

        public bool UpdateChooseMemory(string orderNO, string memory)
        {
            string sql = "update orders set ChooseMeMory = '" + memory + "' where orderNo = '" + orderNO + "'";
            return ExecuteSql(sql);
        }

        public DataSet OrderShootArrangeCount(DateTime time1, DateTime time2)
        {
            string sqlString = @"select e.ElementName,count(o.OrderNO) OrderNumber,count(shoot.OrderNO) ArrangedNumber from Orders o join Element e on o.orderDepartmentNo=e.ElementNO
left join (select OrderNO from OrderShoot where PreShootDate is not null and datediff(dd,PreShootDate,'1989-1-1')<0 group by OrderNO) shoot on o.OrderNO=shoot.OrderNO
where datediff(dd,o.OrderDate,'" + time1 + "')<=0 and datediff(dd,o.OrderDate,'" + time2 + "')>=0 and IsDelete=0 and e.ElementType='订单地点' group by e.ElementName";
            return ExecuteDataSet(sqlString, "ShootArrangedCount");
        }

        public DataSet OrderShootArrangeCountDetail(DateTime time1, DateTime time2)
        {
            string sqlString = @"select o.OrderNO,c.CustomerName1,c.CustomerName2,el.ElementName OrderDepartment,e.EmployeeName OrderEmployee,
Suite.SuiteName,st.SuiteTypeName,o.SuitePrice,o.OrderDate,shoot.OrderNO ArrangeNO
 from Orders o join Customers c on o.CustomerNO=c.CustomerNO
 left join Element el on el.ElementNO=o.orderDepartmentNo
 left join Employee e on e.EmployeeNO=o.OrderEmployeeNO
 left join Suite on Suite.SuiteNO=o.SuiteNO
 left join SuiteType st on st.SuiteTypeNO=o.SuiteTypeNO
 left join (select OrderNO from OrderShoot where PreShootDate is not null and datediff(dd,PreShootDate,'1989-1-1')<0 group by OrderNO) shoot on o.OrderNO=shoot.OrderNO
 where datediff(dd,o.OrderDate,'" + time1 + "')<=0 and datediff(dd,o.OrderDate,'" + time2 + "')>=0 and o.IsDelete=0 and el.ElementType='订单地点'";
            return ExecuteDataSet(sqlString, "ShootArrangedCountDetail");
        }

        #region Problem add by Caijinsong 2015-10-29
        public DataSet LoadProblemType()
        {
            string sqlString = @"select TypeNO,TypeValue from ProblemType where IsDelete=0";
            return this.ExecuteDataSet(sqlString, "ProblemType");
        }
        public DataSet GetAllProblemType()
        {
            string sqlString = @"SELECT [TypeNO],[TypeValue],[CreateEmpNO],[CreateTime],[IsDelete]FROM [ProblemType] where IsDelete=0";
            return this.ExecuteDataSet(sqlString, "ProblemType");
        }
        /// <summary>
        /// 是否存在ProblemTypeNO
        /// </summary>
        /// <param name="typeNO"></param>
        /// <returns></returns>
        public bool IsExistsProblemTypeNO(string typeNO)
        {
            string sqlString = @"SELECT 1 FROM [ProblemType] where TypeNO='" + typeNO + "'";
            DataSet ds = this.ExecuteDataSet(sqlString, "ProblemType");
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                return true;
            }
            return false;
        }
        /// <summary>
        /// 添加问题类别
        /// </summary>
        /// <param name="typeNo"></param>
        /// <param name="typeValue"></param>
        /// <param name="createEmpNO"></param>
        /// <param name="createTime"></param>
        /// <returns></returns>
        public bool AddProblemType(string typeNo, string typeValue, string createEmpNO)
        {
            string sqlString = @"insert into ProblemType(TypeNO,TypeValue,CreateEmpNO,CreateTime) values ('" + typeNo + "','" + typeValue + "','" + createEmpNO + "',getdate())";
            return ExecuteSql(sqlString);
        }
        /// <summary>
        /// 修改类别
        /// </summary>
        /// <param name="typeNO"></param>
        /// <param name="typeValue"></param>
        /// <returns></returns>
        public bool ModefyProblemType(string typeNO, string typeValue)
        {
            string sqlString = @"update ProblemType set TypeValue='" + typeValue + "' where TypeNO='" + typeNO + "'";
            return ExecuteSql(sqlString);
        }
        /// <summary>
        /// 删除类别
        /// </summary>
        /// <param name="TypeNo"></param>
        /// <returns></returns>
        public bool DeleteProblemType(string TypeNo)
        {
            string sqlString = @"update ProblemType set IsDelete=1 where TypeNO='" + TypeNo + "'";
            return ExecuteSql(sqlString);
        }
        /// <summary>
        /// 问题客户权限
        /// </summary>
        /// <param name="employeeNO"></param>
        /// <returns></returns>
        public bool IsHaveProblemPower(string employeeNO)
        {
            string sqlString = @"select 1 from UserPower u join SystemPower s on u.PowerID=s.ID where s.PowerName='28.客户问题' and u.EmployeeNO='" + employeeNO + "'";
            DataSet ds = this.ExecuteDataSet(sqlString, "UserPower");
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                return true;
            }
            return false;
        }
        /// <summary>
        /// 添加问题
        /// </summary>
        /// <param name="orderNO"></param>
        /// <param name="type"></param>
        /// <param name="content"></param>
        /// <param name="employeeNO"></param>
        /// <returns></returns>
        public bool AddProblem(string orderNO, string type, string content, string employeeNO)
        {
            string sqlString = @"insert into ProblemOrder (OrderNO,ProblemType,Content,CreateEmpNO,CreateTime) values ('" + orderNO + "','" + type + "','" + content + "','" + employeeNO + "',GETDATE())";
            return this.ExecuteSql(sqlString);
        }
        /// <summary>
        /// 添加解决方案
        /// </summary>
        /// <param name="id"></param>
        /// <param name="content"></param>
        /// <param name="employeeNO"></param>
        /// <returns></returns>
        public bool AddSolve(int id, string content, string employeeNO)
        {
            string sqlString = @"update ProblemOrder set Solve='" + content + "',SolveEmpNO='" + employeeNO + "',SolveTime=getdate() where ID=" + id;
            return this.ExecuteSql(sqlString);
        }
        /// <summary>
        /// 根据订单号得到问题数据 Modified by LiuHaiyang 2016.9.29
        /// </summary>
        /// <param name="orderNO"></param>
        /// <returns></returns>
        public DataSet GetProblembyOrderNo(string orderNO)
        {
            string sqlString = @"SELECT po.[ID],[OrderNO],[ProblemType],pt.TypeValue,[Content],po.[CreateEmpNO],pe.EmployeeName CreateEmpName,po.[CreateTime],[Solve],[SolveEmpNO],se.EmployeeName SolveEmpName,[SolveTime],[RecommendWish],po.[IsDelete], po.[IsSolved]
FROM [ProblemOrder] po join ProblemType pt on po.ProblemType=pt.TypeNO
join Employee pe on po.CreateEmpNO=pe.EmployeeNO
left join Employee se on po.SolveEmpNO=se.EmployeeNO where po.OrderNO='" + orderNO + "' and po.IsDelete=0 order by po.CreateTime desc";
            return this.ExecuteDataSet(sqlString, "ProblemOrder");
        }
        /// <summary>
        /// 更新问题
        /// </summary>
        /// <param name="id"></param>
        /// <param name="content"></param>
        /// <returns></returns>
        public bool UpdateProblemContent(int id, string content)
        {
            string sqlString = @"update ProblemOrder set Content='" + content + "'  where ID=" + id;
            return this.ExecuteSql(sqlString);
        }
        /// <summary>
        /// 更新解决方案
        /// </summary>
        /// <param name="id"></param>
        /// <param name="solve"></param>
        /// <returns></returns>
        public bool UpdateSolveContent(int id, string solve)
        {
            string sqlString = @"update ProblemOrder set Solve='" + solve + "'  where ID=" + id;
            return this.ExecuteSql(sqlString);
        }
        /// <summary>
        /// 保存推荐意愿
        /// </summary>
        /// <param name="orderNO"></param>
        /// <param name="recommendType"></param>
        /// <returns></returns>
        public bool SaveRecommendWish(string orderNO, byte recommendType)
        {
            string sqlString = @"update ProblemOrder set RecommendWish=" + recommendType + " where OrderNO='" + orderNO + "'";
            return this.ExecuteSql(sqlString);
        }
        /// <summary>
        /// 查询问题集 Add & Modified by LiuHaiyang 2016.9.26 - 2016.9.28
        /// </summary>
        /// <param name="states"></param>
        /// <param name="recommendType"></param>
        /// <param name="inputBegin"></param>
        /// <param name="inputEnd"></param>
        /// <param name="key"></param>
        /// <returns></returns>
        public DataSet SearchProblem(int states, int recommendType, DateTime inputBegin, DateTime inputEnd, string key, string createEmpNO)
        {
            string strFilter = string.Empty;
            string sqlString = @"select * from 
(select * from (
SELECT po.[ID],po.[OrderNO],[ProblemType],pt.TypeValue,[Content],po.[CreateEmpNO],ce.EmployeeName CreateEmpName,po.[CreateTime],
[Solve],[SolveEmpNO],se.EmployeeName SolveEmpName,[SolveTime],[RecommendWish],
Suite.SuiteName,o.SuitePrice,o.OrderDate,
c.CustomerName1,c.CustomerName2,c.MobilePhone1,c.MobilePhone2, po.IsSolved, 
ol.Process,ol.CreateDate,ROW_NUMBER()over(partition by po.ID order by ol.Process desc) rowNO
FROM [ProblemOrder] po join ProblemType pt on po.ProblemType=pt.TypeNO
join Orders o on o.OrderNO=po.OrderNO
join Suite on Suite.SuiteNO=o.SuiteNO
join Customers c on c.customerNO=o.CustomerNO
left join Employee ce on ce.EmployeeNO=po.CreateEmpNO
left join Employee se on se.EmployeeNO=po.SolveEmpNO
left join OrderLogo ol on ol.OrderNO=po.OrderNO
where po.IsDelete=0 {0}
)a where rowNO=1) b left join Config conf ON b.Process = conf.ConfigNO";
            if (states != -1) // 已处理或未处理
            {
                strFilter += @" and po.IsSolved = " + states;
            }
            if (recommendType > -1)
            {
                strFilter += @" and po.RecommendWish=" + recommendType;
            }
            if (inputBegin != DateTime.MinValue && inputEnd != DateTime.MinValue)
            {
                strFilter += @" and datediff(dd,po.CreateTime,'" + inputBegin + "')<=0 and datediff(dd,po.CreateTime,'" + inputEnd + "')>=0 ";
            }
            if (!string.IsNullOrEmpty(key))
            {
                strFilter += Regex.IsMatch(key, @"^[0-9]+$") ? @" and (c.MobilePhone1 like '%" + key + "%' or c.MobilePhone2 like '%" + key + "%')" : @" and (c.CustomerName1 like '%" + key + "%' or c.CustomerName2 like '%" + key + "%') ";
            }
            if (!string.IsNullOrEmpty(createEmpNO))
            {
                strFilter += @" and ce.EmployeeNO = '" + createEmpNO + @"'";
            }

            return this.ExecuteDataSet(String.Format(sqlString, strFilter), "ProblemOrder");
        }
        #endregion
        /// <summary>
        /// 根据 摄影时间 看样时间 取件时间 查询微信反馈信息
        /// add by Caijinsong 2015-12-7
        /// </summary>
        /// <param name="shootDate"></param>
        /// <param name="chooseDate"></param>
        /// <param name="getGoodsDate"></param>
        public DataSet WeiXinSatisfaction(DateTime[] shootDate, DateTime[] chooseDate, DateTime[] getGoodsDate)
        {
            DateTime _1989 = new DateTime(1989, 1, 1);
            string sqlString = @"select o.OrderNO,os.PreShootDate,o.PreChooseDate,o.PreGetGoodsDate,Suite.SuiteName,st.SuiteTypeName,
c.CustomerName1,c.MobilePhone1,c.CustomerName2,c.MobilePhone2,
cb.Shoot_OrderDepartment,cb.Shoot_DressEmployee,cb.Shoot_ShootEmployee,cb.Shoot_Suggestion,
cb.Choose_ServiceQuality,cb.Choose_PhotoEffect,cb.Choose_ShootEffect,cb.Choose_Suggestion,
cb.Got_ProductQuality,cb.Got_EmployeeService,cb.Got_GetSpeed,cb.Got_Suggestion
from orders o left join (select OrderNO,max (PreShootDate) PreShootDate from OrderShoot group by OrderNO) os on o.OrderNO=os.OrderNO
left join Suite on Suite.SuiteNO=o.SuiteNO
left join SuiteType st on st.SuiteTypeNO=o.SuiteTypeNO
join Customers c on c.CustomerNO=o.CustomerNO
left join CallingBack cb on cb.OrderNO=o.OrderNO
where o.IsDelete=0 and c.IsDelete=0 ";
            if (shootDate[0] > _1989 && shootDate[1] > _1989)
            {
                sqlString += " and datediff(dd,os.PreShootDate,'" + shootDate[0] + "')<=0 and datediff(dd,os.PreShootDate,'" + shootDate[1] + "')>=0 ";
            }
            if (chooseDate[0] > _1989 && shootDate[1] > _1989)
            {
                sqlString += " and datediff(dd,o.PreChooseDate,'" + shootDate[0] + "')<=0 and datediff(dd,o.PreChooseDate,'" + shootDate[1] + "')>=0 ";
            }
            if (getGoodsDate[0] > _1989 && getGoodsDate[1] > _1989)
            {
                sqlString += " and datediff(dd,o.PreGetGoodsDate,'" + getGoodsDate[0] + "')<=0 and datediff(dd,o.PreGetGoodsDate,'" + getGoodsDate[1] + "')>=0 ";
            }
            return this.ExecuteDataSet(sqlString, "Satisfaction");
        }
        /// <summary>
        /// 获取拍摄完成的满意度，（微信 客服）
        /// </summary>
        /// <param name="shootDate1"></param>
        /// <param name="shootDate2"></param>
        /// <returns></returns>
        public DataSet WeiXinSatisfactionShoot(DateTime shootDate1, DateTime shootDate2)
        {
            string sqlString = @"
with shoot as
(
	select case when N.OrderNO='' or N.OrderNO is null then W.OrderNO else N.OrderNO end as OrderNO,
	case when N.PreShootDate is null then W.PreShootDate else N.PreShootDate end as ShootDate,
	case when N.shootDepartment='' or N.shootDepartment is null then W.shootDepartment else N.shootDepartment end as shootDepartment,
	case when N.ShootEmployeeNO='' or N.ShootEmployeeNO is null then W.ShootEmployeeNO else N.ShootEmployeeNO end as ShootEmployeeNO,
	case when N.DressEmployeeNO='' or N.DressEmployeeNO is null then W.DressEmployeeNO else N.DressEmployeeNO end as DressEmployeeNO
	from 
	(
		select OrderNO,PreShootDate,shootDepartment,ShootEmployeeNO,DressEmployeeNO from OrderShoot where ShootType='内景' and IsDelete=0 
		and datediff(dd,PreShootDate,'" + shootDate1 + "')<=0 and datediff(dd,PreShootDate,'" + shootDate2 + @"')>=0
	) N
	full outer join 
	(
		select OrderNO,PreShootDate,shootDepartment,ShootEmployeeNO,DressEmployeeNO from OrderShoot where ShootType='外景' and IsDelete=0 
		and datediff(dd,PreShootDate,'" + shootDate1 + "')<=0 and datediff(dd,PreShootDate,'" + shootDate1 + @"')>=0
	) W
	on N.OrderNO=W.OrderNO
)
select shoot.ShootDate,o.OrderNO,c.CustomerName1,c.MobilePhone1,c.CustomerName2,c.MobilePhone2,
ordDep.DepartmentName OrderDepartment,ordEmp.EmployeeName OrderEmployee,back.Shoot_OrderDepartment,
shootDep.DepartmentName shootDepartment,shootEmp.EmployeeName ShootEmployee,back.Shoot_ShootEmployee,
dressEmp.EmployeeName DressEmployee,back.Shoot_DressEmployee,back.Shoot_Suggestion,Shoot_CallEmployeeNO
from shoot 
join Orders o on o.OrderNO=shoot.OrderNO
join Customers c on o.CustomerNO=c.CustomerNO
left join CallingBack back on back.OrderNO=o.OrderNO
left join Department ordDep on ordDep.DepartmentNO=o.orderDepartmentNo
left join Employee ordEmp on ordEmp.EmployeeNO=o.OrderEmployeeNO
left join Department shootDep on shootDep.DepartmentNO=shoot.shootDepartment
left join Employee shootEmp on shootEmp.EmployeeNO=shoot.ShootEmployeeNO
left join Employee dressEmp on dressEmp.EmployeeNO=shoot.DressEmployeeNO";
            return this.ExecuteDataSet(sqlString, "Satisfaction");
        }
        /// <summary>
        /// 获取看样完成的满意度，（微信 客服 的都有）
        /// </summary>
        /// <param name="chooseDate1"></param>
        /// <param name="chooseDate2"></param>
        /// <returns></returns>
        public DataSet WeiXinSatisfactionChoose(DateTime chooseDate1, DateTime chooseDate2)
        {
            string sqlString = @"
with shoot as
(
	select case when N.OrderNO='' or N.OrderNO is null then W.OrderNO else N.OrderNO end as OrderNO,
	case when N.shootDepartment='' or N.shootDepartment is null then W.shootDepartment else N.shootDepartment end as shootDepartment,
	case when N.ShootEmployeeNO='' or N.ShootEmployeeNO is null then W.ShootEmployeeNO else N.ShootEmployeeNO end as ShootEmployeeNO,
	case when N.DressEmployeeNO='' or N.DressEmployeeNO is null then W.DressEmployeeNO else N.DressEmployeeNO end as DressEmployeeNO
	from 
	(
		select OrderNO,shootDepartment,ShootEmployeeNO,DressEmployeeNO from OrderShoot s1 where ShootType='内景' and IsDelete=0 
		and not exists(select 1 from OrderShoot s2 where s1.OrderNO=s2.OrderNO and s2.ShootType='内景' and s2.IsDelete=0 and s1.PreShootDate<s2.PreShootDate)
	) N
	full outer join 
	(
		select OrderNO,shootDepartment,ShootEmployeeNO,DressEmployeeNO from OrderShoot s1 where ShootType='外景' and IsDelete=0 
		and not exists(select 1 from OrderShoot s2 where s1.OrderNO=s2.OrderNO and s2.ShootType='外景' and s2.IsDelete=0 and s1.PreShootDate<s2.PreShootDate)
	) W
	on N.OrderNO=W.OrderNO
)
select o.PreChooseDate,o.OrderNO,c.CustomerName1,c.MobilePhone1,c.CustomerName2,c.MobilePhone2,
shootDep.DepartmentName shootDepartment,chooseEmp.EmployeeName ChooseEmployee,back.Choose_ServiceQuality,
shootEmp.EmployeeName ShootEmployee,dressEmp.EmployeeName DressEmployee,back.Choose_ShootEffect,
simpleEmp.EmployeeName SampleEmployee,back.Choose_PhotoEffect,back.Choose_Suggestion,back.Choose_CallEmployeeNO
from Orders o
join Customers c on o.CustomerNO=c.CustomerNO and datediff(dd,o.PreChooseDate,'" + chooseDate1 + "')<=0 and datediff(dd,o.PreChooseDate,'" + chooseDate2 + @"')>=0
join shoot on o.OrderNO=shoot.OrderNO 
left join CallingBack back on back.OrderNO=o.OrderNO
left join Employee chooseEmp on chooseEmp.EmployeeNO=o.ChooseEmployeeNO
left join Department shootDep on shootDep.DepartmentNO=shoot.shootDepartment
left join Employee shootEmp on shootEmp.EmployeeNO=shoot.ShootEmployeeNO
left join Employee dressEmp on dressEmp.EmployeeNO=shoot.DressEmployeeNO
left join Employee simpleEmp on simpleEmp.EmployeeNO=o.SampleEmployeeNO";
            return this.ExecuteDataSet(sqlString, "Satisfaction");
        }
        /// <summary>
        /// 获取取件完成的满意度，（微信 客服 的都有）
        /// </summary>
        /// <param name="getGoodsDate1"></param>
        /// <param name="getGoodsDate2"></param>
        /// <returns></returns>
        public DataSet WeiXinSatisfactionGetGoods(DateTime getGoodsDate1, DateTime getGoodsDate2)
        {
            string sqlString = @"
with shoot as
(
	select case when N.OrderNO='' or N.OrderNO is null then W.OrderNO else N.OrderNO end as OrderNO,
	case when N.shootDepartment='' or N.shootDepartment is null then W.shootDepartment else N.shootDepartment end as shootDepartment,
	case when N.ShootEmployeeNO='' or N.ShootEmployeeNO is null then W.ShootEmployeeNO else N.ShootEmployeeNO end as ShootEmployeeNO,
	case when N.DressEmployeeNO='' or N.DressEmployeeNO is null then W.DressEmployeeNO else N.DressEmployeeNO end as DressEmployeeNO
	from 
	(
		select OrderNO,shootDepartment,ShootEmployeeNO,DressEmployeeNO from OrderShoot s1 where ShootType='内景' and IsDelete=0 
		and not exists(select 1 from OrderShoot s2 where s1.OrderNO=s2.OrderNO and s2.ShootType='内景' and s2.IsDelete=0 and s1.PreShootDate<s2.PreShootDate)
	) N
	full outer join 
	(
		select OrderNO,shootDepartment,ShootEmployeeNO,DressEmployeeNO from OrderShoot s1 where ShootType='外景' and IsDelete=0 
		and not exists(select 1 from OrderShoot s2 where s1.OrderNO=s2.OrderNO and s2.ShootType='外景' and s2.IsDelete=0 and s1.PreShootDate<s2.PreShootDate)
	) W
	on N.OrderNO=W.OrderNO
)
select getGoods.GetGoodsDate,o.OrderNO,c.CustomerName1,c.MobilePhone1,c.CustomerName2,c.MobilePhone2,
back.Got_ProductQuality,back.Got_GetSpeed,back.Got_Suggestion,back.Got_CallEmployeeNO,
dep.DepartmentName OrderDepartment,emp.EmployeeName OrderEmployee,
shootDep.DepartmentName shootDepartment,shootEmp.EmployeeName ShootEmployee,dressEmp.EmployeeName DressEmployee,
simpleEmp.EmployeeName SampleEmployee,chooseEmp.EmployeeName ChooseEmployee
from 
(
	select OrderNO,max(GetGoodsDate) GetGoodsDate from OrderProducts 
	where datediff(dd,GetGoodsDate,'" + getGoodsDate1 + "')<=0 and datediff(dd,GetGoodsDate,'" + getGoodsDate2 + @"')>=0
	group by OrderNO
) getGoods 
join Orders o on o.OrderNO=getGoods.OrderNO
join Customers c on o.CustomerNO=c.CustomerNO
left join shoot on o.OrderNO=shoot.OrderNO 
left join CallingBack back on back.OrderNO=o.OrderNO
left join Department shootDep on shootDep.DepartmentNO=shoot.shootDepartment
left join Employee shootEmp on shootEmp.EmployeeNO=shoot.ShootEmployeeNO
left join Employee dressEmp on dressEmp.EmployeeNO=shoot.DressEmployeeNO
left join Employee simpleEmp on simpleEmp.EmployeeNO=o.SampleEmployeeNO
left join Employee chooseEmp on chooseEmp.EmployeeNO=o.ChooseEmployeeNO
left join Department dep on dep.DepartmentNO=o.orderDepartmentNo
left join Employee emp on emp.EmployeeNO=o.OrderEmployeeNO";
            return this.ExecuteDataSet(sqlString, "Satisfaction");
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="orderNO"></param>
        /// <returns></returns>
        public DataSet WeiXinSatisfaction(string orderNO)
        {
            string sqlString = @"select (select max(ShootDate) from OrderShoot where OrderNO=o.OrderNO and IsDelete=0) ShootDate,
Shoot_OrderDepartment, Shoot_DressEmployee, Shoot_ShootEmployee, Shoot_Suggestion,Shoot_CallEmployeeNO,
o.ChooseDate,
Choose_ServiceQuality, Choose_PhotoEffect,Choose_ShootEffect, Choose_Suggestion,Choose_CallEmployeeNO,
(select max(GetGoodsDate) from OrderProducts where OrderNO=o.OrderNO and ProduceState='正常') GetGoodsDate,
Got_ProductQuality, Got_EmployeeService, Got_GetSpeed, Got_Suggestion,Got_CallEmployeeNO
from Orders o left join CallingBack cb on o.OrderNO=cb.OrderNO where o.OrderNO='" + orderNO + "'";
            return this.ExecuteDataSet(sqlString, "CallingBack");
        }
        /// <summary>
        /// 保存微信满意度
        /// </summary>
        /// <param name="OrderNO"></param>
        /// <param name="Shoot_OrderDepartment"></param>
        /// <param name="Shoot_DressEmployee"></param>
        /// <param name="Shoot_ShootEmployee"></param>
        /// <param name="Shoot_Suggestion"></param>
        /// <param name="Choose_ServiceQuality"></param>
        /// <param name="Choose_PhotoEffect"></param>
        /// <param name="Choose_ShootEffect"></param>
        /// <param name="Choose_Suggestion"></param>
        /// <param name="Got_ProductQuality"></param>
        /// <param name="Got_EmployeeService"></param>
        /// <param name="Got_GetSpeed"></param>
        /// <param name="Got_Suggestion"></param>
        /// <returns></returns>
        public bool SaveWeiXinSatisfaction(string OrderNO, int Shoot_OrderDepartment, int Shoot_DressEmployee, int Shoot_ShootEmployee, string Shoot_Suggestion, int Choose_ServiceQuality, int Choose_PhotoEffect, int Choose_ShootEffect, string Choose_Suggestion, int Got_ProductQuality, int Got_GetSpeed, string Got_Suggestion, string employee)
        {
            string sqlString = @"if exists (select 1 from CallingBack where OrderNO='" + OrderNO + @"')
begin
	update CallingBack set Shoot_OrderDepartment=" + Shoot_OrderDepartment + ",Shoot_DressEmployee=" + Shoot_DressEmployee + ",Shoot_ShootEmployee=" + Shoot_ShootEmployee + ",Shoot_Suggestion='" + Shoot_Suggestion + @"',
	Choose_ServiceQuality=" + Choose_ServiceQuality + ",Choose_PhotoEffect=" + Choose_PhotoEffect + ",Choose_ShootEffect=" + Choose_ShootEffect + ",Choose_Suggestion='" + Choose_Suggestion + @"',
	Got_ProductQuality=" + Got_ProductQuality + ",Got_GetSpeed=" + Got_GetSpeed + ",Got_Suggestion='" + Got_Suggestion + "' where OrderNO='" + OrderNO + @"'
end
else
begin
	insert into CallingBack (OrderNO,Shoot_OrderDepartment,Shoot_DressEmployee,Shoot_ShootEmployee,Shoot_Suggestion,Choose_ServiceQuality,Choose_PhotoEffect,Choose_ShootEffect,Choose_Suggestion,Got_ProductQuality,Got_GetSpeed,Got_Suggestion)
	values 
	('" + OrderNO + "'," + Shoot_OrderDepartment + "," + Shoot_DressEmployee + "," + Shoot_ShootEmployee + ",'" + Shoot_Suggestion + "'," + Choose_ServiceQuality + "," + Choose_PhotoEffect + "," + Choose_ShootEffect + ",'" + Choose_Suggestion + "'," + Got_ProductQuality + "," + Got_GetSpeed + ",'" + Got_Suggestion + @"')
end; ";
            if (Shoot_OrderDepartment > 0 && Shoot_DressEmployee > 0 && Shoot_ShootEmployee > 0)
            {
                sqlString += "update CallingBack set Shoot_CallEmployeeNO='" + employee + "' where OrderNO='" + OrderNO + "' and (Shoot_CallEmployeeNO is null or Shoot_CallEmployeeNO='')\r\n";
            }
            if (Choose_ServiceQuality > 0 && Choose_PhotoEffect > 0 && Choose_ShootEffect > 0)
            {
                sqlString += "update CallingBack set Choose_CallEmployeeNO='" + employee + "' where OrderNO='" + OrderNO + "' and (Choose_CallEmployeeNO is null or Choose_CallEmployeeNO='')\r\n";
            }
            if (Got_ProductQuality > 0 && Got_GetSpeed > 0)
            {
                sqlString += "update CallingBack set Got_CallEmployeeNO='" + employee + "' where OrderNO='" + OrderNO + "' and (Got_CallEmployeeNO is null or Got_CallEmployeeNO='')\r\n";
            }
            return this.ExecuteSql(sqlString);
        }
        /// <summary>
        /// 获取重拍原因
        /// </summary>
        /// <returns></returns>
        public DataSet GetRepeatShootReason()
        {
            string sqlString = "select TypeNo,ParentTypeNo,Reason,IsDelete,CreateTime from RepeatShootSet";
            return this.ExecuteDataSet(sqlString, "RepeatShootSet");
        }
        /// <summary>
        /// 根据最上层的typeNO得到重拍原因
        /// </summary>
        /// <param name="topType"></param>
        /// <returns></returns>
        public DataSet GetRepeatShootReason(string topType)
        {
            string sqlString = @"
with child as
(
	select TypeNo,ParentTypeNo,Reason,IsDelete,CreateTime from RepeatShootSet where ParentTypeNo='" + topType + @"'
	union all
	select r.TypeNo,r.ParentTypeNo,r.Reason,r.IsDelete,r.CreateTime from RepeatShootSet r join child c on r.ParentTypeNo=c.TypeNo
)
select TypeNo,ParentTypeNo,Reason,IsDelete from child order by CreateTime";
            return this.ExecuteDataSet(sqlString, "RepeatShootSet"); ;
        }
        /// <summary>
        /// 检查是否有相同编号 true表示有相同的，false 表示没有
        /// </summary>
        /// <param name="p"></param>
        public bool CheckExistRepeatShootReasonTypeNo(string typeNO)
        {
            string sqlString = @"select 1 from RepeatShootSet where TypeNo='" + typeNO + "'";
            DataSet ds = ExecuteDataSet(sqlString, "RepeatShootSet");
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                return true;
            }
            return false;
        }
        /// <summary>
        /// 保存重拍原因
        /// </summary>
        /// <param name="typeNo"></param>
        /// <param name="parentTypeNo"></param>
        /// <param name="reason"></param>
        /// <param name="isDelete"></param>
        /// <param name="employeeNO"></param>
        /// <returns></returns>
        public bool SaveRepeatShootSet(string typeNo, string parentTypeNo, string reason, bool isDelete, string employeeNO)
        {
            string sqlString = "if exists (select 1 from RepeatShootSet where TypeNo='" + typeNo + "' and ParentTypeNo='" + parentTypeNo + @"')
begin
	update RepeatShootSet set Reason='" + reason + "',IsDelete='" + isDelete + "' where TypeNo='" + typeNo + "' and ParentTypeNo='" + parentTypeNo + @"';
    with child as
	(
	    select TypeNo,ParentTypeNo from RepeatShootSet where ParentTypeNo='" + typeNo + @"'
	    union all
	    select r.TypeNo,r.ParentTypeNo from RepeatShootSet r join child c on r.ParentTypeNo=c.TypeNo
	)
    update r set r.IsDelete='" + isDelete + "' from RepeatShootSet r join child on r.TypeNo=child.TypeNo and r.ParentTypeNo=child.ParentTypeNo where '" + isDelete + @"'='true'
end
else
begin
	insert into RepeatShootSet (TypeNo,ParentTypeNo,Reason,IsDelete,Creator,CreateTime) values ('" + typeNo + "','" + parentTypeNo + "','" + reason + "','" + isDelete + "','" + employeeNO + @"',GETDATE())
end";
            return this.ExecuteSql(sqlString);
        }
        /// <summary>
        /// 重拍订单信息
        /// </summary>
        /// <param name="orderNO"></param>
        public DataSet GetRepeatShootOrderInfo(string orderNO)
        {
            string sqlString = @"
with shoot as
(
	select isnull(N.OrderNO,W.OrderNO) OrderNO,case when N.PreShootDate is not null and datediff(dd,N.PreShootDate,'1989-1-1')<0 then N.PreShootDate else W.PreShootDate end as PreShootDate,
	ISNULL(N.shootDepartment,W.shootDepartment) shootDepartment,isnull(N.ShootEmployeeNO,W.ShootEmployeeNO) ShootEmployeeNO,isnull(N.DressEmployeeNO,W.DressEmployeeNO) DressEmployeeNO
	from 
	(
		select OrderNO,PreShootDate,shootDepartment,ShootEmployeeNO,DressEmployeeNO from OrderShoot s1 where ShootType='内景' and IsDelete=0 and OrderNO='" + orderNO + @"'
		and not exists(select 1 from OrderShoot s2 where s1.OrderNO=s2.OrderNO and s2.ShootType='内景' and s2.IsDelete=0 and s1.PreShootDate<s2.PreShootDate)
	) N
	full outer join 
	(
		select OrderNO,PreShootDate,shootDepartment,ShootEmployeeNO,DressEmployeeNO from OrderShoot s1 where ShootType='外景' and IsDelete=0 and OrderNO='" + orderNO + @"'
		and not exists(select 1 from OrderShoot s2 where s1.OrderNO=s2.OrderNO and s2.ShootType='外景' and s2.IsDelete=0 and s1.PreShootDate<s2.PreShootDate)
	) W
	on N.OrderNO=W.OrderNO
)
select o.OrderNO,c.CustomerName1,c.MobilePhone1,c.CustomerName2,c.MobilePhone2,
clothesEmp.EmployeeName ClothesEmployee,shoot.PreShootDate,shootdep.DepartmentName shootDepartment,
shootEmp.EmployeeName ShootEmployee,dressEmp.EmployeeName DressEmployee
from Orders o join Customers c on o.CustomerNO=c.CustomerNO 
left join Employee clothesEmp on clothesEmp.EmployeeNO=o.ClothesEmployeeNO 
left join shoot on shoot.OrderNO=o.OrderNO
left join Employee dressEmp on dressEmp.EmployeeNO=shoot.DressEmployeeNO
left join Employee shootEmp on shootEmp.EmployeeNO=shoot.ShootEmployeeNO
left join Department shootDep on shootDep.DepartmentNO=shoot.shootdepartment
where o.OrderNO='" + orderNO + "'";
            return this.ExecuteDataSet(sqlString, "RepeatOrderNO");
        }
        /// <summary>
        /// 保存订单重拍原因
        /// </summary>
        /// <param name="orderNO"></param>
        /// <param name="ClothesReason"></param>
        /// <param name="DressReason"></param>
        /// <param name="ShootReason"></param>
        /// <param name="OtherReason"></param>
        /// <param name="OtherText"></param>
        /// <param name="Solution"></param>
        /// <param name="ChangeDress"></param>
        /// <param name="ChangeShoot"></param>
        /// <param name="RepeatNO"></param>
        /// <param name="Creator"></param>
        /// <returns></returns>
        public bool SaveRepeatShoot(string orderNO, string RepeatReason, string OtherText, string Solution, bool ChangeDress, bool ChangeShoot, string RepeatNO, string Creator)
        {
            string sqlString = @"if exists (select 1 from RepeatShootReason where OrderNO='" + orderNO + @"')
begin
	update RepeatShootReason set [RepeatReason]='" + RepeatReason + "',[OtherText]='" + OtherText + "',[Solution]='" + Solution + "',[ChangeDress]='" + ChangeDress + "',[ChangeShoot]='" + ChangeShoot + "',[RepeatNO]='" + RepeatNO + "' where OrderNO='" + orderNO + @"'
end
else
begin
	INSERT INTO [dbo].[RepeatShootReason]([OrderNO],[RepeatReason],[OtherText],[Solution],[ChangeDress],[ChangeShoot],[RepeatNO],[Creator],[CreateTime])
    VALUES
    ('" + orderNO + "','" + RepeatReason + "','" + OtherText + "','" + Solution + "','" + ChangeDress + "','" + ChangeShoot + "','" + RepeatNO + "','" + Creator + @"',GETDATE())
end";
            return this.ExecuteSql(sqlString);
        }
        /// <summary>
        /// 订单重拍原因，指定订单
        /// </summary>
        /// <param name="orderNO"></param>
        /// <returns></returns>
        public DataSet GetRepeatShoot(string orderNO)
        {
            string sqlString = "select [OrderNO],[RepeatReason],[OtherText],[Solution],[ChangeDress],[ChangeShoot],[RepeatNO],[Creator],[CreateTime] from RepeatShootReason where OrderNO='" + orderNO + "'";
            return this.ExecuteDataSet(sqlString, "RepeatShootReason");
        }
        /// <summary>
        /// 不用模板也可以改变四控中 可排与不可排
        /// </summary>
        /// <param name="controlType"></param>
        /// <param name="addressNo"></param>
        /// <param name="controlDate"></param>
        /// <param name="rowIndex"></param>
        /// <param name="colIndex"></param>
        /// <param name="isReadOnly"></param>
        /// <param name="creator"></param>
        /// <returns></returns>
        public bool UpdateControlTableSetting(string controlType, string addressNo, DateTime controlDate, byte rowIndex, byte colIndex, bool isReadOnly, string creator)
        {
            string sqlString = @"if exists (select 1 from ControlTableSetting where ControlType='" + controlType + "' and AddressNo='" + addressNo + "' and datediff(dd,ControlDate,'" + controlDate + "')=0 and rowIndex=" + rowIndex + " and colIndex=" + colIndex + @")
begin
	update ControlTableSetting set IsReadOnly='" + isReadOnly + "', UpdateTime=getdate() where ControlType='" + controlType + "' and AddressNo='" + addressNo + "' and datediff(dd,ControlDate,'" + controlDate + "')=0 and rowIndex=" + rowIndex + " and colIndex=" + colIndex + @"
end
else
begin
	insert into ControlTableSetting (ControlType,AddressNo,ControlDate,rowIndex,colIndex,IsReadOnly,Creator,CreateTime) 
	values
	('" + controlType + "','" + addressNo + "','" + controlDate + "'," + rowIndex + "," + colIndex + ",'" + isReadOnly + "','" + creator + @"',getdate())
end";
            return this.ExecuteSql(sqlString);
        }
        /// <summary>
        /// 获取不通过模板改变的四控的可排与不可排数据
        /// </summary>
        /// <param name="controlType"></param>
        /// <param name="addressNO"></param>
        /// <param name="controlDate"></param>
        /// <returns></returns>
        public DataSet GetControlTableSetting(string controlType, string addressNO, DateTime controlDate)
        {
            string sqlString = @"select rowIndex,colIndex,IsReadOnly from ControlTableSetting where ControlType='" + controlType + "' and AddressNo='" + addressNO + "' and datediff(dd,ControlDate,'" + controlDate + "')=0";
            return this.ExecuteDataSet(sqlString, "ControlTableSetting");
        }

        /// <summary>
        /// 保存操作日志
        /// </summary>
        /// <param name="OrderNO">订单号 有就有 没有就没有</param>
        /// <param name="DepartmentNO">操作员工所在部门</param>
        /// <param name="EmployeeNO">操作员工编号</param>
        /// <param name="Create">操作员工姓名</param>
        /// <param name="LogoType">操作日志类别</param>
        /// <param name="LogoContext">操作内容</param>
        /// <returns></returns>
        public bool SaveLogo(string OrderNO, string DepartmentNO, string EmployeeNO, string Create, string LogoType, string LogoContext)
        {
            string sqlString = "insert into logo (OrderNO,DepartmentNO,EmployeeNO,[Create],CreateDate,LogoType,LogoContext) values ('" + OrderNO + "','" + DepartmentNO + "','" + EmployeeNO + "','" + Create + "',GETDATE(),'" + LogoType + "','" + LogoContext + "')";
            return ExecuteSql(sqlString);
        }

        /// <summary>
        /// 摄影后反馈
        /// </summary>
        /// <param name="type"></param>
        /// <param name="time1"></param>
        /// <param name="time2"></param>
        /// <returns></returns>
        public DataSet SatisfactionStatisticsShoot(int type, DateTime time1, DateTime time2)
        {
            DataSet ds = null;
            if (type == 1)
            {
                string sqlString = @"with shoot as(
	select OrderNO from OrderShoot os 	
	where datediff(dd,os.PreShootDate,'" + time1 + "')<=0 and datediff(dd,os.PreShootDate,'" + time2 + @"')>=0 and datediff(dd,os.ShootDate,'1989-1-1')<0 
	group by OrderNO
), KP as(
select  dbo.Fn_GetDepartmentName(o.orderDepartmentNo) DepartmentName,count(1) Total,
sum(case when cb.Shoot_OrderDepartment>0 and cb.Shoot_OrderDepartment!=5 then 1 else 0 end) KaoPing,
sum(case cb.Shoot_OrderDepartment when 1 then 1 else 0 end) VeryGood,
sum(case cb.Shoot_OrderDepartment when 2 then 1 else 0 end) Good,
sum(case cb.Shoot_OrderDepartment when 3 then 1 else 0 end) Normal,
sum(case cb.Shoot_OrderDepartment when 4 then 1 else 0 end) Bad
--cb.Shoot_OrderDepartment,cb.Shoot_DressEmployee,cb.Shoot_ShootEmployee
from shoot s
join Orders o on s.OrderNO=o.OrderNO
left join CallingBack cb on s.OrderNO=cb.OrderNO
group by o.orderDepartmentNo
)
select DepartmentName 门市,Total 总数,KaoPing 考评数,
VeryGood 很好,case KaoPing when 0 then 0.0 else 1.0*VeryGood/KaoPing end 百分比,
Good 好,case KaoPing when 0 then 0.0 else 1.0*Good/KaoPing end 百分比,
Normal 一般,case KaoPing when 0 then 0.0 else 1.0*Normal/KaoPing end 百分比,
Bad 不好,case KaoPing when 0 then 0.0 else 1.0*Bad/KaoPing end 百分比
from KP";
                ds = ExecuteDataSet(sqlString, "Statistics");
            }
            else if (type == 2)
            {
                string sqlString = @"with shoot as(
	select OrderNO,shootDepartment from OrderShoot os 
	where datediff(dd,os.PreShootDate,'" + time1 + "')<=0 and datediff(dd,os.PreShootDate,'" + time2 + @"')>=0 and datediff(dd,os.ShootDate,'1989-1-1')<0 
	group by OrderNO,shootDepartment
), KP as(
select  dbo.Fn_GetDepartmentName(s.shootDepartment) DepartmentName,count(1) Total,
sum(case when cb.Shoot_DressEmployee>0 and cb.Shoot_DressEmployee!=5 then 1 else 0 end) KaoPing,
sum(case cb.Shoot_DressEmployee when 1 then 1 else 0 end) VeryGood,
sum(case cb.Shoot_DressEmployee when 2 then 1 else 0 end) Good,
sum(case cb.Shoot_DressEmployee when 3 then 1 else 0 end) Normal,
sum(case cb.Shoot_DressEmployee when 4 then 1 else 0 end) Bad
--cb.Shoot_OrderDepartment,cb.Shoot_DressEmployee,cb.Shoot_ShootEmployee
from shoot s
left join CallingBack cb on s.OrderNO=cb.OrderNO
group by s.shootDepartment
)
select DepartmentName 部门,Total 总数,KaoPing 考评,
VeryGood 很好,case KaoPing when 0 then 0.0 else 1.0*VeryGood/KaoPing end 百分比,
Good 好,case KaoPing when 0 then 0.0 else 1.0*Good/KaoPing end 百分比,
Normal 一般,case KaoPing when 0 then 0.0 else 1.0*Normal/KaoPing end 百分比,
Bad 不好,case KaoPing when 0 then 0.0 else 1.0*Bad/KaoPing end 百分比
from KP";
                ds = ExecuteDataSet(sqlString, "Statistics");
            }
            else if (type == 3)
            {
                string sqlString = @"with shoot as(
	select OrderNO,shootDepartment from OrderShoot os 
	where datediff(dd,os.PreShootDate,'" + time1 + "')<=0 and datediff(dd,os.PreShootDate,'" + time2 + @"')>=0 and datediff(dd,os.ShootDate,'1989-1-1')<0 
	group by OrderNO,shootDepartment
), KP as(
select  dbo.Fn_GetDepartmentName(s.shootDepartment) DepartmentName,count(1) Total,
sum(case when cb.Shoot_ShootEmployee>0 and cb.Shoot_ShootEmployee!=5 then 1 else 0 end) KaoPing,
sum(case cb.Shoot_ShootEmployee when 1 then 1 else 0 end) VeryGood,
sum(case cb.Shoot_ShootEmployee when 2 then 1 else 0 end) Good,
sum(case cb.Shoot_ShootEmployee when 3 then 1 else 0 end) Normal,
sum(case cb.Shoot_ShootEmployee when 4 then 1 else 0 end) Bad
--cb.Shoot_OrderDepartment,cb.Shoot_DressEmployee,cb.Shoot_ShootEmployee
from shoot s
left join CallingBack cb on s.OrderNO=cb.OrderNO
group by s.shootDepartment
)
select DepartmentName 部门,Total 总数,KaoPing 考评数,
VeryGood 很好,case KaoPing when 0 then 0.0 else 1.0*VeryGood/KaoPing end 百分比,
Good 好,case KaoPing when 0 then 0.0 else 1.0*Good/KaoPing end 百分比,
Normal 一般,case KaoPing when 0 then 0.0 else 1.0*Normal/KaoPing end 百分比,
Bad 不好,case KaoPing when 0 then 0.0 else 1.0*Bad/KaoPing end 百分比
from KP";
                ds = ExecuteDataSet(sqlString, "Statistics");
            }
            return ds;
        }
        /// <summary>
        /// 看样后反馈
        /// </summary>
        /// <param name="type"></param>
        /// <param name="time1"></param>
        /// <param name="time2"></param>
        /// <returns></returns>
        public DataSet SatisfactionStatisticsChoose(int type, DateTime time1, DateTime time2)
        {
            DataSet ds = null;
            if (type == 1)
            {
                string sqlString = @"with [choose] as(
	select OrderNO,ChooseEmployeeNO from Orders o 
	where datediff(dd,o.ChooseDate,'" + time1 + "')<=0 and datediff(dd,o.ChooseDate,'" + time2 + @"')>=0
	group by OrderNO,ChooseEmployeeNO
), KP as(
select  dbo.Fn_GetEmployeeName(c.ChooseEmployeeNO) EmployeeName,count(1) Total,
sum(case when cb.Choose_ServiceQuality>0 and cb.Choose_ServiceQuality!=5 then 1 else 0 end) KaoPing,
sum(case cb.Choose_ServiceQuality when 1 then 1 else 0 end) VeryGood,
sum(case cb.Choose_ServiceQuality when 2 then 1 else 0 end) Good,
sum(case cb.Choose_ServiceQuality when 3 then 1 else 0 end) Normal,
sum(case cb.Choose_ServiceQuality when 4 then 1 else 0 end) Bad
--cb.Shoot_OrderDepartment,cb.Shoot_DressEmployee,cb.Shoot_ShootEmployee
from [choose] c
left join CallingBack cb on c.OrderNO=cb.OrderNO
group by c.ChooseEmployeeNO
)
select EmployeeName 看样师,Total 总数,KaoPing 考评数,
VeryGood 很好,case KaoPing when 0 then 0.0 else 1.0*VeryGood/KaoPing end 百分比,
Good 好,case KaoPing when 0 then 0.0 else 1.0*Good/KaoPing end 百分比,
Normal 一般,case KaoPing when 0 then 0.0 else 1.0*Normal/KaoPing end 百分比,
Bad 不好,case KaoPing when 0 then 0.0 else 1.0*Bad/KaoPing end 百分比
from KP";
                ds = ExecuteDataSet(sqlString, "Statistics");
            }
            else if (type == 2)
            {
                string sqlString = @"with [choose] as(
	select OrderNO,ded.DepartmentName from Orders o join DesignEmployeeDepartment ded on o.xsUpLoadFileEmployeeNO=ded.EmployeeNO
	where datediff(dd,o.ChooseDate,'" + time1 + "')<=0 and datediff(dd,o.ChooseDate,'" + time2 + @"')>=0
	group by OrderNO,ded.DepartmentName
), KP as(
select  DepartmentName,count(1) Total,
sum(case when cb.Choose_PhotoEffect>0 and cb.Choose_PhotoEffect!=5 then 1 else 0 end) KaoPing,
sum(case cb.Choose_PhotoEffect when 1 then 1 else 0 end) VeryGood,
sum(case cb.Choose_PhotoEffect when 2 then 1 else 0 end) Good,
sum(case cb.Choose_PhotoEffect when 3 then 1 else 0 end) Normal,
sum(case cb.Choose_PhotoEffect when 4 then 1 else 0 end) Bad
from [choose] c
left join CallingBack cb on c.OrderNO=cb.OrderNO
group by c.DepartmentName
)
select DepartmentName 部门,Total 总数,KaoPing 考评数,
VeryGood 很好,case KaoPing when 0 then 0.0 else 1.0*VeryGood/KaoPing end 百分比,
Good 好,case KaoPing when 0 then 0.0 else 1.0*Good/KaoPing end 百分比,
Normal 一般,case KaoPing when 0 then 0.0 else 1.0*Normal/KaoPing end 百分比,
Bad 不好,case KaoPing when 0 then 0.0 else 1.0*Bad/KaoPing end 百分比
from KP";
                ds = ExecuteDataSet(sqlString, "Statistics");
            }
            else if (type == 3)
            {
                string sqlString = @"with [shoot] as(
	select o.OrderNO,os.shootDepartment from Orders o join OrderShoot os on o.OrderNO=os.OrderNO
	where datediff(dd,o.ChooseDate,'" + time1 + "')<=0 and datediff(dd,o.ChooseDate,'" + time2 + @"')>=0 and os.IsDelete=0
	group by o.OrderNO,os.shootDepartment
), KP as(
select  dbo.Fn_GetDepartmentName(s.shootDepartment) DepartmentName,count(1) Total,
sum(case when cb.Choose_ShootEffect>0 and cb.Choose_ShootEffect!=5 then 1 else 0 end) KaoPing,
sum(case cb.Choose_ShootEffect when 1 then 1 else 0 end) VeryGood,
sum(case cb.Choose_ShootEffect when 2 then 1 else 0 end) Good,
sum(case cb.Choose_ShootEffect when 3 then 1 else 0 end) Normal,
sum(case cb.Choose_ShootEffect when 4 then 1 else 0 end) Bad
from [shoot] s
left join CallingBack cb on s.OrderNO=cb.OrderNO
group by s.shootDepartment
)
select DepartmentName 部门,Total 总数,KaoPing 考评数,
VeryGood 很好,case KaoPing when 0 then 0.0 else 1.0*VeryGood/KaoPing end 百分比,
Good 好,case KaoPing when 0 then 0.0 else 1.0*Good/KaoPing end 百分比,
Normal 一般,case KaoPing when 0 then 0.0 else 1.0*Normal/KaoPing end 百分比,
Bad 不好,case KaoPing when 0 then 0.0 else 1.0*Bad/KaoPing end 百分比
from KP order by DepartmentName";
                ds = ExecuteDataSet(sqlString, "Statistics");
            }
            return ds;
        }
        /// <summary>
        /// 取件后反馈
        /// </summary>
        /// <param name="type"></param>
        /// <param name="time1"></param>
        /// <param name="time2"></param>
        /// <returns></returns>
        public DataSet SatisfactionStatisticsGot(int type, DateTime time1, DateTime time2)
        {
            DataSet ds = null;
            if (type == 1)
            {
                string sqlString = @"with getGoods as (
	select o.OrderNO,o.GetGoodsAddress 
	from OrderProducts op join Orders o on op.OrderNO=o.OrderNO and o.IsDelete=0
	where datediff(dd,op.GetGoodsDate,'" + time1 + "')<=0 and datediff(dd,op.GetGoodsDate,'" + time2 + @"')>=0
	group by o.OrderNO,o.GetGoodsAddress 
),KP as (
	select gg.GetGoodsAddress,COUNT(1) Total,
	sum(case when cb.Got_ProductQuality>0 and cb.Got_ProductQuality!=5 then 1 else 0 end) KaoPing,
	sum(case cb.Got_ProductQuality when 1 then 1 else 0 end) VeryGood,
	sum(case cb.Got_ProductQuality when 2 then 1 else 0 end) Good,
	sum(case cb.Got_ProductQuality when 3 then 1 else 0 end) Normal,
	sum(case cb.Got_ProductQuality when 4 then 1 else 0 end) Bad	
	from getGoods gg left join CallingBack cb on gg.OrderNO=cb.OrderNO
	group by gg.GetGoodsAddress
)
select d.DepartmentName 部门,Total 总数,KaoPing 考评数,
VeryGood 很好,case KaoPing when 0 then 0.0 else 1.0*VeryGood/KaoPing end 百分比,
Good 好,case KaoPing when 0 then 0.0 else 1.0*Good/KaoPing end 百分比,
Normal 一般,case KaoPing when 0 then 0.0 else 1.0*Normal/KaoPing end 百分比,
Bad 不好,case KaoPing when 0 then 0.0 else 1.0*Bad/KaoPing end 百分比 
from KP join Department d on KP.GetGoodsAddress=d.DepartmentNO
order by d.DepartmentName";
                ds = ExecuteDataSet(sqlString, "Statistics");
            }
            else if (type == 2)
            {
                string sqlString = @"with getGoods as (
	select o.OrderNO,o.GetGoodsAddress 
	from OrderProducts op join Orders o on op.OrderNO=o.OrderNO and o.IsDelete=0
	where datediff(dd,op.GetGoodsDate,'" + time1 + "')<=0 and datediff(dd,op.GetGoodsDate,'" + time2 + @"')>=0
	group by o.OrderNO,o.GetGoodsAddress 
),KP as (
	select gg.GetGoodsAddress,COUNT(1) Total,
	sum(case when cb.Got_GetSpeed>0 and cb.Got_GetSpeed!=5 then 1 else 0 end) KaoPing,
	sum(case cb.Got_GetSpeed when 1 then 1 else 0 end) VeryGood,
	sum(case cb.Got_GetSpeed when 2 then 1 else 0 end) Good,
	sum(case cb.Got_GetSpeed when 3 then 1 else 0 end) Normal,
	sum(case cb.Got_GetSpeed when 4 then 1 else 0 end) Bad	
	from getGoods gg left join CallingBack cb on gg.OrderNO=cb.OrderNO
	group by gg.GetGoodsAddress
)
select d.DepartmentName 部门,Total 总数,KaoPing 考评数,
VeryGood 很好,case KaoPing when 0 then 0.0 else 1.0*VeryGood/KaoPing end 百分比,
Good 好,case KaoPing when 0 then 0.0 else 1.0*Good/KaoPing end 百分比,
Normal 一般,case KaoPing when 0 then 0.0 else 1.0*Normal/KaoPing end 百分比,
Bad 不好,case KaoPing when 0 then 0.0 else 1.0*Bad/KaoPing end 百分比 
from KP join Department d on KP.GetGoodsAddress=d.DepartmentNO
order by d.DepartmentName";
                ds = ExecuteDataSet(sqlString, "Statistics");
            }
            return ds;
        }
        /// <summary>
        /// 重拍要发送短信，所以要读取订单信息
        /// </summary>
        /// <param name="OrderNO">订单号</param>
        /// <param name="ShootType">全套，内景，外景</param>
        /// <returns></returns>
        public DataSet GetOrderRepeatShoot(string OrderNO, string ShootType)
        {
            string sqlString = @"select top 1 c.CustomerName1+'('+c.MobilePhone1+')'+c.CustomerName2+'('+c.MobilePhone2+')' Customer,
dbo.Fn_GetDepartmentName(os.shootDepartment) shootDepartment, 
dbo.Fn_GetEmployeeName(os.ShootEmployeeNO) ShootEmployee,
dbo.Fn_GetEmployeeName(os.DressEmployeeNO) DressEmployee,
dbo.Fn_GetEmployeeName(os.LightEmployeeNO) LightEmployee,
dbo.Fn_GetEmployeeName(os.DressAssistantEmployeeNO) DressAssistantEmployee,
os.PreShootDate,os.ShootMemory,r.RepeatReason
from OrderShoot os
left join RepeatShootReason r on os.OrderNO=r.OrderNO
left join orders o on o.OrderNO=os.OrderNO
left join Customers c on c.CustomerNO=o.CustomerNO
where os.orderno='" + OrderNO + "' and os.shootState='重拍' ";
            if (ShootType != "全套")
            {
                sqlString += "and os.ShootType='" + ShootType + "'";
            }
            return ExecuteDataSet(sqlString, "RepeatShoot");
        }
        /// <summary>
        /// 获取重拍原因对应的文字
        /// </summary>
        /// <param name="OrderNO">订单号</param>
        /// <param name="reasons">重拍原因编号</param>
        /// <returns></returns>
        public DataSet OrderRepeatShootReasonText(string OrderNO, string[] reasons)
        {
            string sqlString = "";
            foreach (var item in reasons)
            {
                if (!string.IsNullOrEmpty(sqlString))//不为空，加关键字‘union’
                {
                    sqlString += " union ";
                }
                //sqlString += "select Reason from RepeatShootSet where TypeNo='" + item + "'";
                sqlString += "select Reason from RepeatShootSet r where IsDelete=0 and TypeNo='" + item + "' and not exists (select 1 from RepeatShootSet r2 where r2.ParentTypeNo=r.TypeNo)";
            }
            /*不为空才执行sql语句*/
            if (!string.IsNullOrEmpty(sqlString))
            {
                return ExecuteDataSet(sqlString, "RepeatShootReason");
            }
            return null;
        }
        /// <summary>
        /// 接收重拍短信的手机号
        /// </summary>
        /// <param name="sOrderNO"></param>
        /// <returns></returns>
        public DataSet ReceiveRepeatShootSmsPhone(string sOrderNO)
        {
            string sqlString = "select e.EmployeePhone from Employee e join UserPower up on e.EmployeeNO=up.EmployeeNO join SystemPower sp on up.PowerID=sp.ID where sp.PowerName='30.摄影重拍短信' group by e.EmployeePhone";
            return ExecuteDataSet(sqlString, "EmployeePhone");
        }

        /// <summary>
        /// 获取当前总店所有的客服人员 LiuHaiyang 2016.9.26
        /// </summary>
        /// <returns>总店客服人员数据</returns>
        public DataSet GetServiceEmployee()
        {
            return ExecuteDataSet("SELECT [EmployeeNO], [EmployeeName] FROM [dbo].[Employee] WHERE [DepartmentNO] in( 'G0103010104' , 'G0103010105') AND [IsDelete] = 'false'", "Stuff");
        }

        /// <summary>
        /// 设置客户问题的处理状态 LiuHaiyang 2016.9.28
        /// </summary>
        /// <param name="problemID">问题唯一编号</param>
        /// <param name="solved">处理状态</param>
        /// <returns>是否执行成功</returns>
        public bool SetProblemSolved(int problemID, bool solved)
        {
            return (0 != ExecuteNoneQuery(String.Format("UPDATE ProblemOrder SET IsSolved = '{0}' WHERE ID = {1}", solved.ToString(), problemID)));
        }

        /// <summary>
        /// 批量设置客户问题的处理状态 LiuHaiyang 2016.9.28
        /// </summary>
        /// <param name="problemIDs">多个问题的编号字符串</param>
        /// <param name="solved">处理状态</param>
        /// <returns>是否执行成功</returns>
        public bool SetBatchProblemSolved(string problemIDs, bool solved)
        {
            return (0 != ExecuteNoneQuery(String.Format("UPDATE ProblemOrder SET IsSolved = '{0}' WHERE ID IN ({1})", solved.ToString(), problemIDs)));
        }

        /// <summary>
        /// 获取时间段内某个订单地点的接单量和全款量
        /// </summary>
        /// <param name="orderAddressNo">订单地点编号</param>
        /// <param name="dateBegin">起始时间</param>
        /// <param name="dateEnd">结束时间</param>
        /// <returns>[接单量, 全款量]</returns>
        public int[] GetTotalAndFullCashCount(string orderAddressNo, string dateBegin, string dateEnd)
        {
            string strSql = string.Format(@"DECLARE 
                                            @beginTime DATETIME = '{0}',
                                            @endTime DATETIME = '{1}',
                                            @orderAddressNo VARCHAR(20) = '{2}'

                                            SELECT o.OrderNO, 
                                            (
                                                SELECT ISNULL(SUM(cd.CashNumber), 0.00) - o.OrderSuitePrice AS CCC 
                                                FROM CashSub AS cs 
                                                    LEFT JOIN CashDetail AS cd ON cs.CashNO = cd.CashNO 
                                                WHERE cs.OrderNO = o.OrderNO 
                                                    AND cs.CashState = '正常' 
                                                    AND cd.CashPretext IN('001', '002', '003') 
                                                    AND DATEDIFF(DD, @endTime, cs.CashDate) <= 0
                                            ) AS OverPay 
                                            FROM Orders o 
                                            WHERE DATEDIFF(DD, @beginTime, o.OrderDate) >= 0 
                                                AND DATEDIFF(DD, @endTime, o.OrderDate) <= 0 
                                                AND o.IsDelete <> 'true' 
                                                AND o.orderDepartmentNo = @orderAddressNo", dateBegin, dateEnd, orderAddressNo);
            using (DataSet ds = ExecuteDataSet(strSql, "FullCashCount"))
            {
                if (ds.Tables.Count <= 0) return new[] { 0, 0 };

                using (DataTable dt = ds.Tables[0])
                {
                    int nTotalCount = dt.Rows.Count;
                    int nFullCashCount = dt.Rows.Cast<DataRow>().Count(dr => Convert.ToDecimal(dr["OverPay"]) >= 0.00m);
                    return new[] { nTotalCount, nFullCashCount };
                }
            }
        }
        /// <summary>
        /// 获取订单号指定的客服人员
        /// </summary>
        /// <param name="orderNO">订单号</param>
        /// <returns>客服人员</returns>
        public string GetCustomerStaff(string orderNO)
        {
            string sqlString = "select CustomerStaff from OrdersSub where OrderNO='" + orderNO + "'";
            return ExecuteSqlToString(sqlString);
        }
        /// <summary>
        /// 订单分配客服人员
        /// </summary>
        /// <param name="orderNO">订单号</param>
        /// <param name="employeeName">客服人员姓名</param>
        /// <returns></returns>
        public int SetCustomerStaff(string orderNO, string employeeName)
        {
            string sqlString = "update OrdersSub set CustomerStaff='" + employeeName + "' where OrderNO='" + orderNO + "'";
            return ExecuteNoneQuery(sqlString);
        }

        /// <summary>
        /// 查询全款但没有摄控的订单信息
        /// </summary>
        /// <param name="date1">付款后达到全款时间1</param>
        /// <param name="date2">付款后达到全款时间2</param>
        /// <returns></returns>
        public DataSet SearchFullPayNoShoot(DateTime date1, DateTime date2)
        {
            string sqlString = string.Format(@"with cash as(
select cs.OrderNO,MAX(cs.CashDate) CashDate,sum(cd.CashNumber) CashNumber
from CashSub cs 
join CashDetail cd on cs.CashNO=cd.CashNO 
where cd.CashPretext in ('001','002','003') 
group by cs.OrderNO
having datediff(dd,MAX(cs.CashDate),'{0}')<=0 and datediff(dd,MAX(cs.CashDate),'{1}')>=0
) 
select o.OrderNO,Suite.SuiteName,o.SuitePrice,o.OrderSuitePrice,c.CustomerName1,c.MobilePhone1,c.CustomerName2,c.MobilePhone2,os.CustomerStaff,cash.CashDate
from Orders o 
join cash on o.OrderNO=cash.OrderNO and o.OrderSuitePrice=cash.CashNumber
join Customers c on c.CustomerNO=o.CustomerNO
join Suite on Suite.SuiteNO=o.SuiteNO
left join OrdersSub os on os.OrderNO=o.OrderNO
where not exists (select 1 from OrderShoot os where os.OrderNO=o.OrderNO and os.PreShootDate is not null and datediff(dd,os.PreShootDate,'1989-1-1')<0)
order by cash.CashDate", date1, date2);
            return ExecuteDataSet(sqlString, "FullPayNoShoot");
        }
      
        public List<string> GetOrderPaths()
        {
            try
            {
                List<string> lst = new List<string>();
                using(DataSet ds = ExecuteDataSet(@"SELECT * FROM OrdersPath", @"table"))
                {
                    lst.AddRange(from DataRow dr in ds.Tables[0].Rows select dr["Path"].ToString());
                }
                return lst;
            }
            catch
            {
                return new List<string>();
            }
        }
    }
}


